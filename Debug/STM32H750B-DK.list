
STM32H750B-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .AI_DTCMRAM   00000eb0  20000000  20000000  00020000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  1 .AI_RAM_D1    00000000  24000000  24000000  0003bdc0  2**0
                  CONTENTS
  2 .AI_RAM_D2    00000000  30000000  30000000  0003bdc0  2**0
                  CONTENTS
  3 .AI_RAM_D3    00000000  38000000  38000000  0003bdc0  2**0
                  CONTENTS
  4 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .text         00009dd0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00013d24  0800a070  0800a070  0000b070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  0801dd94  0801dd94  0001ed94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000004  0801dd9c  0801dd9c  0001ed9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000004  0801dda0  0801dda0  0001eda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         0000081c  24000000  0801dda4  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008a8  24000820  0801e5c0  0001f820  2**3
                  ALLOC
 12 .ext1flash_section 0001adc0  90000000  90000000  00021000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 ._user_heap_stack 00001000  20000eb0  20000eb0  00020eb0  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  0003bdc0  2**0
                  CONTENTS, READONLY
 15 .debug_info   00027d76  00000000  00000000  0003bdee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000508d  00000000  00000000  00063b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 0000b300  00000000  00000000  00068bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001338  00000000  00000000  00073ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000012c8  00000000  00000000  00075230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003e815  00000000  00000000  000764f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00023807  00000000  00000000  000b4d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00186d2a  00000000  00000000  000d8514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000086  00000000  00000000  0025f23e  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000042f8  00000000  00000000  0025f2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000006b  00000000  00000000  002635bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000820 	.word	0x24000820
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a058 	.word	0x0800a058

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000824 	.word	0x24000824
 80002dc:	0800a058 	.word	0x0800a058

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b530      	push	{r4, r5, lr}
 8000682:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000684:	224c      	movs	r2, #76	@ 0x4c
 8000686:	2100      	movs	r1, #0
 8000688:	a80b      	add	r0, sp, #44	@ 0x2c
 800068a:	f007 fdd5 	bl	8008238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068e:	2220      	movs	r2, #32
 8000690:	2100      	movs	r1, #0
 8000692:	a803      	add	r0, sp, #12
 8000694:	f007 fdd0 	bl	8008238 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000698:	2002      	movs	r0, #2
 800069a:	f002 fb29 	bl	8002cf0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069e:	2300      	movs	r3, #0
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	4b36      	ldr	r3, [pc, #216]	@ (800077c <SystemClock_Config+0xfc>)
 80006a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006a6:	f022 0201 	bic.w	r2, r2, #1
 80006aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	4b32      	ldr	r3, [pc, #200]	@ (8000780 <SystemClock_Config+0x100>)
 80006b6:	699a      	ldr	r2, [r3, #24]
 80006b8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80006bc:	619a      	str	r2, [r3, #24]
 80006be:	699a      	ldr	r2, [r3, #24]
 80006c0:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 80006c4:	9200      	str	r2, [sp, #0]
 80006c6:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c8:	699a      	ldr	r2, [r3, #24]
 80006ca:	0495      	lsls	r5, r2, #18
 80006cc:	d5fc      	bpl.n	80006c8 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ce:	4a2d      	ldr	r2, [pc, #180]	@ (8000784 <SystemClock_Config+0x104>)
 80006d0:	f8d2 10f4 	ldr.w	r1, [r2, #244]	@ 0xf4
 80006d4:	f041 0102 	orr.w	r1, r1, #2
 80006d8:	f8c2 10f4 	str.w	r1, [r2, #244]	@ 0xf4
 80006dc:	f8d2 20f4 	ldr.w	r2, [r2, #244]	@ 0xf4
 80006e0:	f002 0202 	and.w	r2, r2, #2
 80006e4:	9201      	str	r2, [sp, #4]
 80006e6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	9202      	str	r2, [sp, #8]
 80006ec:	699a      	ldr	r2, [r3, #24]
 80006ee:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80006f2:	619a      	str	r2, [r3, #24]
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006fa:	9302      	str	r3, [sp, #8]
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <SystemClock_Config+0xfc>)
 80006fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000700:	f042 0201 	orr.w	r2, r2, #1
 8000704:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000708:	4a1d      	ldr	r2, [pc, #116]	@ (8000780 <SystemClock_Config+0x100>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	9302      	str	r3, [sp, #8]
 8000710:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000712:	6993      	ldr	r3, [r2, #24]
 8000714:	049c      	lsls	r4, r3, #18
 8000716:	d5fc      	bpl.n	8000712 <SystemClock_Config+0x92>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000718:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800071c:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800071e:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000720:	2005      	movs	r0, #5
 8000722:	22c0      	movs	r2, #192	@ 0xc0
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000724:	2508      	movs	r5, #8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000726:	e9cd 130b 	strd	r1, r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072c:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000730:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000732:	e9cd 4319 	strd	r4, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000736:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000738:	e9cd 0216 	strd	r0, r2, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800073e:	931d      	str	r3, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000740:	e9cd 531b 	strd	r5, r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f002 fdba 	bl	80032bc <HAL_RCC_OscConfig>
 8000748:	b108      	cbz	r0, 800074e <SystemClock_Config+0xce>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	e7fe      	b.n	800074c <SystemClock_Config+0xcc>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	223f      	movs	r2, #63	@ 0x3f
 8000750:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000752:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000758:	2340      	movs	r3, #64	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800075a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800075e:	e9cd 0505 	strd	r0, r5, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000762:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000764:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000768:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800076c:	f003 f8f4 	bl	8003958 <HAL_RCC_ClockConfig>
 8000770:	b108      	cbz	r0, 8000776 <SystemClock_Config+0xf6>
 8000772:	b672      	cpsid	i
  while (1)
 8000774:	e7fe      	b.n	8000774 <SystemClock_Config+0xf4>
}
 8000776:	b01f      	add	sp, #124	@ 0x7c
 8000778:	bd30      	pop	{r4, r5, pc}
 800077a:	bf00      	nop
 800077c:	58000400 	.word	0x58000400
 8000780:	58024800 	.word	0x58024800
 8000784:	58024400 	.word	0x58024400

08000788 <MX_USART3_UART_Init>:
{
 8000788:	b510      	push	{r4, lr}
  huart3.Init.BaudRate = 115200;
 800078a:	4a16      	ldr	r2, [pc, #88]	@ (80007e4 <MX_USART3_UART_Init+0x5c>)
 800078c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart3.Instance = USART3;
 8000790:	4c15      	ldr	r4, [pc, #84]	@ (80007e8 <MX_USART3_UART_Init+0x60>)
  huart3.Init.BaudRate = 115200;
 8000792:	e9c4 2300 	strd	r2, r3, [r4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000798:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800079a:	4620      	mov	r0, r4
  huart3.Init.Parity = UART_PARITY_NONE;
 800079c:	6123      	str	r3, [r4, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800079e:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007aa:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ae:	f004 ff14 	bl	80055da <HAL_UART_Init>
 80007b2:	4601      	mov	r1, r0
 80007b4:	b108      	cbz	r0, 80007ba <MX_USART3_UART_Init+0x32>
 80007b6:	b672      	cpsid	i
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MX_USART3_UART_Init+0x30>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ba:	4620      	mov	r0, r4
 80007bc:	f004 ff7b 	bl	80056b6 <HAL_UARTEx_SetTxFifoThreshold>
 80007c0:	4601      	mov	r1, r0
 80007c2:	b108      	cbz	r0, 80007c8 <MX_USART3_UART_Init+0x40>
 80007c4:	b672      	cpsid	i
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <MX_USART3_UART_Init+0x3e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c8:	4620      	mov	r0, r4
 80007ca:	f004 ff94 	bl	80056f6 <HAL_UARTEx_SetRxFifoThreshold>
 80007ce:	b108      	cbz	r0, 80007d4 <MX_USART3_UART_Init+0x4c>
 80007d0:	b672      	cpsid	i
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <MX_USART3_UART_Init+0x4a>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007d4:	4620      	mov	r0, r4
 80007d6:	f004 ff53 	bl	8005680 <HAL_UARTEx_DisableFifoMode>
 80007da:	b108      	cbz	r0, 80007e0 <MX_USART3_UART_Init+0x58>
 80007dc:	b672      	cpsid	i
  while (1)
 80007de:	e7fe      	b.n	80007de <MX_USART3_UART_Init+0x56>
}
 80007e0:	bd10      	pop	{r4, pc}
 80007e2:	bf00      	nop
 80007e4:	40004800 	.word	0x40004800
 80007e8:	24000cb4 	.word	0x24000cb4

080007ec <pa3_ai_network_init>:
{
 80007ec:	b510      	push	{r4, lr}
    ai_error err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80007ee:	2100      	movs	r1, #0
{
 80007f0:	b08e      	sub	sp, #56	@ 0x38
    ai_error err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80007f2:	4813      	ldr	r0, [pc, #76]	@ (8000840 <pa3_ai_network_init+0x54>)
 80007f4:	f005 f8c2 	bl	800597c <ai_network_create>
    if ((err.code != AI_ERROR_CODE_NONE) && (err.type != AI_ERROR_NONE)) {
 80007f8:	28ff      	cmp	r0, #255	@ 0xff
 80007fa:	d905      	bls.n	8000808 <pa3_ai_network_init+0x1c>
 80007fc:	b2c0      	uxtb	r0, r0
 80007fe:	b118      	cbz	r0, 8000808 <pa3_ai_network_init+0x1c>
    	__NOP();
 8000800:	bf00      	nop
        return false;
 8000802:	2000      	movs	r0, #0
}
 8000804:	b00e      	add	sp, #56	@ 0x38
 8000806:	bd10      	pop	{r4, pc}
    		AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),  	// Macro for getting weights
 8000808:	f005 f98a 	bl	8005b20 <ai_network_data_weights_get>
 800080c:	4601      	mov	r1, r0
 800080e:	4668      	mov	r0, sp
    if (!ai_network_init(network, &params)) {
 8000810:	4c0b      	ldr	r4, [pc, #44]	@ (8000840 <pa3_ai_network_init+0x54>)
    		AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),  	// Macro for getting weights
 8000812:	f005 f971 	bl	8005af8 <ai_network_data_weights_buffer_get>
    		AI_NETWORK_DATA_ACTIVATIONS(data_activations0[0])  					// Macro for setting activations buffer
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <pa3_ai_network_init+0x58>)
 8000818:	a807      	add	r0, sp, #28
 800081a:	6819      	ldr	r1, [r3, #0]
 800081c:	f005 f958 	bl	8005ad0 <ai_network_data_activations_buffer_get>
    if (!ai_network_init(network, &params)) {
 8000820:	4669      	mov	r1, sp
 8000822:	6820      	ldr	r0, [r4, #0]
 8000824:	f005 f8b8 	bl	8005998 <ai_network_init>
 8000828:	2800      	cmp	r0, #0
 800082a:	d1eb      	bne.n	8000804 <pa3_ai_network_init+0x18>
    	ai_error err = ai_network_get_error(network);
 800082c:	6820      	ldr	r0, [r4, #0]
 800082e:	f005 f8a3 	bl	8005978 <ai_network_get_error>
    	printf("Network initialization error. Type: %d, Code: %d\n", err.type, err.code);
 8000832:	0a02      	lsrs	r2, r0, #8
 8000834:	b2c1      	uxtb	r1, r0
 8000836:	4804      	ldr	r0, [pc, #16]	@ (8000848 <pa3_ai_network_init+0x5c>)
 8000838:	f007 fcec 	bl	8008214 <iprintf>
 800083c:	e7e0      	b.n	8000800 <pa3_ai_network_init+0x14>
 800083e:	bf00      	nop
 8000840:	24000cb0 	.word	0x24000cb0
 8000844:	2400001c 	.word	0x2400001c
 8000848:	0800a0a0 	.word	0x0800a0a0

0800084c <pa3_ai_network_inference>:
{
 800084c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ai_shape_dimension input_shape_data[] = { 1, 28, 28, 1 };
 8000850:	4c23      	ldr	r4, [pc, #140]	@ (80008e0 <pa3_ai_network_inference+0x94>)
{
 8000852:	b096      	sub	sp, #88	@ 0x58
 8000854:	4607      	mov	r7, r0
 8000856:	460e      	mov	r6, r1
	ai_shape_dimension input_shape_data[] = { 1, 28, 28, 1 };
 8000858:	466d      	mov	r5, sp
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = {
 800085a:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 80008ec <pa3_ai_network_inference+0xa0>
	ai_shape_dimension input_shape_data[] = { 1, 28, 28, 1 };
 800085e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000862:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = {
 8000866:	220d      	movs	r2, #13
 8000868:	2100      	movs	r1, #0
 800086a:	a80a      	add	r0, sp, #40	@ 0x28
	ai_shape_dimension output_shape_data[] = { 1, AI_NETWORK_OUT_1_SIZE, 1, 1};
 800086c:	3410      	adds	r4, #16
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = {
 800086e:	f007 fce3 	bl	8008238 <memset>
 8000872:	f44f 7344 	mov.w	r3, #784	@ 0x310
 8000876:	e9cd 8708 	strd	r8, r7, [sp, #32]
 800087a:	930c      	str	r3, [sp, #48]	@ 0x30
 800087c:	2704      	movs	r7, #4
 800087e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8000880:	f367 231f 	bfi	r3, r7, #8, #24
 8000884:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
	ai_shape_dimension output_shape_data[] = { 1, AI_NETWORK_OUT_1_SIZE, 1, 1};
 8000888:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800088c:	ad04      	add	r5, sp, #16
    ai_i32 nbatch = ai_network_run(network, ai_input, ai_output);
 800088e:	4c15      	ldr	r4, [pc, #84]	@ (80008e4 <pa3_ai_network_inference+0x98>)
	ai_shape_dimension output_shape_data[] = { 1, AI_NETWORK_OUT_1_SIZE, 1, 1};
 8000890:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	ai_buffer ai_output[AI_NETWORK_OUT_NUM] = {
 8000894:	220d      	movs	r2, #13
 8000896:	2100      	movs	r1, #0
 8000898:	a811      	add	r0, sp, #68	@ 0x44
 800089a:	f007 fccd 	bl	8008238 <memset>
 800089e:	230a      	movs	r3, #10
    ai_i32 nbatch = ai_network_run(network, ai_input, ai_output);
 80008a0:	aa0f      	add	r2, sp, #60	@ 0x3c
 80008a2:	a908      	add	r1, sp, #32
	ai_buffer ai_output[AI_NETWORK_OUT_NUM] = {
 80008a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80008a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80008a8:	f367 231f 	bfi	r3, r7, #8, #24
 80008ac:	e9cd 3514 	strd	r3, r5, [sp, #80]	@ 0x50
    ai_i32 nbatch = ai_network_run(network, ai_input, ai_output);
 80008b0:	6820      	ldr	r0, [r4, #0]
	ai_buffer ai_output[AI_NETWORK_OUT_NUM] = {
 80008b2:	e9cd 860f 	strd	r8, r6, [sp, #60]	@ 0x3c
    ai_i32 nbatch = ai_network_run(network, ai_input, ai_output);
 80008b6:	f005 f909 	bl	8005acc <ai_network_run>
    if (nbatch != 1) {
 80008ba:	2801      	cmp	r0, #1
 80008bc:	d00d      	beq.n	80008da <pa3_ai_network_inference+0x8e>
    	ai_error err = ai_network_get_error(network);
 80008be:	6820      	ldr	r0, [r4, #0]
 80008c0:	f005 f85a 	bl	8005978 <ai_network_get_error>
    	printf("Inference failed. Error type: %d, Error code: %d\n", err.type, err.code);
 80008c4:	0a02      	lsrs	r2, r0, #8
 80008c6:	b2c1      	uxtb	r1, r0
 80008c8:	4807      	ldr	r0, [pc, #28]	@ (80008e8 <pa3_ai_network_inference+0x9c>)
 80008ca:	f007 fca3 	bl	8008214 <iprintf>
    	__NOP();
 80008ce:	bf00      	nop
        return -1;
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80008d4:	b016      	add	sp, #88	@ 0x58
 80008d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 0;  // Inference successful
 80008da:	2000      	movs	r0, #0
 80008dc:	e7fa      	b.n	80008d4 <pa3_ai_network_inference+0x88>
 80008de:	bf00      	nop
 80008e0:	0800a070 	.word	0x0800a070
 80008e4:	24000cb0 	.word	0x24000cb0
 80008e8:	0800a0d2 	.word	0x0800a0d2
 80008ec:	00840440 	.word	0x00840440

080008f0 <UART_SendString>:
void UART_SendString(UART_HandleTypeDef* huart, const char *str) {
 80008f0:	b570      	push	{r4, r5, r6, lr}
 80008f2:	4605      	mov	r5, r0
 80008f4:	460c      	mov	r4, r1
    size_t len = strlen(str);
 80008f6:	4608      	mov	r0, r1
 80008f8:	f7ff fd42 	bl	8000380 <strlen>
    HAL_UART_Transmit(huart, (uint8_t *)str, len, HAL_MAX_DELAY);
 80008fc:	4621      	mov	r1, r4
 80008fe:	b282      	uxth	r2, r0
 8000900:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000904:	4628      	mov	r0, r5
}
 8000906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit(huart, (uint8_t *)str, len, HAL_MAX_DELAY);
 800090a:	f004 bdb6 	b.w	800547a <HAL_UART_Transmit>
	...

08000910 <main>:
{
 8000910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000914:	b095      	sub	sp, #84	@ 0x54
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000916:	2210      	movs	r2, #16
 8000918:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800091a:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800091c:	a80d      	add	r0, sp, #52	@ 0x34
 800091e:	f007 fc8b 	bl	8008238 <memset>
  HAL_MPU_Disable();
 8000922:	f002 f81f 	bl	8002964 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000926:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 800092a:	4bd2      	ldr	r3, [pc, #840]	@ (8000c74 <main+0x364>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800092c:	a80d      	add	r0, sp, #52	@ 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800092e:	f8ad 4034 	strh.w	r4, [sp, #52]	@ 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000932:	e9cd 130e 	strd	r1, r3, [sp, #56]	@ 0x38
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000936:	4bd0      	ldr	r3, [pc, #832]	@ (8000c78 <main+0x368>)
 8000938:	9310      	str	r3, [sp, #64]	@ 0x40
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800093a:	f002 f831 	bl	80029a0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0xD0000000;
 800093e:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000942:	a80d      	add	r0, sp, #52	@ 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000944:	f88d 4035 	strb.w	r4, [sp, #53]	@ 0x35
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000948:	930e      	str	r3, [sp, #56]	@ 0x38
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 800094a:	2316      	movs	r3, #22
 800094c:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000950:	f002 f826 	bl	80029a0 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000954:	2004      	movs	r0, #4
 8000956:	f002 f813 	bl	8002980 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800095a:	4bc8      	ldr	r3, [pc, #800]	@ (8000c7c <main+0x36c>)
 800095c:	695a      	ldr	r2, [r3, #20]
 800095e:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8000962:	d111      	bne.n	8000988 <main+0x78>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000964:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000968:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800096c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000970:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000974:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000978:	695a      	ldr	r2, [r3, #20]
 800097a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800097e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000980:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000984:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000988:	4abc      	ldr	r2, [pc, #752]	@ (8000c7c <main+0x36c>)
 800098a:	6953      	ldr	r3, [r2, #20]
 800098c:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000990:	d123      	bne.n	80009da <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000992:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000996:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800099a:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800099e:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009a2:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009a6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80009aa:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009ac:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009b0:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009b2:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80009b6:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009b8:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80009bc:	d2f9      	bcs.n	80009b2 <main+0xa2>
    } while(sets-- != 0U);
 80009be:	3b20      	subs	r3, #32
 80009c0:	f113 0f20 	cmn.w	r3, #32
 80009c4:	d1f2      	bne.n	80009ac <main+0x9c>
 80009c6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009ca:	6953      	ldr	r3, [r2, #20]
 80009cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009d0:	6153      	str	r3, [r2, #20]
 80009d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009d6:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80009da:	f001 fb75 	bl	80020c8 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2400      	movs	r4, #0
  SystemClock_Config();
 80009e0:	f7ff fe4e 	bl	8000680 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	2214      	movs	r2, #20
 80009e6:	2100      	movs	r1, #0
 80009e8:	a80d      	add	r0, sp, #52	@ 0x34
 80009ea:	f007 fc25 	bl	8008238 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009ee:	4ba4      	ldr	r3, [pc, #656]	@ (8000c80 <main+0x370>)
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f4:	48a3      	ldr	r0, [pc, #652]	@ (8000c84 <main+0x374>)
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2502      	movs	r5, #2
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80009fc:	f04f 0b0a 	mov.w	fp, #10
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000a00:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000a06:	270c      	movs	r7, #12
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a08:	f04f 0a0b 	mov.w	sl, #11
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a0c:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a10:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a14:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a1c:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000a20:	9202      	str	r2, [sp, #8]
 8000a22:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a28:	f042 0202 	orr.w	r2, r2, #2
 8000a2c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000a30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a34:	f002 0202 	and.w	r2, r2, #2
 8000a38:	9203      	str	r2, [sp, #12]
 8000a3a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a44:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000a48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a4c:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8000a50:	9204      	str	r2, [sp, #16]
 8000a52:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a5c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000a60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a64:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000a68:	9205      	str	r2, [sp, #20]
 8000a6a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a70:	f042 0204 	orr.w	r2, r2, #4
 8000a74:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000a78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a7c:	f002 0204 	and.w	r2, r2, #4
 8000a80:	9206      	str	r2, [sp, #24]
 8000a82:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a88:	f042 0210 	orr.w	r2, r2, #16
 8000a8c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000a90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a94:	f002 0210 	and.w	r2, r2, #16
 8000a98:	9207      	str	r2, [sp, #28]
 8000a9a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000aa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000aa4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000aa8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000aac:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000ab0:	9208      	str	r2, [sp, #32]
 8000ab2:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ab8:	f042 0208 	orr.w	r2, r2, #8
 8000abc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ac0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ac4:	f002 0208 	and.w	r2, r2, #8
 8000ac8:	9209      	str	r2, [sp, #36]	@ 0x24
 8000aca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000acc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ad0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ad4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ad8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000adc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000ae0:	920a      	str	r2, [sp, #40]	@ 0x28
 8000ae2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ae8:	f042 0201 	orr.w	r2, r2, #1
 8000aec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000af0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000af4:	f002 0201 	and.w	r2, r2, #1
 8000af8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8000afa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000afc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b00:	f042 0220 	orr.w	r2, r2, #32
 8000b04:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0e:	f003 0320 	and.w	r3, r3, #32
 8000b12:	930c      	str	r3, [sp, #48]	@ 0x30
 8000b14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b16:	f002 f857 	bl	8002bc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	485a      	ldr	r0, [pc, #360]	@ (8000c88 <main+0x378>)
 8000b20:	f002 f852 	bl	8002bc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b2a:	4858      	ldr	r0, [pc, #352]	@ (8000c8c <main+0x37c>)
 8000b2c:	f002 f84c 	bl	8002bc8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	23f0      	movs	r3, #240	@ 0xf0
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b32:	a90d      	add	r1, sp, #52	@ 0x34
 8000b34:	4853      	ldr	r0, [pc, #332]	@ (8000c84 <main+0x374>)
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000b36:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b42:	f001 ff59 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8000b46:	f242 0320 	movw	r3, #8224	@ 0x2020
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	a90d      	add	r1, sp, #52	@ 0x34
 8000b4c:	484f      	ldr	r0, [pc, #316]	@ (8000c8c <main+0x37c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000b52:	2309      	movs	r3, #9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000b58:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5a:	f001 ff4d 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000b5e:	23fc      	movs	r3, #252	@ 0xfc
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000b60:	a90d      	add	r1, sp, #52	@ 0x34
 8000b62:	484b      	ldr	r0, [pc, #300]	@ (8000c90 <main+0x380>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b68:	230e      	movs	r3, #14
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b6e:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000b70:	f001 ff42 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b78:	a90d      	add	r1, sp, #52	@ 0x34
 8000b7a:	4846      	ldr	r0, [pc, #280]	@ (8000c94 <main+0x384>)
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000b7c:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b88:	f001 ff36 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8000b8c:	f44f 52fe 	mov.w	r2, #8128	@ 0x1fc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b90:	a90d      	add	r1, sp, #52	@ 0x34
 8000b92:	4841      	ldr	r0, [pc, #260]	@ (8000c98 <main+0x388>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000b9a:	e9cd 6710 	strd	r6, r7, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9e:	f001 ff2b 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ba2:	230e      	movs	r3, #14
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000ba4:	f24d 2203 	movw	r2, #53763	@ 0xd203
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ba8:	a90d      	add	r1, sp, #52	@ 0x34
 8000baa:	4836      	ldr	r0, [pc, #216]	@ (8000c84 <main+0x374>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bac:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bb6:	f001 ff1f 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8000bba:	f64f 7283 	movw	r2, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bbe:	a90d      	add	r1, sp, #52	@ 0x34
 8000bc0:	4836      	ldr	r0, [pc, #216]	@ (8000c9c <main+0x38c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bc2:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bcc:	f001 ff14 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bd0:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd2:	a90d      	add	r1, sp, #52	@ 0x34
 8000bd4:	482d      	ldr	r0, [pc, #180]	@ (8000c8c <main+0x37c>)
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000bd6:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f001 ff09 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000be6:	2210      	movs	r2, #16
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	a90d      	add	r1, sp, #52	@ 0x34
 8000bea:	4828      	ldr	r0, [pc, #160]	@ (8000c8c <main+0x37c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000bf0:	2207      	movs	r2, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000bf6:	9211      	str	r2, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf8:	f001 fefe 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8000bfc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c00:	a90d      	add	r1, sp, #52	@ 0x34
 8000c02:	4824      	ldr	r0, [pc, #144]	@ (8000c94 <main+0x384>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c04:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c10:	f001 fef2 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8000c14:	f64f 72fb 	movw	r2, #65531	@ 0xfffb
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c18:	230e      	movs	r3, #14
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c1a:	a90d      	add	r1, sp, #52	@ 0x34
 8000c1c:	481a      	ldr	r0, [pc, #104]	@ (8000c88 <main+0x378>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c1e:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c28:	f001 fee6 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c2c:	2208      	movs	r2, #8
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c2e:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c30:	a90d      	add	r1, sp, #52	@ 0x34
 8000c32:	481b      	ldr	r0, [pc, #108]	@ (8000ca0 <main+0x390>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c34:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3e:	f001 fedb 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c42:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c44:	a90d      	add	r1, sp, #52	@ 0x34
 8000c46:	480f      	ldr	r0, [pc, #60]	@ (8000c84 <main+0x374>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c48:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	e9cd 850d 	strd	r8, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c52:	f001 fed1 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c5a:	a90d      	add	r1, sp, #52	@ 0x34
 8000c5c:	4811      	ldr	r0, [pc, #68]	@ (8000ca4 <main+0x394>)
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000c5e:	9611      	str	r6, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c68:	f001 fec6 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c6c:	2309      	movs	r3, #9
  GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8000c6e:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8000c72:	e019      	b.n	8000ca8 <main+0x398>
 8000c74:	0300001a 	.word	0x0300001a
 8000c78:	01010000 	.word	0x01010000
 8000c7c:	e000ed00 	.word	0xe000ed00
 8000c80:	58024400 	.word	0x58024400
 8000c84:	58022000 	.word	0x58022000
 8000c88:	58022400 	.word	0x58022400
 8000c8c:	58020400 	.word	0x58020400
 8000c90:	58022800 	.word	0x58022800
 8000c94:	58021800 	.word	0x58021800
 8000c98:	58020800 	.word	0x58020800
 8000c9c:	58021000 	.word	0x58021000
 8000ca0:	58020c00 	.word	0x58020c00
 8000ca4:	58021c00 	.word	0x58021c00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ca8:	a90d      	add	r1, sp, #52	@ 0x34
 8000caa:	48c1      	ldr	r0, [pc, #772]	@ (8000fb0 <main+0x6a0>)
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000cac:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cb6:	f001 fe9f 	bl	80029f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8000cba:	a90d      	add	r1, sp, #52	@ 0x34
 8000cbc:	48bd      	ldr	r0, [pc, #756]	@ (8000fb4 <main+0x6a4>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cbe:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	e9cd 850d 	strd	r8, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f001 fe95 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8000cce:	2280      	movs	r2, #128	@ 0x80
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	a90d      	add	r1, sp, #52	@ 0x34
 8000cd2:	48b9      	ldr	r0, [pc, #740]	@ (8000fb8 <main+0x6a8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd6:	e9cd 240d 	strd	r2, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f001 fe8d 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000cde:	2230      	movs	r2, #48	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce0:	a90d      	add	r1, sp, #52	@ 0x34
 8000ce2:	48b4      	ldr	r0, [pc, #720]	@ (8000fb4 <main+0x6a4>)
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000ce4:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cf0:	f001 fe82 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 8000cf4:	f44f 7240 	mov.w	r2, #768	@ 0x300
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf8:	a90d      	add	r1, sp, #52	@ 0x34
 8000cfa:	48b0      	ldr	r0, [pc, #704]	@ (8000fbc <main+0x6ac>)
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000cfc:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f001 fe77 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000d0a:	f248 1233 	movw	r2, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d0e:	a90d      	add	r1, sp, #52	@ 0x34
 8000d10:	48ab      	ldr	r0, [pc, #684]	@ (8000fc0 <main+0x6b0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d12:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d1c:	f001 fe6c 	bl	80029f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000d20:	a90d      	add	r1, sp, #52	@ 0x34
 8000d22:	48a5      	ldr	r0, [pc, #660]	@ (8000fb8 <main+0x6a8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000d24:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	e9cd 850d 	strd	r8, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f001 fe63 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000d32:	f24c 7203 	movw	r2, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d36:	a90d      	add	r1, sp, #52	@ 0x34
 8000d38:	489f      	ldr	r0, [pc, #636]	@ (8000fb8 <main+0x6a8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d3a:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d44:	f001 fe58 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 8000d48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	a90d      	add	r1, sp, #52	@ 0x34
 8000d4e:	489d      	ldr	r0, [pc, #628]	@ (8000fc4 <main+0x6b4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d52:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f001 fe4f 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B1_Pin;
 8000d5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	a90d      	add	r1, sp, #52	@ 0x34
 8000d60:	4899      	ldr	r0, [pc, #612]	@ (8000fc8 <main+0x6b8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d64:	e9cd 240d 	strd	r2, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f001 fe46 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	4894      	ldr	r0, [pc, #592]	@ (8000fc4 <main+0x6b4>)
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d72:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	e9cd 150d 	strd	r1, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7a:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f001 fe3a 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8000d84:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	488e      	ldr	r0, [pc, #568]	@ (8000fc4 <main+0x6b4>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d8a:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	e9cd 150d 	strd	r1, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f001 fe2e 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8000d9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8000da0:	a90d      	add	r1, sp, #52	@ 0x34
 8000da2:	488a      	ldr	r0, [pc, #552]	@ (8000fcc <main+0x6bc>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da4:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f001 fe22 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000db4:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000db8:	a90d      	add	r1, sp, #52	@ 0x34
 8000dba:	4885      	ldr	r0, [pc, #532]	@ (8000fd0 <main+0x6c0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dbc:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dc6:	f001 fe17 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dce:	a90d      	add	r1, sp, #52	@ 0x34
 8000dd0:	487e      	ldr	r0, [pc, #504]	@ (8000fcc <main+0x6bc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	e9cd 290d 	strd	r2, r9, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f001 fe0d 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dde:	f44f 1288 	mov.w	r2, #1114112	@ 0x110000
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000de2:	a90d      	add	r1, sp, #52	@ 0x34
 8000de4:	4876      	ldr	r0, [pc, #472]	@ (8000fc0 <main+0x6b0>)
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000de6:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	e9cd 240e 	strd	r2, r4, [sp, #56]	@ 0x38
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f001 fe03 	bl	80029f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000df2:	a90d      	add	r1, sp, #52	@ 0x34
 8000df4:	4877      	ldr	r0, [pc, #476]	@ (8000fd4 <main+0x6c4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df8:	e9cd 940d 	strd	r9, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f001 fdfc 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000e00:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e04:	a90d      	add	r1, sp, #52	@ 0x34
 8000e06:	4872      	ldr	r0, [pc, #456]	@ (8000fd0 <main+0x6c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e0c:	2309      	movs	r3, #9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e12:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e14:	f001 fdf0 	bl	80029f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e18:	a90d      	add	r1, sp, #52	@ 0x34
 8000e1a:	486b      	ldr	r0, [pc, #428]	@ (8000fc8 <main+0x6b8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1e:	e9cd 960d 	strd	r9, r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f001 fde9 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e26:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e2a:	a90d      	add	r1, sp, #52	@ 0x34
 8000e2c:	4868      	ldr	r0, [pc, #416]	@ (8000fd0 <main+0x6c0>)
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e2e:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e3a:	f001 fddd 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8000e3e:	213e      	movs	r1, #62	@ 0x3e
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e40:	4861      	ldr	r0, [pc, #388]	@ (8000fc8 <main+0x6b8>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e42:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	e9cd 150d 	strd	r1, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4a:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e50:	f001 fdd2 	bl	80029f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e54:	a90d      	add	r1, sp, #52	@ 0x34
 8000e56:	4856      	ldr	r0, [pc, #344]	@ (8000fb0 <main+0x6a0>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e58:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	e9cd 750d 	strd	r7, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e64:	f001 fdc8 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8000e68:	2186      	movs	r1, #134	@ 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	4856      	ldr	r0, [pc, #344]	@ (8000fc4 <main+0x6b4>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e6c:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	e9cd 150d 	strd	r1, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f001 fdbd 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e7e:	21e0      	movs	r1, #224	@ 0xe0
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e80:	484b      	ldr	r0, [pc, #300]	@ (8000fb0 <main+0x6a0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e82:	9711      	str	r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e84:	f44f 6700 	mov.w	r7, #2048	@ 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	e9cd 150d 	strd	r1, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e8c:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e92:	f001 fdb1 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e96:	f44f 1288 	mov.w	r2, #1114112	@ 0x110000
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	a90d      	add	r1, sp, #52	@ 0x34
 8000e9c:	4844      	ldr	r0, [pc, #272]	@ (8000fb0 <main+0x6a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea0:	e9cd 720d 	strd	r7, r2, [sp, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f001 fda8 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ea8:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	a90d      	add	r1, sp, #52	@ 0x34
 8000eac:	4845      	ldr	r0, [pc, #276]	@ (8000fc4 <main+0x6b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000eb2:	2309      	movs	r3, #9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000eb8:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f001 fd9d 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ebe:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ec2:	a90d      	add	r1, sp, #52	@ 0x34
 8000ec4:	483a      	ldr	r0, [pc, #232]	@ (8000fb0 <main+0x6a0>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eca:	230e      	movs	r3, #14
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ed0:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ed2:	f001 fd91 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ed6:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed8:	a90d      	add	r1, sp, #52	@ 0x34
 8000eda:	4837      	ldr	r0, [pc, #220]	@ (8000fb8 <main+0x6a8>)
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000edc:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	e9cd 750d 	strd	r7, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee6:	f001 fd87 	bl	80029f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eea:	a90d      	add	r1, sp, #52	@ 0x34
 8000eec:	4833      	ldr	r0, [pc, #204]	@ (8000fbc <main+0x6ac>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eee:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	e9cd 650d 	strd	r6, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efa:	f001 fd7d 	bl	80029f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000efe:	a90d      	add	r1, sp, #52	@ 0x34
 8000f00:	4835      	ldr	r0, [pc, #212]	@ (8000fd8 <main+0x6c8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	e9cd 890d 	strd	r8, r9, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f001 fd75 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000f12:	a90d      	add	r1, sp, #52	@ 0x34
 8000f14:	4829      	ldr	r0, [pc, #164]	@ (8000fbc <main+0x6ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	e9cd 390d 	strd	r3, r9, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f001 fd6b 	bl	80029f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	a90d      	add	r1, sp, #52	@ 0x34
 8000f28:	4824      	ldr	r0, [pc, #144]	@ (8000fbc <main+0x6ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f2e:	2305      	movs	r3, #5
  hadc3.Instance = ADC3;
 8000f30:	4d2a      	ldr	r5, [pc, #168]	@ (8000fdc <main+0x6cc>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f32:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f001 fd5e 	bl	80029f8 <HAL_GPIO_Init>
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000f3c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8000f40:	4608      	mov	r0, r1
 8000f42:	f001 f919 	bl	8002178 <HAL_SYSCFG_AnalogSwitchConfig>
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8000f46:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	f001 f914 	bl	8002178 <HAL_SYSCFG_AnalogSwitchConfig>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f50:	221c      	movs	r2, #28
 8000f52:	4621      	mov	r1, r4
 8000f54:	a80d      	add	r0, sp, #52	@ 0x34
 8000f56:	f007 f96f 	bl	8008238 <memset>
  hadc3.Instance = ADC3;
 8000f5a:	4b21      	ldr	r3, [pc, #132]	@ (8000fe0 <main+0x6d0>)
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f5c:	4628      	mov	r0, r5
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f5e:	f8c5 8010 	str.w	r8, [r5, #16]
  hadc3.Instance = ADC3;
 8000f62:	602b      	str	r3, [r5, #0]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000f64:	82ac      	strh	r4, [r5, #20]
  hadc3.Init.NbrOfConversion = 1;
 8000f66:	f8c5 9018 	str.w	r9, [r5, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f6a:	772c      	strb	r4, [r5, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f6c:	636c      	str	r4, [r5, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000f6e:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f72:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f76:	e9c5 4409 	strd	r4, r4, [r5, #36]	@ 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f7a:	e9c5 440b 	strd	r4, r4, [r5, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f7e:	f001 fb7f 	bl	8002680 <HAL_ADC_Init>
 8000f82:	b108      	cbz	r0, 8000f88 <main+0x678>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f84:	b672      	cpsid	i
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <main+0x676>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f88:	4a16      	ldr	r2, [pc, #88]	@ (8000fe4 <main+0x6d4>)
 8000f8a:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f8c:	900f      	str	r0, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f8e:	a90d      	add	r1, sp, #52	@ 0x34
  sConfig.Offset = 0;
 8000f90:	9012      	str	r0, [sp, #72]	@ 0x48
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f92:	f88d 004d 	strb.w	r0, [sp, #77]	@ 0x4d
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f96:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f98:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <main+0x6d8>)
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f9e:	e9cd 3810 	strd	r3, r8, [sp, #64]	@ 0x40
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fa2:	f001 f90b 	bl	80021bc <HAL_ADC_ConfigChannel>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	b300      	cbz	r0, 8000fec <main+0x6dc>
 8000faa:	b672      	cpsid	i
  while (1)
 8000fac:	e7fe      	b.n	8000fac <main+0x69c>
 8000fae:	bf00      	nop
 8000fb0:	58021c00 	.word	0x58021c00
 8000fb4:	58021000 	.word	0x58021000
 8000fb8:	58020c00 	.word	0x58020c00
 8000fbc:	58020400 	.word	0x58020400
 8000fc0:	58021800 	.word	0x58021800
 8000fc4:	58020000 	.word	0x58020000
 8000fc8:	58020800 	.word	0x58020800
 8000fcc:	58022000 	.word	0x58022000
 8000fd0:	58021400 	.word	0x58021400
 8000fd4:	58022800 	.word	0x58022800
 8000fd8:	58022400 	.word	0x58022400
 8000fdc:	24000d48 	.word	0x24000d48
 8000fe0:	58026000 	.word	0x58026000
 8000fe4:	04300002 	.word	0x04300002
 8000fe8:	47ff0000 	.word	0x47ff0000
  MX_USART3_UART_Init();
 8000fec:	f7ff fbcc 	bl	8000788 <MX_USART3_UART_Init>
    qspiInit.InterfaceMode=MT25TL01G_QPI_MODE;
 8000ff0:	f240 1303 	movw	r3, #259	@ 0x103
    BSP_QSPI_Init(0,&qspiInit);
 8000ff4:	a90d      	add	r1, sp, #52	@ 0x34
 8000ff6:	4620      	mov	r0, r4
    qspiInit.InterfaceMode=MT25TL01G_QPI_MODE;
 8000ff8:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
    qspiInit.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000ffc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8001000:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
    BSP_QSPI_Init(0,&qspiInit);
 8001004:	f000 fd66 	bl	8001ad4 <BSP_QSPI_Init>
    BSP_QSPI_EnableMemoryMappedMode(0);
 8001008:	4620      	mov	r0, r4
 800100a:	f000 fd0f 	bl	8001a2c <BSP_QSPI_EnableMemoryMappedMode>
    BSP_SDRAM_Init(0);
 800100e:	4620      	mov	r0, r4
 8001010:	f000 ff48 	bl	8001ea4 <BSP_SDRAM_Init>
    HAL_Delay(4000);
 8001014:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001018:	f001 f896 	bl	8002148 <HAL_Delay>
      UART_SendString(&huart3, "Initializing network...\n");
 800101c:	495b      	ldr	r1, [pc, #364]	@ (800118c <main+0x87c>)
 800101e:	485c      	ldr	r0, [pc, #368]	@ (8001190 <main+0x880>)
 8001020:	f7ff fc66 	bl	80008f0 <UART_SendString>
      HAL_Delay(300);
 8001024:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001028:	f001 f88e 	bl	8002148 <HAL_Delay>
  	if (!pa3_ai_network_init()) {
 800102c:	f7ff fbde 	bl	80007ec <pa3_ai_network_init>
 8001030:	b948      	cbnz	r0, 8001046 <main+0x736>
  	 UART_SendString(&huart3, "   Error initializing network.\n");
 8001032:	4958      	ldr	r1, [pc, #352]	@ (8001194 <main+0x884>)
 8001034:	4856      	ldr	r0, [pc, #344]	@ (8001190 <main+0x880>)
 8001036:	f7ff fc5b 	bl	80008f0 <UART_SendString>
  	  __NOP();
 800103a:	bf00      	nop
}
 800103c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001040:	b015      	add	sp, #84	@ 0x54
 8001042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  	UART_SendString(&huart3, "Network initialized.\n");
 8001046:	4954      	ldr	r1, [pc, #336]	@ (8001198 <main+0x888>)
 8001048:	4851      	ldr	r0, [pc, #324]	@ (8001190 <main+0x880>)
  	ai_network_get_info(network, &report);
 800104a:	4d54      	ldr	r5, [pc, #336]	@ (800119c <main+0x88c>)
  	UART_SendString(&huart3, "Network initialized.\n");
 800104c:	f7ff fc50 	bl	80008f0 <UART_SendString>
  	ai_network_get_info(network, &report);
 8001050:	4b53      	ldr	r3, [pc, #332]	@ (80011a0 <main+0x890>)
 8001052:	4629      	mov	r1, r5
  		  network_input[j] = (ai_i8)(mnist_test[i][j]);
 8001054:	f8df 8190 	ldr.w	r8, [pc, #400]	@ 80011e8 <main+0x8d8>
  	ai_network_get_info(network, &report);
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	f004 fc3f 	bl	80058dc <ai_network_get_info>
  	sprintf(buffer, "   Network name: %s \n", report.model_name);
 800105e:	682a      	ldr	r2, [r5, #0]
 8001060:	4950      	ldr	r1, [pc, #320]	@ (80011a4 <main+0x894>)
 8001062:	4851      	ldr	r0, [pc, #324]	@ (80011a8 <main+0x898>)
 8001064:	f006 ffc6 	bl	8007ff4 <siprintf>
      UART_SendString(&huart3, buffer);
 8001068:	494f      	ldr	r1, [pc, #316]	@ (80011a8 <main+0x898>)
 800106a:	4849      	ldr	r0, [pc, #292]	@ (8001190 <main+0x880>)
 800106c:	f7ff fc40 	bl	80008f0 <UART_SendString>
      sprintf(buffer, "   Network runtime version: %d.%d.%d \n", report.runtime_version.major, report.runtime_version.minor, report.runtime_version.micro);
 8001070:	7dab      	ldrb	r3, [r5, #22]
 8001072:	494e      	ldr	r1, [pc, #312]	@ (80011ac <main+0x89c>)
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	484c      	ldr	r0, [pc, #304]	@ (80011a8 <main+0x898>)
 8001078:	7d6b      	ldrb	r3, [r5, #21]
 800107a:	7d2a      	ldrb	r2, [r5, #20]
 800107c:	f006 ffba 	bl	8007ff4 <siprintf>
      UART_SendString(&huart3, buffer);
 8001080:	4d4b      	ldr	r5, [pc, #300]	@ (80011b0 <main+0x8a0>)
 8001082:	4949      	ldr	r1, [pc, #292]	@ (80011a8 <main+0x898>)
 8001084:	4842      	ldr	r0, [pc, #264]	@ (8001190 <main+0x880>)
      UART_SendString(&huart3, buffer);
 8001086:	462f      	mov	r7, r5
      UART_SendString(&huart3, buffer);
 8001088:	f7ff fc32 	bl	80008f0 <UART_SendString>
      UART_SendString(&huart3, "\n\nRunning inference...\n");
 800108c:	4949      	ldr	r1, [pc, #292]	@ (80011b4 <main+0x8a4>)
 800108e:	4840      	ldr	r0, [pc, #256]	@ (8001190 <main+0x880>)
 8001090:	f7ff fc2e 	bl	80008f0 <UART_SendString>
  	  sprintf(buffer, "   Data %d: Recognized character: %d Label: %d", i, digit, mnist_test_labels[i]);
 8001094:	4e48      	ldr	r6, [pc, #288]	@ (80011b8 <main+0x8a8>)
      sprintf(buffer, "   MNIST test dataset size: %d \n", MNIST_TEST_SUBSET_SIZE);
 8001096:	2264      	movs	r2, #100	@ 0x64
 8001098:	4948      	ldr	r1, [pc, #288]	@ (80011bc <main+0x8ac>)
 800109a:	4843      	ldr	r0, [pc, #268]	@ (80011a8 <main+0x898>)
 800109c:	f006 ffaa 	bl	8007ff4 <siprintf>
      UART_SendString(&huart3, buffer);
 80010a0:	4941      	ldr	r1, [pc, #260]	@ (80011a8 <main+0x898>)
 80010a2:	483b      	ldr	r0, [pc, #236]	@ (8001190 <main+0x880>)
 80010a4:	f7ff fc24 	bl	80008f0 <UART_SendString>
  		  network_input[j] = (ai_i8)(mnist_test[i][j]);
 80010a8:	f44f 7244 	mov.w	r2, #784	@ 0x310
 80010ac:	f8d8 3000 	ldr.w	r3, [r8]
 80010b0:	4943      	ldr	r1, [pc, #268]	@ (80011c0 <main+0x8b0>)
 80010b2:	fb02 3304 	mla	r3, r2, r4, r3
 80010b6:	1e5a      	subs	r2, r3, #1
 80010b8:	f203 330f 	addw	r3, r3, #783	@ 0x30f
 80010bc:	f912 0f01 	ldrsb.w	r0, [r2, #1]!
  	  for (int j = 0; j < AI_NETWORK_IN_1_SIZE; j++) {
 80010c0:	429a      	cmp	r2, r3
  		  network_input[j] = (ai_i8)(mnist_test[i][j]);
 80010c2:	f801 0b01 	strb.w	r0, [r1], #1
  	  for (int j = 0; j < AI_NETWORK_IN_1_SIZE; j++) {
 80010c6:	d1f9      	bne.n	80010bc <main+0x7ac>
  	  if (pa3_ai_network_inference(network_input, network_output) != 0) {
 80010c8:	493e      	ldr	r1, [pc, #248]	@ (80011c4 <main+0x8b4>)
 80010ca:	483d      	ldr	r0, [pc, #244]	@ (80011c0 <main+0x8b0>)
 80010cc:	f7ff fbbe 	bl	800084c <pa3_ai_network_inference>
 80010d0:	b128      	cbz	r0, 80010de <main+0x7ce>
  		  __NOP();
 80010d2:	bf00      	nop
  		  UART_SendString(&huart3, "Error running inference.");
 80010d4:	493c      	ldr	r1, [pc, #240]	@ (80011c8 <main+0x8b8>)
 80010d6:	482e      	ldr	r0, [pc, #184]	@ (8001190 <main+0x880>)
 80010d8:	f7ff fc0a 	bl	80008f0 <UART_SendString>
  		  return -1;
 80010dc:	e7ae      	b.n	800103c <main+0x72c>
 80010de:	4a39      	ldr	r2, [pc, #228]	@ (80011c4 <main+0x8b4>)
  	  int8_t digit = 0;
 80010e0:	4681      	mov	r9, r0
  	  int8_t max = -127;
 80010e2:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
  		  if (network_output[k] >= max){
 80010e6:	f912 1b01 	ldrsb.w	r1, [r2], #1
 80010ea:	4299      	cmp	r1, r3
  			  digit = k;
 80010ec:	bfa8      	it	ge
 80010ee:	fa4f f980 	sxtbge.w	r9, r0
  	  for(int k = 0; k < AI_NETWORK_OUT_1_SIZE ; k++) {
 80010f2:	f100 0001 	add.w	r0, r0, #1
  			  digit = k;
 80010f6:	bfa8      	it	ge
 80010f8:	460b      	movge	r3, r1
  	  for(int k = 0; k < AI_NETWORK_OUT_1_SIZE ; k++) {
 80010fa:	280a      	cmp	r0, #10
 80010fc:	d1f3      	bne.n	80010e6 <main+0x7d6>
  	  sprintf(buffer, "   Data %d: Recognized character: %d Label: %d", i, digit, mnist_test_labels[i]);
 80010fe:	6833      	ldr	r3, [r6, #0]
 8001100:	4622      	mov	r2, r4
  	  recognized_digits[i] = digit;
 8001102:	f807 9b01 	strb.w	r9, [r7], #1
  	  sprintf(buffer, "   Data %d: Recognized character: %d Label: %d", i, digit, mnist_test_labels[i]);
 8001106:	5d1b      	ldrb	r3, [r3, r4]
 8001108:	4930      	ldr	r1, [pc, #192]	@ (80011cc <main+0x8bc>)
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	464b      	mov	r3, r9
 800110e:	4826      	ldr	r0, [pc, #152]	@ (80011a8 <main+0x898>)
 8001110:	f006 ff70 	bl	8007ff4 <siprintf>
  	  UART_SendString(&huart3, buffer);
 8001114:	4924      	ldr	r1, [pc, #144]	@ (80011a8 <main+0x898>)
 8001116:	481e      	ldr	r0, [pc, #120]	@ (8001190 <main+0x880>)
 8001118:	f7ff fbea 	bl	80008f0 <UART_SendString>
  	  if (digit != mnist_test_labels[i]){
 800111c:	6833      	ldr	r3, [r6, #0]
  	  else UART_SendString(&huart3, "\n");
 800111e:	481c      	ldr	r0, [pc, #112]	@ (8001190 <main+0x880>)
  	  if (digit != mnist_test_labels[i]){
 8001120:	5d1b      	ldrb	r3, [r3, r4]
  	for (int i = 0; i < MNIST_TEST_SUBSET_SIZE; i++) {
 8001122:	3401      	adds	r4, #1
  	  if (digit != mnist_test_labels[i]){
 8001124:	4599      	cmp	r9, r3
  		  UART_SendString(&huart3, " *** Error \n");
 8001126:	bf14      	ite	ne
 8001128:	4929      	ldrne	r1, [pc, #164]	@ (80011d0 <main+0x8c0>)
  	  else UART_SendString(&huart3, "\n");
 800112a:	492a      	ldreq	r1, [pc, #168]	@ (80011d4 <main+0x8c4>)
 800112c:	f7ff fbe0 	bl	80008f0 <UART_SendString>
  	  HAL_Delay(150);
 8001130:	2096      	movs	r0, #150	@ 0x96
 8001132:	f001 f809 	bl	8002148 <HAL_Delay>
  	for (int i = 0; i < MNIST_TEST_SUBSET_SIZE; i++) {
 8001136:	2c64      	cmp	r4, #100	@ 0x64
 8001138:	d1b6      	bne.n	80010a8 <main+0x798>
  	  if (recognized_digits[i] == mnist_test_labels[i]) {
 800113a:	6833      	ldr	r3, [r6, #0]
  		  success ++;
 800113c:	4826      	ldr	r0, [pc, #152]	@ (80011d8 <main+0x8c8>)
 800113e:	1e5a      	subs	r2, r3, #1
 8001140:	3363      	adds	r3, #99	@ 0x63
  	  if (recognized_digits[i] == mnist_test_labels[i]) {
 8001142:	f815 1b01 	ldrb.w	r1, [r5], #1
 8001146:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800114a:	428c      	cmp	r4, r1
  		  success ++;
 800114c:	bf02      	ittt	eq
 800114e:	6801      	ldreq	r1, [r0, #0]
 8001150:	3101      	addeq	r1, #1
 8001152:	6001      	streq	r1, [r0, #0]
  	for(int i = 0; i < MNIST_TEST_SUBSET_SIZE; i++) {
 8001154:	4293      	cmp	r3, r2
 8001156:	d1f4      	bne.n	8001142 <main+0x832>
  	accuracy = (float)success / (float)MNIST_TEST_SUBSET_SIZE;
 8001158:	4b1f      	ldr	r3, [pc, #124]	@ (80011d8 <main+0x8c8>)
 800115a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80011dc <main+0x8cc>
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <main+0x8d0>)
 8001164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  	sprintf(buffer, "\n\nNetwork accuracy: %f", accuracy);
 8001168:	491e      	ldr	r1, [pc, #120]	@ (80011e4 <main+0x8d4>)
 800116a:	480f      	ldr	r0, [pc, #60]	@ (80011a8 <main+0x898>)
  	accuracy = (float)success / (float)MNIST_TEST_SUBSET_SIZE;
 800116c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001170:	ed83 7a00 	vstr	s14, [r3]
  	sprintf(buffer, "\n\nNetwork accuracy: %f", accuracy);
 8001174:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001178:	ec53 2b17 	vmov	r2, r3, d7
 800117c:	f006 ff3a 	bl	8007ff4 <siprintf>
  	UART_SendString(&huart3, buffer);
 8001180:	4909      	ldr	r1, [pc, #36]	@ (80011a8 <main+0x898>)
 8001182:	4803      	ldr	r0, [pc, #12]	@ (8001190 <main+0x880>)
 8001184:	f7ff fbb4 	bl	80008f0 <UART_SendString>
  while (1)
 8001188:	e7fe      	b.n	8001188 <main+0x878>
 800118a:	bf00      	nop
 800118c:	0800a104 	.word	0x0800a104
 8001190:	24000cb4 	.word	0x24000cb4
 8001194:	0800a11d 	.word	0x0800a11d
 8001198:	0800a13d 	.word	0x0800a13d
 800119c:	24000c28 	.word	0x24000c28
 80011a0:	24000cb0 	.word	0x24000cb0
 80011a4:	0800a153 	.word	0x0800a153
 80011a8:	2400083c 	.word	0x2400083c
 80011ac:	0800a169 	.word	0x0800a169
 80011b0:	240008a8 	.word	0x240008a8
 80011b4:	0800a190 	.word	0x0800a190
 80011b8:	24000000 	.word	0x24000000
 80011bc:	0800a1a8 	.word	0x0800a1a8
 80011c0:	2400090c 	.word	0x2400090c
 80011c4:	24000c1c 	.word	0x24000c1c
 80011c8:	0800a1c9 	.word	0x0800a1c9
 80011cc:	0800a1e2 	.word	0x0800a1e2
 80011d0:	0800a211 	.word	0x0800a211
 80011d4:	0800a1c7 	.word	0x0800a1c7
 80011d8:	240008a4 	.word	0x240008a4
 80011dc:	42c80000 	.word	0x42c80000
 80011e0:	240008a0 	.word	0x240008a0
 80011e4:	0800a21e 	.word	0x0800a21e
 80011e8:	24000004 	.word	0x24000004

080011ec <Error_Handler>:
 80011ec:	b672      	cpsid	i
  while (1)
 80011ee:	e7fe      	b.n	80011ee <Error_Handler+0x2>

080011f0 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f0:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <HAL_MspInit+0x20>)
{
 80011f2:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80011f8:	f042 0202 	orr.w	r2, r2, #2
 80011fc:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8001200:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120c:	b002      	add	sp, #8
 800120e:	4770      	bx	lr
 8001210:	58024400 	.word	0x58024400

08001214 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001214:	b530      	push	{r4, r5, lr}
 8001216:	b0b9      	sub	sp, #228	@ 0xe4
 8001218:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	2214      	movs	r2, #20
 800121c:	2100      	movs	r1, #0
 800121e:	a803      	add	r0, sp, #12
 8001220:	f007 f80a 	bl	8008238 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	22c0      	movs	r2, #192	@ 0xc0
 8001226:	2100      	movs	r1, #0
 8001228:	a808      	add	r0, sp, #32
 800122a:	f007 f805 	bl	8008238 <memset>
  if(hadc->Instance==ADC3)
 800122e:	6822      	ldr	r2, [r4, #0]
 8001230:	4b31      	ldr	r3, [pc, #196]	@ (80012f8 <HAL_ADC_MspInit+0xe4>)
 8001232:	429a      	cmp	r2, r3
 8001234:	d15d      	bne.n	80012f2 <HAL_ADC_MspInit+0xde>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001236:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800123a:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3N = 32;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 2;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800123c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001240:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001242:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.PLL3.PLL3N = 32;
 8001246:	2320      	movs	r3, #32
 8001248:	2205      	movs	r2, #5
 800124a:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800124e:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001250:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001254:	9316      	str	r3, [sp, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001256:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800125a:	e9cd 1317 	strd	r1, r3, [sp, #92]	@ 0x5c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800125e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001262:	9331      	str	r3, [sp, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001264:	f002 fdd4 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8001268:	b108      	cbz	r0, 800126e <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 800126a:	f7ff ffbf 	bl	80011ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800126e:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <HAL_ADC_MspInit+0xe8>)
    PC2_C     ------> ADC3_INP0
    PC2_C     ------> ADC3_INN1
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001270:	2503      	movs	r5, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001274:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001276:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800127a:	4821      	ldr	r0, [pc, #132]	@ (8001300 <HAL_ADC_MspInit+0xec>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 800127c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001280:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001284:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001288:	f002 7280 	and.w	r2, r2, #16777216	@ 0x1000000
 800128c:	9200      	str	r2, [sp, #0]
 800128e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001290:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001294:	f042 0220 	orr.w	r2, r2, #32
 8001298:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800129c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012a0:	f002 0220 	and.w	r2, r2, #32
 80012a4:	9201      	str	r2, [sp, #4]
 80012a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012ac:	f042 0204 	orr.w	r2, r2, #4
 80012b0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	9302      	str	r3, [sp, #8]
 80012c0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012c6:	e9cd 3503 	strd	r3, r5, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ca:	f001 fb95 	bl	80029f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012ce:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d0:	a903      	add	r1, sp, #12
 80012d2:	480c      	ldr	r0, [pc, #48]	@ (8001304 <HAL_ADC_MspInit+0xf0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d6:	e9cd 3503 	strd	r3, r5, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012da:	f001 fb8d 	bl	80029f8 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80012de:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80012e2:	4608      	mov	r0, r1
 80012e4:	f000 ff48 	bl	8002178 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80012e8:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80012ec:	4608      	mov	r0, r1
 80012ee:	f000 ff43 	bl	8002178 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80012f2:	b039      	add	sp, #228	@ 0xe4
 80012f4:	bd30      	pop	{r4, r5, pc}
 80012f6:	bf00      	nop
 80012f8:	58026000 	.word	0x58026000
 80012fc:	58024400 	.word	0x58024400
 8001300:	58021400 	.word	0x58021400
 8001304:	58020800 	.word	0x58020800

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b570      	push	{r4, r5, r6, lr}
 800130a:	b0b8      	sub	sp, #224	@ 0xe0
 800130c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	2214      	movs	r2, #20
 8001310:	2100      	movs	r1, #0
 8001312:	a803      	add	r0, sp, #12
 8001314:	f006 ff90 	bl	8008238 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001318:	22c0      	movs	r2, #192	@ 0xc0
 800131a:	2100      	movs	r1, #0
 800131c:	a808      	add	r0, sp, #32
 800131e:	f006 ff8b 	bl	8008238 <memset>
  if(huart->Instance==USART3)
 8001322:	6822      	ldr	r2, [r4, #0]
 8001324:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <HAL_UART_MspInit+0xa0>)
 8001326:	429a      	cmp	r2, r3
 8001328:	d13c      	bne.n	80013a4 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800132a:	2202      	movs	r2, #2
 800132c:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800132e:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001330:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001334:	f002 fd6c 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8001338:	b108      	cbz	r0, 800133e <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 800133a:	f7ff ff57 	bl	80011ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800133e:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <HAL_UART_MspInit+0xa4>)
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001344:	2507      	movs	r5, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8001346:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800134a:	a903      	add	r1, sp, #12
 800134c:	4818      	ldr	r0, [pc, #96]	@ (80013b0 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800134e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001352:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001356:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800135a:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800135e:	9201      	str	r2, [sp, #4]
 8001360:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001366:	f042 0202 	orr.w	r2, r2, #2
 800136a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001372:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001388:	f001 fb36 	bl	80029f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800138c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001390:	a903      	add	r1, sp, #12
 8001392:	4807      	ldr	r0, [pc, #28]	@ (80013b0 <HAL_UART_MspInit+0xa8>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001394:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139a:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	e9cd 3405 	strd	r3, r4, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f001 fb2a 	bl	80029f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013a4:	b038      	add	sp, #224	@ 0xe0
 80013a6:	bd70      	pop	{r4, r5, r6, pc}
 80013a8:	40004800 	.word	0x40004800
 80013ac:	58024400 	.word	0x58024400
 80013b0:	58020400 	.word	0x58020400

080013b4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b4:	e7fe      	b.n	80013b4 <NMI_Handler>

080013b6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <HardFault_Handler>

080013b8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler>

080013ba <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler>

080013bc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler>

080013be <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013be:	4770      	bx	lr

080013c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80013c0:	4770      	bx	lr

080013c2 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80013c2:	4770      	bx	lr

080013c4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c4:	f000 beae 	b.w	8002124 <HAL_IncTick>

080013c8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80013c8:	2001      	movs	r0, #1
 80013ca:	4770      	bx	lr

080013cc <_kill>:

int _kill(int pid, int sig)
{
 80013cc:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ce:	f006 ff4f 	bl	8008270 <__errno>
 80013d2:	2316      	movs	r3, #22
 80013d4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80013d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013da:	bd08      	pop	{r3, pc}

080013dc <_exit>:

void _exit (int status)
{
 80013dc:	b508      	push	{r3, lr}
  errno = EINVAL;
 80013de:	f006 ff47 	bl	8008270 <__errno>
 80013e2:	2316      	movs	r3, #22
 80013e4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80013e6:	e7fe      	b.n	80013e6 <_exit+0xa>

080013e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e8:	b570      	push	{r4, r5, r6, lr}
 80013ea:	460d      	mov	r5, r1
 80013ec:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	460e      	mov	r6, r1
 80013f0:	1b73      	subs	r3, r6, r5
 80013f2:	429c      	cmp	r4, r3
 80013f4:	dc01      	bgt.n	80013fa <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80013f6:	4620      	mov	r0, r4
 80013f8:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80013fa:	f3af 8000 	nop.w
 80013fe:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001402:	e7f5      	b.n	80013f0 <_read+0x8>

08001404 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001408:	4770      	bx	lr

0800140a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800140a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 800140e:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001410:	604b      	str	r3, [r1, #4]
}
 8001412:	4770      	bx	lr

08001414 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001414:	2001      	movs	r0, #1
 8001416:	4770      	bx	lr

08001418 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001418:	2000      	movs	r0, #0
 800141a:	4770      	bx	lr

0800141c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800141c:	4a0b      	ldr	r2, [pc, #44]	@ (800144c <_sbrk+0x30>)
{
 800141e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001420:	6811      	ldr	r1, [r2, #0]
{
 8001422:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001424:	b909      	cbnz	r1, 800142a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001426:	490a      	ldr	r1, [pc, #40]	@ (8001450 <_sbrk+0x34>)
 8001428:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142a:	6810      	ldr	r0, [r2, #0]
 800142c:	4909      	ldr	r1, [pc, #36]	@ (8001454 <_sbrk+0x38>)
 800142e:	4c0a      	ldr	r4, [pc, #40]	@ (8001458 <_sbrk+0x3c>)
 8001430:	4403      	add	r3, r0
 8001432:	1b09      	subs	r1, r1, r4
 8001434:	428b      	cmp	r3, r1
 8001436:	d906      	bls.n	8001446 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001438:	f006 ff1a 	bl	8008270 <__errno>
 800143c:	230c      	movs	r3, #12
 800143e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001440:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001444:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001446:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001448:	e7fc      	b.n	8001444 <_sbrk+0x28>
 800144a:	bf00      	nop
 800144c:	24000dac 	.word	0x24000dac
 8001450:	20000eb0 	.word	0x20000eb0
 8001454:	24080000 	.word	0x24080000
 8001458:	00000800 	.word	0x00000800

0800145c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800145c:	4a25      	ldr	r2, [pc, #148]	@ (80014f4 <SystemInit+0x98>)
 800145e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001462:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001466:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800146a:	4a23      	ldr	r2, [pc, #140]	@ (80014f8 <SystemInit+0x9c>)
 800146c:	6813      	ldr	r3, [r2, #0]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	2b06      	cmp	r3, #6
 8001474:	d805      	bhi.n	8001482 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001476:	6813      	ldr	r3, [r2, #0]
 8001478:	f023 030f 	bic.w	r3, r3, #15
 800147c:	f043 0307 	orr.w	r3, r3, #7
 8001480:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001482:	4b1e      	ldr	r3, [pc, #120]	@ (80014fc <SystemInit+0xa0>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001490:	4a1b      	ldr	r2, [pc, #108]	@ (8001500 <SystemInit+0xa4>)
 8001492:	6819      	ldr	r1, [r3, #0]
 8001494:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001496:	4918      	ldr	r1, [pc, #96]	@ (80014f8 <SystemInit+0x9c>)
  RCC->CR &= 0xEAF6ED7FU;
 8001498:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800149a:	680a      	ldr	r2, [r1, #0]
 800149c:	0712      	lsls	r2, r2, #28
 800149e:	d505      	bpl.n	80014ac <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014a0:	680a      	ldr	r2, [r1, #0]
 80014a2:	f022 020f 	bic.w	r2, r2, #15
 80014a6:	f042 0207 	orr.w	r2, r2, #7
 80014aa:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014ac:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014ae:	4915      	ldr	r1, [pc, #84]	@ (8001504 <SystemInit+0xa8>)
  RCC->D1CFGR = 0x00000000;
 80014b0:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80014b2:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80014b4:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80014b6:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014b8:	4913      	ldr	r1, [pc, #76]	@ (8001508 <SystemInit+0xac>)
 80014ba:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014bc:	4913      	ldr	r1, [pc, #76]	@ (800150c <SystemInit+0xb0>)
 80014be:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014c2:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014c6:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014c8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014ca:	6819      	ldr	r1, [r3, #0]
 80014cc:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80014d0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014d2:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <SystemInit+0xb4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0c1b      	lsrs	r3, r3, #16
 80014da:	041b      	lsls	r3, r3, #16
 80014dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014e0:	d203      	bcs.n	80014ea <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <SystemInit+0xb8>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <SystemInit+0xbc>)
 80014ec:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00
 80014f8:	52002000 	.word	0x52002000
 80014fc:	58024400 	.word	0x58024400
 8001500:	eaf6ed7f 	.word	0xeaf6ed7f
 8001504:	02020200 	.word	0x02020200
 8001508:	01ff0000 	.word	0x01ff0000
 800150c:	01010280 	.word	0x01010280
 8001510:	5c001000 	.word	0x5c001000
 8001514:	51008000 	.word	0x51008000
 8001518:	52004000 	.word	0x52004000

0800151c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800151c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001554 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001520:	f7ff ff9c 	bl	800145c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001524:	480c      	ldr	r0, [pc, #48]	@ (8001558 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001526:	490d      	ldr	r1, [pc, #52]	@ (800155c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001528:	4a0d      	ldr	r2, [pc, #52]	@ (8001560 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800152c:	e002      	b.n	8001534 <LoopCopyDataInit>

0800152e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001532:	3304      	adds	r3, #4

08001534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001538:	d3f9      	bcc.n	800152e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153a:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800153c:	4c0a      	ldr	r4, [pc, #40]	@ (8001568 <LoopFillZerobss+0x22>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001540:	e001      	b.n	8001546 <LoopFillZerobss>

08001542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001544:	3204      	adds	r2, #4

08001546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001548:	d3fb      	bcc.n	8001542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800154a:	f006 fe97 	bl	800827c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154e:	f7ff f9df 	bl	8000910 <main>
  bx  lr
 8001552:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001554:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001558:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800155c:	2400081c 	.word	0x2400081c
  ldr r2, =_sidata
 8001560:	0801dda4 	.word	0x0801dda4
  ldr r2, =_sbss
 8001564:	24000820 	.word	0x24000820
  ldr r4, =_ebss
 8001568:	240010c8 	.word	0x240010c8

0800156c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC3_IRQHandler>

0800156e <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800156e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001572:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8001576:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800157a:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800157e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001582:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8001586:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800158a:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 800158c:	2000      	movs	r0, #0
 800158e:	4770      	bx	lr

08001590 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001590:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001592:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8001596:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001598:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800159c:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800159e:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80015a0:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 80015a2:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80015a4:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80015a6:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 80015a8:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015aa:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80015ac:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 80015ae:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80015b0:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 80015b2:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015b4:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015b6:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80015ba:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 80015be:	2310      	movs	r3, #16
 80015c0:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80015c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015c6:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 80015c8:	f240 1301 	movw	r3, #257	@ 0x101
 80015cc:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015d2:	f001 fde0 	bl	8003196 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 80015d6:	2800      	cmp	r0, #0

}
 80015d8:	bf14      	ite	ne
 80015da:	f06f 0004 	mvnne.w	r0, #4
 80015de:	2000      	moveq	r0, #0
 80015e0:	b015      	add	sp, #84	@ 0x54
 80015e2:	f85d fb04 	ldr.w	pc, [sp], #4

080015e6 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80015e6:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015e8:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80015ec:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80015ee:	bf08      	it	eq
 80015f0:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 80015f4:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80015f6:	bf18      	it	ne
 80015f8:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80015fc:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015fe:	a906      	add	r1, sp, #24
{
 8001600:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001602:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8001604:	2306      	movs	r3, #6
 8001606:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001608:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800160a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 800160e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8001610:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001612:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001614:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001618:	f001 fcbc 	bl	8002f94 <HAL_QSPI_Command>
 800161c:	bb20      	cbnz	r0, 8001668 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800161e:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8001622:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001624:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8001626:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800162a:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800162c:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800162e:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8001632:	f04f 0310 	mov.w	r3, #16
 8001636:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800163a:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800163e:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8001640:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001644:	bf14      	ite	ne
 8001646:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 800164a:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800164e:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001650:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001652:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001656:	f001 fd9e 	bl	8003196 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 800165a:	2800      	cmp	r0, #0
 800165c:	bf14      	ite	ne
 800165e:	f06f 0004 	mvnne.w	r0, #4
 8001662:	2000      	moveq	r0, #0
}
 8001664:	b015      	add	sp, #84	@ 0x54
 8001666:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8001668:	f06f 0001 	mvn.w	r0, #1
 800166c:	e7fa      	b.n	8001664 <MT25TL01G_WriteEnable+0x7e>

0800166e <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800166e:	2903      	cmp	r1, #3
{
 8001670:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001672:	bf08      	it	eq
 8001674:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8001678:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800167a:	bf18      	it	ne
 800167c:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8001680:	4604      	mov	r4, r0
 8001682:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001684:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8001686:	23b7      	movs	r3, #183	@ 0xb7
 8001688:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800168a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800168c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8001690:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8001692:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001694:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001696:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800169a:	f7ff ffa4 	bl	80015e6 <MT25TL01G_WriteEnable>
 800169e:	b118      	cbz	r0, 80016a8 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 80016a0:	f06f 0001 	mvn.w	r0, #1
}
 80016a4:	b00f      	add	sp, #60	@ 0x3c
 80016a6:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ac:	4669      	mov	r1, sp
 80016ae:	4620      	mov	r0, r4
 80016b0:	f001 fc70 	bl	8002f94 <HAL_QSPI_Command>
 80016b4:	2800      	cmp	r0, #0
 80016b6:	d1f3      	bne.n	80016a0 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 80016b8:	4629      	mov	r1, r5
 80016ba:	4620      	mov	r0, r4
 80016bc:	f7ff ff68 	bl	8001590 <MT25TL01G_AutoPollingMemReady>
 80016c0:	2800      	cmp	r0, #0
 80016c2:	d0ef      	beq.n	80016a4 <MT25TL01G_Enter4BytesAddressMode+0x36>
 80016c4:	e7ec      	b.n	80016a0 <MT25TL01G_Enter4BytesAddressMode+0x32>

080016c6 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80016c6:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80016c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 80016cc:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016ce:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80016d2:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 80016d4:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016d6:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 80016d8:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80016da:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80016dc:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80016e0:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80016e2:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80016e4:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80016e6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016ea:	f001 fc53 	bl	8002f94 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80016ee:	2800      	cmp	r0, #0
}
 80016f0:	bf14      	ite	ne
 80016f2:	f06f 0001 	mvnne.w	r0, #1
 80016f6:	2000      	moveq	r0, #0
 80016f8:	b00f      	add	sp, #60	@ 0x3c
 80016fa:	f85d fb04 	ldr.w	pc, [sp], #4

080016fe <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80016fe:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001700:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8001704:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001706:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800170a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800170c:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800170e:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8001710:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001712:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001714:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8001718:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800171a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800171c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800171e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001722:	f001 fc37 	bl	8002f94 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8001726:	2800      	cmp	r0, #0
}
 8001728:	bf14      	ite	ne
 800172a:	f06f 0001 	mvnne.w	r0, #1
 800172e:	2000      	moveq	r0, #0
 8001730:	b00f      	add	sp, #60	@ 0x3c
 8001732:	f85d fb04 	ldr.w	pc, [sp], #4

08001736 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001736:	b500      	push	{lr}
 8001738:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800173a:	2903      	cmp	r1, #3
 800173c:	d80e      	bhi.n	800175c <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 800173e:	e8df f001 	tbb	[pc, r1]
 8001742:	2902      	.short	0x2902
 8001744:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001746:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800174a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800174c:	230e      	movs	r3, #14
 800174e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8001750:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001754:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8001756:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800175a:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800175c:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800175e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8001762:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8001766:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8001768:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800176a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800176e:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001770:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8001772:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8001776:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001778:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800177a:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800177c:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8001780:	f001 fd5a 	bl	8003238 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8001784:	2800      	cmp	r0, #0
}
 8001786:	bf14      	ite	ne
 8001788:	f06f 0005 	mvnne.w	r0, #5
 800178c:	2000      	moveq	r0, #0
 800178e:	b011      	add	sp, #68	@ 0x44
 8001790:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001794:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001798:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800179a:	233d      	movs	r3, #61	@ 0x3d
 800179c:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800179e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017a2:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80017a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017a8:	e7d7      	b.n	800175a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80017aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017ae:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 80017b0:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80017b2:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80017b4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017b8:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80017ba:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80017be:	e7cc      	b.n	800175a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80017c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017c4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80017c6:	23ed      	movs	r3, #237	@ 0xed
 80017c8:	e7f3      	b.n	80017b2 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

080017ca <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80017ca:	b500      	push	{lr}
 80017cc:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80017ce:	2903      	cmp	r1, #3
 80017d0:	d80e      	bhi.n	80017f0 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 80017d2:	e8df f001 	tbb	[pc, r1]
 80017d6:	2502      	.short	0x2502
 80017d8:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80017da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017de:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 80017e0:	230c      	movs	r3, #12
 80017e2:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80017e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017e8:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80017ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80017ee:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80017f0:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80017f2:	466a      	mov	r2, sp
 80017f4:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80017f6:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80017f8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80017fc:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80017fe:	2300      	movs	r3, #0
 8001800:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001802:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001804:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8001808:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800180c:	f001 fd14 	bl	8003238 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8001810:	2800      	cmp	r0, #0
}
 8001812:	bf14      	ite	ne
 8001814:	f06f 0005 	mvnne.w	r0, #5
 8001818:	2000      	moveq	r0, #0
 800181a:	b011      	add	sp, #68	@ 0x44
 800181c:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001820:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001824:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8001826:	23bc      	movs	r3, #188	@ 0xbc
 8001828:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800182a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800182e:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8001830:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001834:	e7db      	b.n	80017ee <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001836:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800183a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800183c:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800183e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001840:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001844:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001846:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800184a:	e7d0      	b.n	80017ee <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800184c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001850:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8001852:	23eb      	movs	r3, #235	@ 0xeb
 8001854:	e7f3      	b.n	800183e <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08001856 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001856:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001858:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 800185c:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800185e:	bf18      	it	ne
 8001860:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8001864:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001866:	bf08      	it	eq
 8001868:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800186c:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800186e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8001870:	2366      	movs	r3, #102	@ 0x66
 8001872:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001874:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001876:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800187a:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800187c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800187e:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001880:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001884:	f001 fb86 	bl	8002f94 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8001888:	2800      	cmp	r0, #0
}
 800188a:	bf14      	ite	ne
 800188c:	f06f 0001 	mvnne.w	r0, #1
 8001890:	2000      	moveq	r0, #0
 8001892:	b00f      	add	sp, #60	@ 0x3c
 8001894:	f85d fb04 	ldr.w	pc, [sp], #4

08001898 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001898:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800189a:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 800189e:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80018a0:	bf18      	it	ne
 80018a2:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80018a6:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80018a8:	bf08      	it	eq
 80018aa:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018ae:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80018b0:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 80018b2:	2399      	movs	r3, #153	@ 0x99
 80018b4:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80018b6:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80018b8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80018bc:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80018be:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80018c0:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80018c2:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018c6:	f001 fb65 	bl	8002f94 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80018ca:	2800      	cmp	r0, #0
}
 80018cc:	bf14      	ite	ne
 80018ce:	f06f 0001 	mvnne.w	r0, #1
 80018d2:	2000      	moveq	r0, #0
 80018d4:	b00f      	add	sp, #60	@ 0x3c
 80018d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080018dc <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80018dc:	b508      	push	{r3, lr}
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 80018de:	2201      	movs	r2, #1
 80018e0:	4b07      	ldr	r3, [pc, #28]	@ (8001900 <MT48LC4M32B2_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 80018e2:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 80018e6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80018e8:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80018ea:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 80018ec:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80018ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018f2:	f003 fb2b 	bl	8004f4c <HAL_SDRAM_SendCommand>
 80018f6:	3800      	subs	r0, #0
 80018f8:	bf18      	it	ne
 80018fa:	2001      	movne	r0, #1
  }
  else
  {
    return MT48LC4M32B2_OK;
  }
}
 80018fc:	4240      	negs	r0, r0
 80018fe:	bd08      	pop	{r3, pc}
 8001900:	24000db0 	.word	0x24000db0

08001904 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8001904:	b508      	push	{r3, lr}
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 8001906:	2202      	movs	r2, #2
 8001908:	4b08      	ldr	r3, [pc, #32]	@ (800192c <MT48LC4M32B2_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 800190a:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 800190e:	2101      	movs	r1, #1
 8001910:	2200      	movs	r2, #0
 8001912:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001916:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800191a:	4619      	mov	r1, r3
 800191c:	f003 fb16 	bl	8004f4c <HAL_SDRAM_SendCommand>
 8001920:	3800      	subs	r0, #0
 8001922:	bf18      	it	ne
 8001924:	2001      	movne	r0, #1
  }
  else
  {
    return MT48LC4M32B2_OK;
  }
}
 8001926:	4240      	negs	r0, r0
 8001928:	bd08      	pop	{r3, pc}
 800192a:	bf00      	nop
 800192c:	24000db0 	.word	0x24000db0

08001930 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001930:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001932:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 8001936:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001938:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 800193a:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800193c:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 800193e:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8001940:	6991      	ldr	r1, [r2, #24]
 8001942:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001944:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 8001946:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001948:	430b      	orrs	r3, r1
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800194a:	4907      	ldr	r1, [pc, #28]	@ (8001968 <MT48LC4M32B2_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 800194c:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 800194e:	2201      	movs	r2, #1
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8001950:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8001952:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001956:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800195a:	f003 faf7 	bl	8004f4c <HAL_SDRAM_SendCommand>
 800195e:	3800      	subs	r0, #0
 8001960:	bf18      	it	ne
 8001962:	2001      	movne	r0, #1
  }
  else
  {
    return MT48LC4M32B2_OK;
  }
}
 8001964:	4240      	negs	r0, r0
 8001966:	bd10      	pop	{r4, pc}
 8001968:	24000db0 	.word	0x24000db0

0800196c <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800196c:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 800196e:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <MT48LC4M32B2_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8001970:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8001974:	2108      	movs	r1, #8
 8001976:	2200      	movs	r2, #0
 8001978:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800197c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001980:	4619      	mov	r1, r3
 8001982:	f003 fae3 	bl	8004f4c <HAL_SDRAM_SendCommand>
 8001986:	3800      	subs	r0, #0
 8001988:	bf18      	it	ne
 800198a:	2001      	movne	r0, #1
  }
  else
  {
    return MT48LC4M32B2_OK;
  }
}
 800198c:	4240      	negs	r0, r0
 800198e:	bd08      	pop	{r3, pc}
 8001990:	24000db0 	.word	0x24000db0

08001994 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8001994:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8001996:	f003 faf8 	bl	8004f8a <HAL_SDRAM_ProgramRefreshRate>
 800199a:	3800      	subs	r0, #0
 800199c:	bf18      	it	ne
 800199e:	2001      	movne	r0, #1
  }
  else
  {
    return MT48LC4M32B2_OK;
  }
}
 80019a0:	4240      	negs	r0, r0
 80019a2:	bd08      	pop	{r3, pc}

080019a4 <MT48LC4M32B2_Init>:
{
 80019a4:	b570      	push	{r4, r5, r6, lr}
 80019a6:	460c      	mov	r4, r1
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80019a8:	6809      	ldr	r1, [r1, #0]
{
 80019aa:	4605      	mov	r5, r0
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80019ac:	f7ff ff96 	bl	80018dc <MT48LC4M32B2_ClockEnable>
 80019b0:	b110      	cbz	r0, 80019b8 <MT48LC4M32B2_Init+0x14>
  int32_t ret = MT48LC4M32B2_ERROR;
 80019b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80019b6:	bd70      	pop	{r4, r5, r6, pc}
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80019b8:	f000 fbc0 	bl	800213c <HAL_GetTick>
 80019bc:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80019be:	f000 fbbd 	bl	800213c <HAL_GetTick>
 80019c2:	4286      	cmp	r6, r0
 80019c4:	d0fb      	beq.n	80019be <MT48LC4M32B2_Init+0x1a>
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80019c6:	6821      	ldr	r1, [r4, #0]
 80019c8:	4628      	mov	r0, r5
 80019ca:	f7ff ff9b 	bl	8001904 <MT48LC4M32B2_Precharge>
 80019ce:	2800      	cmp	r0, #0
 80019d0:	d1ef      	bne.n	80019b2 <MT48LC4M32B2_Init+0xe>
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 80019d2:	4628      	mov	r0, r5
 80019d4:	e9d4 1200 	ldrd	r1, r2, [r4]
 80019d8:	f7ff ffc8 	bl	800196c <MT48LC4M32B2_RefreshMode>
 80019dc:	2800      	cmp	r0, #0
 80019de:	d1e8      	bne.n	80019b2 <MT48LC4M32B2_Init+0xe>
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 80019e0:	4621      	mov	r1, r4
 80019e2:	4628      	mov	r0, r5
 80019e4:	f7ff ffa4 	bl	8001930 <MT48LC4M32B2_ModeRegConfig>
 80019e8:	2800      	cmp	r0, #0
 80019ea:	d1e2      	bne.n	80019b2 <MT48LC4M32B2_Init+0xe>
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 80019ec:	68a1      	ldr	r1, [r4, #8]
 80019ee:	4628      	mov	r0, r5
 80019f0:	f7ff ffd0 	bl	8001994 <MT48LC4M32B2_RefreshRate>
 80019f4:	3800      	subs	r0, #0
 80019f6:	bf18      	it	ne
 80019f8:	2001      	movne	r0, #1
 80019fa:	4240      	negs	r0, r0
  return ret;
 80019fc:	e7db      	b.n	80019b6 <MT48LC4M32B2_Init+0x12>
	...

08001a00 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8001a00:	4a09      	ldr	r2, [pc, #36]	@ (8001a28 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8001a02:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 8001a06:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8001a08:	684a      	ldr	r2, [r1, #4]
 8001a0a:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8001a10:	688a      	ldr	r2, [r1, #8]
 8001a12:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8001a14:	680a      	ldr	r2, [r1, #0]
 8001a16:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8001a18:	2200      	movs	r2, #0
 8001a1a:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8001a1e:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8001a20:	68ca      	ldr	r2, [r1, #12]
 8001a22:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8001a24:	f001 ba6a 	b.w	8002efc <HAL_QSPI_Init>
 8001a28:	52005000 	.word	0x52005000

08001a2c <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8001a2c:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001a2e:	b988      	cbnz	r0, 8001a54 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001a30:	4c0a      	ldr	r4, [pc, #40]	@ (8001a5c <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8001a32:	480b      	ldr	r0, [pc, #44]	@ (8001a60 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8001a34:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001a36:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8001a38:	b94b      	cbnz	r3, 8001a4e <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001a3a:	f7ff fec6 	bl	80017ca <MT25TL01G_EnableMemoryMappedModeSTR>
 8001a3e:	b110      	cbz	r0, 8001a46 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a40:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8001a44:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8001a46:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8001a48:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8001a4a:	7023      	strb	r3, [r4, #0]
 8001a4c:	e7fa      	b.n	8001a44 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001a4e:	f7ff fe72 	bl	8001736 <MT25TL01G_EnableMemoryMappedModeDTR>
 8001a52:	e7f4      	b.n	8001a3e <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8001a54:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8001a58:	e7f4      	b.n	8001a44 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8001a5a:	bf00      	nop
 8001a5c:	24000dc0 	.word	0x24000dc0
 8001a60:	24000dcc 	.word	0x24000dcc

08001a64 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8001a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a66:	460c      	mov	r4, r1
 8001a68:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001a6a:	bb30      	cbnz	r0, 8001aba <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8001a6c:	4d17      	ldr	r5, [pc, #92]	@ (8001acc <BSP_QSPI_ConfigFlash+0x68>)
 8001a6e:	782b      	ldrb	r3, [r5, #0]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d025      	beq.n	8001ac0 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8001a74:	fab2 f382 	clz	r3, r2
 8001a78:	4e15      	ldr	r6, [pc, #84]	@ (8001ad0 <BSP_QSPI_ConfigFlash+0x6c>)
 8001a7a:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8001a7c:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8001a82:	f001 fa3b 	bl	8002efc <HAL_QSPI_Init>
 8001a86:	b9f0      	cbnz	r0, 8001ac6 <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8001a88:	786b      	ldrb	r3, [r5, #1]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d10f      	bne.n	8001aae <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8001a8e:	2c03      	cmp	r4, #3
 8001a90:	d105      	bne.n	8001a9e <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8001a92:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8001a94:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8001a96:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8001a98:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8001a9a:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8001a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8001a9e:	4630      	mov	r0, r6
 8001aa0:	f7ff fe2d 	bl	80016fe <MT25TL01G_ExitQPIMode>
 8001aa4:	2800      	cmp	r0, #0
 8001aa6:	d0f4      	beq.n	8001a92 <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8001aa8:	f06f 0004 	mvn.w	r0, #4
 8001aac:	e7f6      	b.n	8001a9c <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 8001aae:	2c03      	cmp	r4, #3
 8001ab0:	d1ef      	bne.n	8001a92 <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8001ab2:	4630      	mov	r0, r6
 8001ab4:	f7ff fe07 	bl	80016c6 <MT25TL01G_EnterQPIMode>
 8001ab8:	e7f4      	b.n	8001aa4 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 8001aba:	f06f 0001 	mvn.w	r0, #1
 8001abe:	e7ed      	b.n	8001a9c <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8001ac0:	f06f 0019 	mvn.w	r0, #25
 8001ac4:	e7ea      	b.n	8001a9c <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8001ac6:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8001aca:	e7e7      	b.n	8001a9c <BSP_QSPI_ConfigFlash+0x38>
 8001acc:	24000dc0 	.word	0x24000dc0
 8001ad0:	24000dcc 	.word	0x24000dcc

08001ad4 <BSP_QSPI_Init>:
{
 8001ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ad8:	460c      	mov	r4, r1
 8001ada:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001adc:	2800      	cmp	r0, #0
 8001ade:	f040 81aa 	bne.w	8001e36 <BSP_QSPI_Init+0x362>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8001ae2:	4d03      	ldr	r5, [pc, #12]	@ (8001af0 <BSP_QSPI_Init+0x1c>)
 8001ae4:	782f      	ldrb	r7, [r5, #0]
 8001ae6:	b12f      	cbz	r7, 8001af4 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8001ae8:	2000      	movs	r0, #0
}
 8001aea:	b024      	add	sp, #144	@ 0x90
 8001aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001af0:	24000dc0 	.word	0x24000dc0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8001af4:	4bc3      	ldr	r3, [pc, #780]	@ (8001e04 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001af6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001afa:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8001afc:	48c2      	ldr	r0, [pc, #776]	@ (8001e08 <BSP_QSPI_Init+0x334>)
  QSPI_CLK_ENABLE();
 8001afe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8001b02:	f04f 0840 	mov.w	r8, #64	@ 0x40
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8001b06:	f04f 0a0a 	mov.w	sl, #10
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8001b0a:	f44f 7900 	mov.w	r9, #512	@ 0x200
  QSPI_CLK_ENABLE();
 8001b0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b12:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001b16:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001b1a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001b1e:	9201      	str	r2, [sp, #4]
 8001b20:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8001b22:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001b24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b28:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8001b2a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001b2c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001b30:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8001b32:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001b36:	f042 0220 	orr.w	r2, r2, #32
 8001b3a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001b3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001b42:	f002 0220 	and.w	r2, r2, #32
 8001b46:	9202      	str	r2, [sp, #8]
 8001b48:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8001b4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001b4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b52:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001b56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001b5a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001b5e:	9203      	str	r2, [sp, #12]
 8001b60:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8001b62:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001b66:	f042 0208 	orr.w	r2, r2, #8
 8001b6a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001b6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001b72:	f002 0208 	and.w	r2, r2, #8
 8001b76:	9204      	str	r2, [sp, #16]
 8001b78:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8001b7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001b7e:	f042 0220 	orr.w	r2, r2, #32
 8001b82:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001b86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001b8a:	f002 0220 	and.w	r2, r2, #32
 8001b8e:	9205      	str	r2, [sp, #20]
 8001b90:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8001b92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001b96:	f042 0220 	orr.w	r2, r2, #32
 8001b9a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001b9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001ba2:	f002 0220 	and.w	r2, r2, #32
 8001ba6:	9206      	str	r2, [sp, #24]
 8001ba8:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8001baa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001bae:	f042 0220 	orr.w	r2, r2, #32
 8001bb2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001bb6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001bba:	f002 0220 	and.w	r2, r2, #32
 8001bbe:	9207      	str	r2, [sp, #28]
 8001bc0:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8001bc2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001bc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001bca:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001bce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001bd2:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001bd6:	9208      	str	r2, [sp, #32]
 8001bd8:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8001bda:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001bde:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001be2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001be6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001bea:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001bee:	9209      	str	r2, [sp, #36]	@ 0x24
 8001bf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8001bf2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001bf6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001bfa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001bfe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001c02:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001c06:	920a      	str	r2, [sp, #40]	@ 0x28
 8001c08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8001c0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001c0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c12:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001c16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001c1a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001c1e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8001c20:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8001c22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001c26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c2a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c36:	930c      	str	r3, [sp, #48]	@ 0x30
 8001c38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e9cd 1316 	strd	r1, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8001c42:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001c44:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001c46:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8001c4a:	f000 fed5 	bl	80029f8 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001c4e:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8001c50:	a916      	add	r1, sp, #88	@ 0x58
 8001c52:	486e      	ldr	r0, [pc, #440]	@ (8001e0c <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001c54:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8001c56:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8001c5a:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8001c5e:	f000 fecb 	bl	80029f8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8001c62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8001c66:	a916      	add	r1, sp, #88	@ 0x58
 8001c68:	4869      	ldr	r0, [pc, #420]	@ (8001e10 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8001c6a:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001c6c:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001c6e:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8001c70:	f000 fec2 	bl	80029f8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8001c74:	2304      	movs	r3, #4
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8001c76:	a916      	add	r1, sp, #88	@ 0x58
 8001c78:	4866      	ldr	r0, [pc, #408]	@ (8001e14 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8001c7a:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001c7c:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8001c7e:	f000 febb 	bl	80029f8 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8001c82:	a916      	add	r1, sp, #88	@ 0x58
 8001c84:	4860      	ldr	r0, [pc, #384]	@ (8001e08 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8001c86:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8001c8a:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8001c8e:	f000 feb3 	bl	80029f8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8001c92:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8001c94:	a916      	add	r1, sp, #88	@ 0x58
 8001c96:	485f      	ldr	r0, [pc, #380]	@ (8001e14 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8001c98:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001c9a:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8001c9c:	f000 feac 	bl	80029f8 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8001ca0:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8001ca2:	a916      	add	r1, sp, #88	@ 0x58
 8001ca4:	4858      	ldr	r0, [pc, #352]	@ (8001e08 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8001ca6:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001ca8:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8001caa:	f000 fea5 	bl	80029f8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8001cae:	a916      	add	r1, sp, #88	@ 0x58
 8001cb0:	4856      	ldr	r0, [pc, #344]	@ (8001e0c <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8001cb2:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8001cb6:	f000 fe9f 	bl	80029f8 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8001cba:	a916      	add	r1, sp, #88	@ 0x58
 8001cbc:	4852      	ldr	r0, [pc, #328]	@ (8001e08 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8001cbe:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8001cc2:	f000 fe99 	bl	80029f8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8001cc6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8001cca:	a916      	add	r1, sp, #88	@ 0x58
 8001ccc:	484f      	ldr	r0, [pc, #316]	@ (8001e0c <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8001cce:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8001cd0:	f000 fe92 	bl	80029f8 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8001cd4:	463a      	mov	r2, r7
 8001cd6:	210f      	movs	r1, #15
 8001cd8:	205c      	movs	r0, #92	@ 0x5c
 8001cda:	f000 fdef 	bl	80028bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001cde:	205c      	movs	r0, #92	@ 0x5c
 8001ce0:	f000 fe1e 	bl	8002920 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8001ce4:	a811      	add	r0, sp, #68	@ 0x44
 8001ce6:	f7ff fc42 	bl	800156e <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8001cea:	7863      	ldrb	r3, [r4, #1]
 8001cec:	4a4a      	ldr	r2, [pc, #296]	@ (8001e18 <BSP_QSPI_Init+0x344>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8001cee:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8001cf2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cf6:	920e      	str	r2, [sp, #56]	@ 0x38
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8001cfa:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8001cfe:	fab3 f383 	clz	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001d02:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8001d06:	a90d      	add	r1, sp, #52	@ 0x34
 8001d08:	4844      	ldr	r0, [pc, #272]	@ (8001e1c <BSP_QSPI_Init+0x348>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8001d0a:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8001d0c:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8001d0e:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8001d10:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8001d12:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8001d14:	f7ff fe74 	bl	8001a00 <MX_QSPI_Init>
 8001d18:	2800      	cmp	r0, #0
 8001d1a:	f040 808f 	bne.w	8001e3c <BSP_QSPI_Init+0x368>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8001d1e:	2103      	movs	r1, #3
 8001d20:	483e      	ldr	r0, [pc, #248]	@ (8001e1c <BSP_QSPI_Init+0x348>)
 8001d22:	f7ff fd98 	bl	8001856 <MT25TL01G_ResetEnable>
 8001d26:	2800      	cmp	r0, #0
 8001d28:	f040 8082 	bne.w	8001e30 <BSP_QSPI_Init+0x35c>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8001d2c:	2103      	movs	r1, #3
 8001d2e:	483b      	ldr	r0, [pc, #236]	@ (8001e1c <BSP_QSPI_Init+0x348>)
 8001d30:	f7ff fdb2 	bl	8001898 <MT25TL01G_ResetMemory>
 8001d34:	2800      	cmp	r0, #0
 8001d36:	d17b      	bne.n	8001e30 <BSP_QSPI_Init+0x35c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001d38:	7869      	ldrb	r1, [r5, #1]
 8001d3a:	4838      	ldr	r0, [pc, #224]	@ (8001e1c <BSP_QSPI_Init+0x348>)
 8001d3c:	f7ff fc28 	bl	8001590 <MT25TL01G_AutoPollingMemReady>
 8001d40:	4601      	mov	r1, r0
 8001d42:	2800      	cmp	r0, #0
 8001d44:	d174      	bne.n	8001e30 <BSP_QSPI_Init+0x35c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8001d46:	4835      	ldr	r0, [pc, #212]	@ (8001e1c <BSP_QSPI_Init+0x348>)
 8001d48:	f7ff fd85 	bl	8001856 <MT25TL01G_ResetEnable>
 8001d4c:	4601      	mov	r1, r0
 8001d4e:	2800      	cmp	r0, #0
 8001d50:	d16e      	bne.n	8001e30 <BSP_QSPI_Init+0x35c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8001d52:	4832      	ldr	r0, [pc, #200]	@ (8001e1c <BSP_QSPI_Init+0x348>)
 8001d54:	f7ff fda0 	bl	8001898 <MT25TL01G_ResetMemory>
 8001d58:	4601      	mov	r1, r0
 8001d5a:	2800      	cmp	r0, #0
 8001d5c:	d168      	bne.n	8001e30 <BSP_QSPI_Init+0x35c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8001d5e:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8001d60:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001d62:	482e      	ldr	r0, [pc, #184]	@ (8001e1c <BSP_QSPI_Init+0x348>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8001d64:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001d66:	f7ff fc13 	bl	8001590 <MT25TL01G_AutoPollingMemReady>
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	d160      	bne.n	8001e30 <BSP_QSPI_Init+0x35c>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001d6e:	7869      	ldrb	r1, [r5, #1]
 8001d70:	482a      	ldr	r0, [pc, #168]	@ (8001e1c <BSP_QSPI_Init+0x348>)
 8001d72:	f7ff fc7c 	bl	800166e <MT25TL01G_Enter4BytesAddressMode>
 8001d76:	2800      	cmp	r0, #0
 8001d78:	d15a      	bne.n	8001e30 <BSP_QSPI_Init+0x35c>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001d7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 8001d7e:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8001d82:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d84:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001d88:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8001d8a:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d8c:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8001d8e:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001d90:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8001d94:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 8001d96:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001d98:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001d9c:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001da0:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001da4:	481d      	ldr	r0, [pc, #116]	@ (8001e1c <BSP_QSPI_Init+0x348>)
 8001da6:	f001 f8f5 	bl	8002f94 <HAL_QSPI_Command>
 8001daa:	2800      	cmp	r0, #0
 8001dac:	d140      	bne.n	8001e30 <BSP_QSPI_Init+0x35c>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db2:	f10d 0102 	add.w	r1, sp, #2
 8001db6:	4819      	ldr	r0, [pc, #100]	@ (8001e1c <BSP_QSPI_Init+0x348>)
 8001db8:	f001 f98d 	bl	80030d6 <HAL_QSPI_Receive>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d137      	bne.n	8001e30 <BSP_QSPI_Init+0x35c>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001dc0:	7869      	ldrb	r1, [r5, #1]
 8001dc2:	4816      	ldr	r0, [pc, #88]	@ (8001e1c <BSP_QSPI_Init+0x348>)
 8001dc4:	f7ff fc0f 	bl	80015e6 <MT25TL01G_WriteEnable>
 8001dc8:	bb90      	cbnz	r0, 8001e30 <BSP_QSPI_Init+0x35c>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8001dca:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd0:	a916      	add	r1, sp, #88	@ 0x58
 8001dd2:	4812      	ldr	r0, [pc, #72]	@ (8001e1c <BSP_QSPI_Init+0x348>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8001dd4:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8001dd6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001dda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001dde:	051b      	lsls	r3, r3, #20
 8001de0:	0d1b      	lsrs	r3, r3, #20
 8001de2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dea:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001dee:	f001 f8d1 	bl	8002f94 <HAL_QSPI_Command>
 8001df2:	b9e8      	cbnz	r0, 8001e30 <BSP_QSPI_Init+0x35c>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df8:	f10d 0102 	add.w	r1, sp, #2
 8001dfc:	4807      	ldr	r0, [pc, #28]	@ (8001e1c <BSP_QSPI_Init+0x348>)
 8001dfe:	f001 f90e 	bl	800301e <HAL_QSPI_Transmit>
 8001e02:	e00d      	b.n	8001e20 <BSP_QSPI_Init+0x34c>
 8001e04:	58024400 	.word	0x58024400
 8001e08:	58021400 	.word	0x58021400
 8001e0c:	58021800 	.word	0x58021800
 8001e10:	58020c00 	.word	0x58020c00
 8001e14:	58021c00 	.word	0x58021c00
 8001e18:	0801d4ec 	.word	0x0801d4ec
 8001e1c:	24000dcc 	.word	0x24000dcc
 8001e20:	b930      	cbnz	r0, 8001e30 <BSP_QSPI_Init+0x35c>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8001e22:	7862      	ldrb	r2, [r4, #1]
 8001e24:	7821      	ldrb	r1, [r4, #0]
 8001e26:	f7ff fe1d 	bl	8001a64 <BSP_QSPI_ConfigFlash>
 8001e2a:	2800      	cmp	r0, #0
 8001e2c:	f43f ae5c 	beq.w	8001ae8 <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8001e30:	f06f 0004 	mvn.w	r0, #4
 8001e34:	e659      	b.n	8001aea <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 8001e36:	f06f 0001 	mvn.w	r0, #1
 8001e3a:	e656      	b.n	8001aea <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8001e3c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8001e40:	e653      	b.n	8001aea <BSP_QSPI_Init+0x16>
 8001e42:	bf00      	nop

08001e44 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 8001e44:	b530      	push	{r4, r5, lr}
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8001e46:	4d15      	ldr	r5, [pc, #84]	@ (8001e9c <MX_SDRAM_BANK2_Init+0x58>)

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e48:	f04f 0c01 	mov.w	ip, #1
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8001e4c:	4c14      	ldr	r4, [pc, #80]	@ (8001ea0 <MX_SDRAM_BANK2_Init+0x5c>)
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001e4e:	f44f 6e00 	mov.w	lr, #2048	@ 0x800
{
 8001e52:	b089      	sub	sp, #36	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
  sdram_timing.ExitSelfRefreshDelay = 7;
 8001e54:	2302      	movs	r3, #2
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8001e56:	602c      	str	r4, [r5, #0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e58:	2400      	movs	r4, #0
  sdram_timing.SelfRefreshTime      = 4;
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 8001e5a:	9307      	str	r3, [sp, #28]
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001e5c:	6284      	str	r4, [r0, #40]	@ 0x28
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8001e5e:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e62:	2240      	movs	r2, #64	@ 0x40
  sdram_timing.SelfRefreshTime      = 4;
 8001e64:	2104      	movs	r1, #4
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e66:	e9c0 c401 	strd	ip, r4, [r0, #4]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e6a:	616a      	str	r2, [r5, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8001e6c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001e70:	e9c0 2406 	strd	r2, r4, [r0, #24]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001e74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e78:	e9c0 e208 	strd	lr, r2, [r0, #32]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8001e7c:	2207      	movs	r2, #7
  sdram_timing.RowCycleDelay        = 7;
 8001e7e:	e9cd 1203 	strd	r1, r2, [sp, #12]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8001e82:	4469      	add	r1, sp
  sdram_timing.ExitSelfRefreshDelay = 7;
 8001e84:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8001e88:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8001e8c:	f003 f836 	bl	8004efc <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }
  return HAL_OK;
}
 8001e90:	1b00      	subs	r0, r0, r4
 8001e92:	bf18      	it	ne
 8001e94:	2001      	movne	r0, #1
 8001e96:	b009      	add	sp, #36	@ 0x24
 8001e98:	bd30      	pop	{r4, r5, pc}
 8001e9a:	bf00      	nop
 8001e9c:	24000ea4 	.word	0x24000ea4
 8001ea0:	52004140 	.word	0x52004140

08001ea4 <BSP_SDRAM_Init>:
{
 8001ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8001ea6:	4605      	mov	r5, r0
{
 8001ea8:	b08d      	sub	sp, #52	@ 0x34
  if(Instance >=SDRAM_INSTANCES_NBR)
 8001eaa:	2800      	cmp	r0, #0
 8001eac:	f040 80cb 	bne.w	8002046 <BSP_SDRAM_Init+0x1a2>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001eb0:	4b68      	ldr	r3, [pc, #416]	@ (8002054 <BSP_SDRAM_Init+0x1b0>)

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001eb2:	2703      	movs	r7, #3
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001eb4:	a907      	add	r1, sp, #28
 8001eb6:	4868      	ldr	r0, [pc, #416]	@ (8002058 <BSP_SDRAM_Init+0x1b4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001eb8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 8001ebc:	4c67      	ldr	r4, [pc, #412]	@ (800205c <BSP_SDRAM_Init+0x1b8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ebe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8001ec2:	4e67      	ldr	r6, [pc, #412]	@ (8002060 <BSP_SDRAM_Init+0x1bc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ec4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001ec8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001ecc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001ed0:	9200      	str	r2, [sp, #0]
 8001ed2:	9a00      	ldr	r2, [sp, #0]
  SDRAM_MDMAx_CLK_ENABLE();
 8001ed4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001ed8:	f042 0201 	orr.w	r2, r2, #1
 8001edc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001ee0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001ee4:	f002 0201 	and.w	r2, r2, #1
 8001ee8:	9201      	str	r2, [sp, #4]
 8001eea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001ef0:	f042 0208 	orr.w	r2, r2, #8
 8001ef4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001ef8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001efc:	f002 0208 	and.w	r2, r2, #8
 8001f00:	9202      	str	r2, [sp, #8]
 8001f02:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001f08:	f042 0210 	orr.w	r2, r2, #16
 8001f0c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001f10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001f14:	f002 0210 	and.w	r2, r2, #16
 8001f18:	9203      	str	r2, [sp, #12]
 8001f1a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001f20:	f042 0220 	orr.w	r2, r2, #32
 8001f24:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001f28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001f2c:	f002 0220 	and.w	r2, r2, #32
 8001f30:	9204      	str	r2, [sp, #16]
 8001f32:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001f38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f3c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001f40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001f44:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001f48:	9205      	str	r2, [sp, #20]
 8001f4a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001f50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f54:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001f58:	2202      	movs	r2, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f62:	9306      	str	r3, [sp, #24]
 8001f64:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e9cd 2308 	strd	r2, r3, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	e9cd 730a 	strd	r7, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001f72:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001f76:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001f78:	f000 fd3e 	bl	80029f8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001f7c:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001f80:	a907      	add	r1, sp, #28
 8001f82:	4838      	ldr	r0, [pc, #224]	@ (8002064 <BSP_SDRAM_Init+0x1c0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001f84:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001f86:	f000 fd37 	bl	80029f8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001f8a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001f8e:	a907      	add	r1, sp, #28
 8001f90:	4835      	ldr	r0, [pc, #212]	@ (8002068 <BSP_SDRAM_Init+0x1c4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001f92:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001f94:	f000 fd30 	bl	80029f8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8001f98:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001f9c:	a907      	add	r1, sp, #28
 8001f9e:	4833      	ldr	r0, [pc, #204]	@ (800206c <BSP_SDRAM_Init+0x1c8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8001fa0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001fa2:	f000 fd29 	bl	80029f8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 8001fa6:	23e0      	movs	r3, #224	@ 0xe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8001fa8:	a907      	add	r1, sp, #28
 8001faa:	4831      	ldr	r0, [pc, #196]	@ (8002070 <BSP_SDRAM_Init+0x1cc>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 8001fac:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8001fae:	f000 fd23 	bl	80029f8 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001fb2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001fb6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001fba:	f240 2002 	movw	r0, #514	@ 0x202
 8001fbe:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8001fc2:	6334      	str	r4, [r6, #48]	@ 0x30
 8001fc4:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8001fc6:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8001fca:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 8001fce:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001fd0:	2220      	movs	r2, #32

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8001fd2:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength = 128;
 8001fd4:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001fd6:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001fda:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001fde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8001fe2:	4b24      	ldr	r3, [pc, #144]	@ (8002074 <BSP_SDRAM_Init+0x1d0>)
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001fe4:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8001fe6:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001fe8:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset = 0;
 8001fec:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  HAL_MDMA_DeInit(&mdma_handle);
 8001ff0:	f000 fe5e 	bl	8002cb0 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f000 fdec 	bl	8002bd2 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 8001ffa:	462a      	mov	r2, r5
 8001ffc:	210f      	movs	r1, #15
 8001ffe:	207a      	movs	r0, #122	@ 0x7a
 8002000:	f000 fc5c 	bl	80028bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8002004:	207a      	movs	r0, #122	@ 0x7a
 8002006:	f000 fc8b 	bl	8002920 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800200a:	2210      	movs	r2, #16
 800200c:	2104      	movs	r1, #4
 800200e:	4630      	mov	r0, r6
 8002010:	f7ff ff18 	bl	8001e44 <MX_SDRAM_BANK2_Init>
 8002014:	b9d0      	cbnz	r0, 800204c <BSP_SDRAM_Init+0x1a8>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8002016:	4918      	ldr	r1, [pc, #96]	@ (8002078 <BSP_SDRAM_Init+0x1d4>)
 8002018:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 800201a:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800201e:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 8002022:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8002024:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 8002028:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 800202a:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800202e:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8002032:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8002034:	61cb      	str	r3, [r1, #28]
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8002036:	f7ff fcb5 	bl	80019a4 <MT48LC4M32B2_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800203a:	2800      	cmp	r0, #0
 800203c:	bf18      	it	ne
 800203e:	f06f 0004 	mvnne.w	r0, #4
}
 8002042:	b00d      	add	sp, #52	@ 0x34
 8002044:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8002046:	f06f 0001 	mvn.w	r0, #1
 800204a:	e7fa      	b.n	8002042 <BSP_SDRAM_Init+0x19e>
      ret = BSP_ERROR_NO_INIT;
 800204c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002050:	e7f7      	b.n	8002042 <BSP_SDRAM_Init+0x19e>
 8002052:	bf00      	nop
 8002054:	58024400 	.word	0x58024400
 8002058:	58020c00 	.word	0x58020c00
 800205c:	24000e18 	.word	0x24000e18
 8002060:	24000ea4 	.word	0x24000ea4
 8002064:	58021000 	.word	0x58021000
 8002068:	58021400 	.word	0x58021400
 800206c:	58021800 	.word	0x58021800
 8002070:	58021c00 	.word	0x58021c00
 8002074:	52000040 	.word	0x52000040
 8002078:	24000e84 	.word	0x24000e84

0800207c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800207c:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800207e:	4b0f      	ldr	r3, [pc, #60]	@ (80020bc <HAL_InitTick+0x40>)
{
 8002080:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8002082:	781a      	ldrb	r2, [r3, #0]
 8002084:	b90a      	cbnz	r2, 800208a <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8002086:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002088:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800208a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800208e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002092:	4a0b      	ldr	r2, [pc, #44]	@ (80020c0 <HAL_InitTick+0x44>)
 8002094:	6810      	ldr	r0, [r2, #0]
 8002096:	fbb0 f0f3 	udiv	r0, r0, r3
 800209a:	f000 fc4f 	bl	800293c <HAL_SYSTICK_Config>
 800209e:	4604      	mov	r4, r0
 80020a0:	2800      	cmp	r0, #0
 80020a2:	d1f0      	bne.n	8002086 <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a4:	2d0f      	cmp	r5, #15
 80020a6:	d8ee      	bhi.n	8002086 <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a8:	4602      	mov	r2, r0
 80020aa:	4629      	mov	r1, r5
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020b0:	f000 fc04 	bl	80028bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b4:	4b03      	ldr	r3, [pc, #12]	@ (80020c4 <HAL_InitTick+0x48>)
 80020b6:	4620      	mov	r0, r4
 80020b8:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 80020ba:	e7e5      	b.n	8002088 <HAL_InitTick+0xc>
 80020bc:	24000010 	.word	0x24000010
 80020c0:	2400000c 	.word	0x2400000c
 80020c4:	24000014 	.word	0x24000014

080020c8 <HAL_Init>:
{
 80020c8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ca:	2003      	movs	r0, #3
 80020cc:	f000 fbe4 	bl	8002898 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020d0:	f001 fba0 	bl	8003814 <HAL_RCC_GetSysClockFreq>
 80020d4:	490f      	ldr	r1, [pc, #60]	@ (8002114 <HAL_Init+0x4c>)
 80020d6:	4a10      	ldr	r2, [pc, #64]	@ (8002118 <HAL_Init+0x50>)
 80020d8:	698b      	ldr	r3, [r1, #24]
 80020da:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80020de:	5cd3      	ldrb	r3, [r2, r3]
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020e6:	698b      	ldr	r3, [r1, #24]
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	5cd3      	ldrb	r3, [r2, r3]
 80020ee:	4a0b      	ldr	r2, [pc, #44]	@ (800211c <HAL_Init+0x54>)
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	fa20 f303 	lsr.w	r3, r0, r3
 80020f8:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80020fa:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <HAL_Init+0x58>)
 80020fc:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020fe:	2000      	movs	r0, #0
 8002100:	f7ff ffbc 	bl	800207c <HAL_InitTick>
 8002104:	4604      	mov	r4, r0
 8002106:	b918      	cbnz	r0, 8002110 <HAL_Init+0x48>
  HAL_MspInit();
 8002108:	f7ff f872 	bl	80011f0 <HAL_MspInit>
}
 800210c:	4620      	mov	r0, r4
 800210e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002110:	2401      	movs	r4, #1
 8002112:	e7fb      	b.n	800210c <HAL_Init+0x44>
 8002114:	58024400 	.word	0x58024400
 8002118:	0801d4d9 	.word	0x0801d4d9
 800211c:	24000008 	.word	0x24000008
 8002120:	2400000c 	.word	0x2400000c

08002124 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002124:	4a03      	ldr	r2, [pc, #12]	@ (8002134 <HAL_IncTick+0x10>)
 8002126:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <HAL_IncTick+0x14>)
 8002128:	6811      	ldr	r1, [r2, #0]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	440b      	add	r3, r1
 800212e:	6013      	str	r3, [r2, #0]
}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	24000ed8 	.word	0x24000ed8
 8002138:	24000010 	.word	0x24000010

0800213c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800213c:	4b01      	ldr	r3, [pc, #4]	@ (8002144 <HAL_GetTick+0x8>)
 800213e:	6818      	ldr	r0, [r3, #0]
}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	24000ed8 	.word	0x24000ed8

08002148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002148:	b538      	push	{r3, r4, r5, lr}
 800214a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800214c:	f7ff fff6 	bl	800213c <HAL_GetTick>
 8002150:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002152:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002154:	bf1e      	ittt	ne
 8002156:	4b04      	ldrne	r3, [pc, #16]	@ (8002168 <HAL_Delay+0x20>)
 8002158:	781b      	ldrbne	r3, [r3, #0]
 800215a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800215c:	f7ff ffee 	bl	800213c <HAL_GetTick>
 8002160:	1b43      	subs	r3, r0, r5
 8002162:	42a3      	cmp	r3, r4
 8002164:	d3fa      	bcc.n	800215c <HAL_Delay+0x14>
  {
  }
}
 8002166:	bd38      	pop	{r3, r4, r5, pc}
 8002168:	24000010 	.word	0x24000010

0800216c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800216c:	4b01      	ldr	r3, [pc, #4]	@ (8002174 <HAL_GetREVID+0x8>)
 800216e:	6818      	ldr	r0, [r3, #0]
}
 8002170:	0c00      	lsrs	r0, r0, #16
 8002172:	4770      	bx	lr
 8002174:	5c001000 	.word	0x5c001000

08002178 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002178:	4a03      	ldr	r2, [pc, #12]	@ (8002188 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 800217a:	6853      	ldr	r3, [r2, #4]
 800217c:	ea23 0300 	bic.w	r3, r3, r0
 8002180:	430b      	orrs	r3, r1
 8002182:	6053      	str	r3, [r2, #4]
}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	58000400 	.word	0x58000400

0800218c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800218c:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800218e:	0dcc      	lsrs	r4, r1, #23
 8002190:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8002192:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8002196:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002198:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 800219c:	408d      	lsls	r5, r1
 800219e:	408a      	lsls	r2, r1
 80021a0:	5903      	ldr	r3, [r0, r4]
 80021a2:	ea23 0305 	bic.w	r3, r3, r5
 80021a6:	4313      	orrs	r3, r2
 80021a8:	5103      	str	r3, [r0, r4]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021aa:	bd30      	pop	{r4, r5, pc}

080021ac <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021ac:	6880      	ldr	r0, [r0, #8]
}
 80021ae:	f000 0001 	and.w	r0, r0, #1
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021b4:	6880      	ldr	r0, [r0, #8]
}
 80021b6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80021ba:	4770      	bx	lr

080021bc <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021bc:	2300      	movs	r3, #0
{
 80021be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 80021c0:	9301      	str	r3, [sp, #4]
{
 80021c2:	4605      	mov	r5, r0
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021c4:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 80021c8:	460e      	mov	r6, r1
  __HAL_LOCK(hadc);
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	f000 81a6 	beq.w	800251c <HAL_ADC_ConfigChannel+0x360>
 80021d0:	2201      	movs	r2, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021d2:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 80021d4:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021d8:	4620      	mov	r0, r4
 80021da:	f7ff ffeb 	bl	80021b4 <LL_ADC_REG_IsConversionOngoing>
 80021de:	2800      	cmp	r0, #0
 80021e0:	f040 8170 	bne.w	80024c4 <HAL_ADC_ConfigChannel+0x308>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80021e4:	680b      	ldr	r3, [r1, #0]
 80021e6:	2b00      	cmp	r3, #0
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021e8:	ea4f 6193 	mov.w	r1, r3, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80021ec:	db07      	blt.n	80021fe <HAL_ADC_ConfigChannel+0x42>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021ee:	f3c3 0013 	ubfx	r0, r3, #0, #20
 80021f2:	2800      	cmp	r0, #0
 80021f4:	d16a      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x110>
 80021f6:	408a      	lsls	r2, r1
 80021f8:	69e3      	ldr	r3, [r4, #28]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61e3      	str	r3, [r4, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021fe:	6872      	ldr	r2, [r6, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002200:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 8002204:	271f      	movs	r7, #31
 8002206:	f001 011f 	and.w	r1, r1, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800220a:	0990      	lsrs	r0, r2, #6
  MODIFY_REG(*preg,
 800220c:	f002 021f 	and.w	r2, r2, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002210:	f000 000c 	and.w	r0, r0, #12
  MODIFY_REG(*preg,
 8002214:	4097      	lsls	r7, r2
 8002216:	4091      	lsls	r1, r2
 8002218:	f85c 3000 	ldr.w	r3, [ip, r0]
 800221c:	ea23 0307 	bic.w	r3, r3, r7
 8002220:	430b      	orrs	r3, r1
 8002222:	f84c 3000 	str.w	r3, [ip, r0]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002226:	4620      	mov	r0, r4
 8002228:	f7ff ffc4 	bl	80021b4 <LL_ADC_REG_IsConversionOngoing>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800222c:	68a3      	ldr	r3, [r4, #8]
 800222e:	f003 0308 	and.w	r3, r3, #8
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002232:	4303      	orrs	r3, r0
 8002234:	d13f      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0xfa>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002236:	68b2      	ldr	r2, [r6, #8]
 8002238:	4620      	mov	r0, r4
 800223a:	6831      	ldr	r1, [r6, #0]
 800223c:	f7ff ffa6 	bl	800218c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002240:	4bb7      	ldr	r3, [pc, #732]	@ (8002520 <HAL_ADC_ConfigChannel+0x364>)
 8002242:	6972      	ldr	r2, [r6, #20]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800224a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800224e:	68e3      	ldr	r3, [r4, #12]
 8002250:	d145      	bne.n	80022de <HAL_ADC_ConfigChannel+0x122>
 8002252:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8002256:	005b      	lsls	r3, r3, #1
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002258:	6937      	ldr	r7, [r6, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800225a:	409a      	lsls	r2, r3
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800225c:	6831      	ldr	r1, [r6, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800225e:	2f04      	cmp	r7, #4
 8002260:	d045      	beq.n	80022ee <HAL_ADC_ConfigChannel+0x132>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002262:	f104 0060 	add.w	r0, r4, #96	@ 0x60
    MODIFY_REG(*preg,
 8002266:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800226a:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
 800226e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002272:	430b      	orrs	r3, r1
 8002274:	4313      	orrs	r3, r2
 8002276:	f840 3027 	str.w	r3, [r0, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800227a:	7e72      	ldrb	r2, [r6, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800227c:	6931      	ldr	r1, [r6, #16]
 800227e:	1e57      	subs	r7, r2, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002280:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8002284:	427a      	negs	r2, r7
 8002286:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800228a:	417a      	adcs	r2, r7
 800228c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8002290:	f840 3021 	str.w	r3, [r0, r1, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002294:	7e33      	ldrb	r3, [r6, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002296:	6931      	ldr	r1, [r6, #16]
 8002298:	f103 3cff 	add.w	ip, r3, #4294967295	@ 0xffffffff
 800229c:	6922      	ldr	r2, [r4, #16]
 800229e:	f001 011f 	and.w	r1, r1, #31
 80022a2:	f1dc 0300 	rsbs	r3, ip, #0
 80022a6:	f422 42f0 	bic.w	r2, r2, #30720	@ 0x7800
 80022aa:	eb43 030c 	adc.w	r3, r3, ip
 80022ae:	02db      	lsls	r3, r3, #11
 80022b0:	408b      	lsls	r3, r1
 80022b2:	4313      	orrs	r3, r2
 80022b4:	6123      	str	r3, [r4, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b6:	4620      	mov	r0, r4
 80022b8:	f7ff ff78 	bl	80021ac <LL_ADC_IsEnabled>
 80022bc:	2800      	cmp	r0, #0
 80022be:	d03d      	beq.n	800233c <HAL_ADC_ConfigChannel+0x180>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c0:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c2:	2300      	movs	r3, #0
 80022c4:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80022c8:	b003      	add	sp, #12
 80022ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80022d0:	fab3 f383 	clz	r3, r3
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80022d4:	2201      	movs	r2, #1
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	409a      	lsls	r2, r3
 80022dc:	e78c      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x3c>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022de:	f013 0f10 	tst.w	r3, #16
 80022e2:	68e3      	ldr	r3, [r4, #12]
 80022e4:	d0b5      	beq.n	8002252 <HAL_ADC_ConfigChannel+0x96>
 80022e6:	085b      	lsrs	r3, r3, #1
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	e7b4      	b.n	8002258 <HAL_ADC_ConfigChannel+0x9c>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022ee:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80022f0:	068a      	lsls	r2, r1, #26
 80022f2:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 80022f6:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 80022fa:	d103      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x148>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80022fc:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80022fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002302:	6623      	str	r3, [r4, #96]	@ 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002304:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002306:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 800230a:	429a      	cmp	r2, r3
 800230c:	d103      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x15a>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800230e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002310:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002314:	6663      	str	r3, [r4, #100]	@ 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002316:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8002318:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 800231c:	429a      	cmp	r2, r3
 800231e:	d103      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x16c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002320:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8002322:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002326:	66a3      	str	r3, [r4, #104]	@ 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002328:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800232a:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 800232e:	429a      	cmp	r2, r3
 8002330:	d1c1      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0xfa>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002332:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002334:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002338:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800233a:	e7bc      	b.n	80022b6 <HAL_ADC_ConfigChannel+0xfa>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800233c:	68f7      	ldr	r7, [r6, #12]
 800233e:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8002340:	f007 0c18 	and.w	ip, r7, #24
 8002344:	4a77      	ldr	r2, [pc, #476]	@ (8002524 <HAL_ADC_ConfigChannel+0x368>)
 8002346:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 800234a:	f3c3 0013 	ubfx	r0, r3, #0, #20
 800234e:	fa22 f20c 	lsr.w	r2, r2, ip
 8002352:	ea21 0100 	bic.w	r1, r1, r0
 8002356:	401a      	ands	r2, r3
 8002358:	430a      	orrs	r2, r1
 800235a:	f8c4 20c0 	str.w	r2, [r4, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800235e:	4a72      	ldr	r2, [pc, #456]	@ (8002528 <HAL_ADC_ConfigChannel+0x36c>)
 8002360:	4297      	cmp	r7, r2
 8002362:	d11b      	bne.n	800239c <HAL_ADC_ConfigChannel+0x1e0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002364:	2800      	cmp	r0, #0
 8002366:	d158      	bne.n	800241a <HAL_ADC_ConfigChannel+0x25e>
 8002368:	0e9a      	lsrs	r2, r3, #26
 800236a:	2101      	movs	r1, #1
 800236c:	3201      	adds	r2, #1
 800236e:	f002 071f 	and.w	r7, r2, #31
 8002372:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002374:	2f09      	cmp	r7, #9
 8002376:	d870      	bhi.n	800245a <HAL_ADC_ConfigChannel+0x29e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002378:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800237c:	40b9      	lsls	r1, r7
 800237e:	430a      	orrs	r2, r1
 8002380:	2800      	cmp	r0, #0
 8002382:	d165      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x294>
 8002384:	0e99      	lsrs	r1, r3, #26
 8002386:	3101      	adds	r1, #1
 8002388:	f001 011f 	and.w	r1, r1, #31
 800238c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002390:	0509      	lsls	r1, r1, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002392:	4311      	orrs	r1, r2
 8002394:	4620      	mov	r0, r4
 8002396:	68b2      	ldr	r2, [r6, #8]
 8002398:	f7ff fef8 	bl	800218c <LL_ADC_SetChannelSamplingTime>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800239c:	6832      	ldr	r2, [r6, #0]
 800239e:	2a00      	cmp	r2, #0
 80023a0:	da8e      	bge.n	80022c0 <HAL_ADC_ConfigChannel+0x104>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023a2:	4962      	ldr	r1, [pc, #392]	@ (800252c <HAL_ADC_ConfigChannel+0x370>)
 80023a4:	428c      	cmp	r4, r1
 80023a6:	f000 8086 	beq.w	80024b6 <HAL_ADC_ConfigChannel+0x2fa>
 80023aa:	4e61      	ldr	r6, [pc, #388]	@ (8002530 <HAL_ADC_ConfigChannel+0x374>)
 80023ac:	4b61      	ldr	r3, [pc, #388]	@ (8002534 <HAL_ADC_ConfigChannel+0x378>)
 80023ae:	4862      	ldr	r0, [pc, #392]	@ (8002538 <HAL_ADC_ConfigChannel+0x37c>)
 80023b0:	42b4      	cmp	r4, r6
 80023b2:	bf08      	it	eq
 80023b4:	4603      	moveq	r3, r0
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023b6:	428c      	cmp	r4, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	d002      	beq.n	80023c2 <HAL_ADC_ConfigChannel+0x206>
 80023bc:	495c      	ldr	r1, [pc, #368]	@ (8002530 <HAL_ADC_ConfigChannel+0x374>)
 80023be:	428c      	cmp	r4, r1
 80023c0:	d17b      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x2fe>
 80023c2:	485a      	ldr	r0, [pc, #360]	@ (800252c <HAL_ADC_ConfigChannel+0x370>)
 80023c4:	f7ff fef2 	bl	80021ac <LL_ADC_IsEnabled>
 80023c8:	4601      	mov	r1, r0
 80023ca:	4859      	ldr	r0, [pc, #356]	@ (8002530 <HAL_ADC_ConfigChannel+0x374>)
 80023cc:	f7ff feee 	bl	80021ac <LL_ADC_IsEnabled>
 80023d0:	4301      	orrs	r1, r0
 80023d2:	d177      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x308>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023d4:	4859      	ldr	r0, [pc, #356]	@ (800253c <HAL_ADC_ConfigChannel+0x380>)
 80023d6:	f003 71e0 	and.w	r1, r3, #29360128	@ 0x1c00000
 80023da:	4282      	cmp	r2, r0
 80023dc:	d178      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x314>
 80023de:	0218      	lsls	r0, r3, #8
 80023e0:	f53f af6e 	bmi.w	80022c0 <HAL_ADC_ConfigChannel+0x104>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023e4:	4b56      	ldr	r3, [pc, #344]	@ (8002540 <HAL_ADC_ConfigChannel+0x384>)
 80023e6:	429c      	cmp	r4, r3
 80023e8:	f47f af6a 	bne.w	80022c0 <HAL_ADC_ConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023ec:	4a51      	ldr	r2, [pc, #324]	@ (8002534 <HAL_ADC_ConfigChannel+0x378>)
 80023ee:	6893      	ldr	r3, [r2, #8]
 80023f0:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80023f4:	430b      	orrs	r3, r1
 80023f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023fa:	6093      	str	r3, [r2, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023fc:	4b51      	ldr	r3, [pc, #324]	@ (8002544 <HAL_ADC_ConfigChannel+0x388>)
 80023fe:	4a52      	ldr	r2, [pc, #328]	@ (8002548 <HAL_ADC_ConfigChannel+0x38c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	fbb3 f3f2 	udiv	r3, r3, r2
 8002406:	3301      	adds	r3, #1
 8002408:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 800240a:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 800240c:	9b01      	ldr	r3, [sp, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f43f af56 	beq.w	80022c0 <HAL_ADC_ConfigChannel+0x104>
                wait_loop_index--;
 8002414:	9b01      	ldr	r3, [sp, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	e7f7      	b.n	800240a <HAL_ADC_ConfigChannel+0x24e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800241e:	b132      	cbz	r2, 800242e <HAL_ADC_ConfigChannel+0x272>
  return __builtin_clz(value);
 8002420:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002424:	3201      	adds	r2, #1
 8002426:	f002 021f 	and.w	r2, r2, #31
 800242a:	2a09      	cmp	r2, #9
 800242c:	d825      	bhi.n	800247a <HAL_ADC_ConfigChannel+0x2be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002432:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002436:	3201      	adds	r2, #1
 8002438:	0692      	lsls	r2, r2, #26
 800243a:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 8002442:	fab7 f787 	clz	r7, r7
 8002446:	2101      	movs	r1, #1
 8002448:	3701      	adds	r7, #1
 800244a:	f007 071f 	and.w	r7, r7, #31
 800244e:	e795      	b.n	800237c <HAL_ADC_ConfigChannel+0x1c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002454:	fab1 f181 	clz	r1, r1
 8002458:	e795      	b.n	8002386 <HAL_ADC_ConfigChannel+0x1ca>
 800245a:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800245e:	40b9      	lsls	r1, r7
 8002460:	430a      	orrs	r2, r1
 8002462:	b9d8      	cbnz	r0, 800249c <HAL_ADC_ConfigChannel+0x2e0>
 8002464:	0e99      	lsrs	r1, r3, #26
 8002466:	3101      	adds	r1, #1
 8002468:	f001 011f 	and.w	r1, r1, #31
 800246c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002470:	391e      	subs	r1, #30
 8002472:	0509      	lsls	r1, r1, #20
 8002474:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8002478:	e78b      	b.n	8002392 <HAL_ADC_ConfigChannel+0x1d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 800247e:	fab2 f282 	clz	r2, r2
 8002482:	3201      	adds	r2, #1
 8002484:	0692      	lsls	r2, r2, #26
 8002486:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 800248e:	fab7 f787 	clz	r7, r7
 8002492:	2101      	movs	r1, #1
 8002494:	3701      	adds	r7, #1
 8002496:	f007 071f 	and.w	r7, r7, #31
 800249a:	e7e0      	b.n	800245e <HAL_ADC_ConfigChannel+0x2a2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	2103      	movs	r1, #3
 80024a6:	f06f 001d 	mvn.w	r0, #29
 80024aa:	3301      	adds	r3, #1
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	fb11 0103 	smlabb	r1, r1, r3, r0
 80024b4:	e7dd      	b.n	8002472 <HAL_ADC_ConfigChannel+0x2b6>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024b6:	4b20      	ldr	r3, [pc, #128]	@ (8002538 <HAL_ADC_ConfigChannel+0x37c>)
 80024b8:	e77d      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x1fa>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024ba:	4821      	ldr	r0, [pc, #132]	@ (8002540 <HAL_ADC_ConfigChannel+0x384>)
 80024bc:	f7ff fe76 	bl	80021ac <LL_ADC_IsEnabled>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d087      	beq.n	80023d4 <HAL_ADC_ConfigChannel+0x218>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c4:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 80024c6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c8:	f043 0320 	orr.w	r3, r3, #32
 80024cc:	656b      	str	r3, [r5, #84]	@ 0x54
          tmp_hal_status = HAL_ERROR;
 80024ce:	e6f8      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x106>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024d0:	481e      	ldr	r0, [pc, #120]	@ (800254c <HAL_ADC_ConfigChannel+0x390>)
 80024d2:	4282      	cmp	r2, r0
 80024d4:	d10f      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x33a>
 80024d6:	01da      	lsls	r2, r3, #7
 80024d8:	f53f aef2 	bmi.w	80022c0 <HAL_ADC_ConfigChannel+0x104>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024dc:	4b18      	ldr	r3, [pc, #96]	@ (8002540 <HAL_ADC_ConfigChannel+0x384>)
 80024de:	429c      	cmp	r4, r3
 80024e0:	f47f aeee 	bne.w	80022c0 <HAL_ADC_ConfigChannel+0x104>
 80024e4:	4a13      	ldr	r2, [pc, #76]	@ (8002534 <HAL_ADC_ConfigChannel+0x378>)
 80024e6:	6893      	ldr	r3, [r2, #8]
 80024e8:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80024ec:	430b      	orrs	r3, r1
 80024ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024f2:	6093      	str	r3, [r2, #8]
}
 80024f4:	e6e4      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x104>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024f6:	4816      	ldr	r0, [pc, #88]	@ (8002550 <HAL_ADC_ConfigChannel+0x394>)
 80024f8:	4282      	cmp	r2, r0
 80024fa:	f47f aee1 	bne.w	80022c0 <HAL_ADC_ConfigChannel+0x104>
 80024fe:	025b      	lsls	r3, r3, #9
 8002500:	f53f aede 	bmi.w	80022c0 <HAL_ADC_ConfigChannel+0x104>
            if (ADC_VREFINT_INSTANCE(hadc))
 8002504:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <HAL_ADC_ConfigChannel+0x384>)
 8002506:	429c      	cmp	r4, r3
 8002508:	f47f aeda 	bne.w	80022c0 <HAL_ADC_ConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800250c:	4a09      	ldr	r2, [pc, #36]	@ (8002534 <HAL_ADC_ConfigChannel+0x378>)
 800250e:	6893      	ldr	r3, [r2, #8]
 8002510:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8002514:	430b      	orrs	r3, r1
 8002516:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800251a:	e7ea      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x336>
  __HAL_LOCK(hadc);
 800251c:	2002      	movs	r0, #2
 800251e:	e6d3      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x10c>
 8002520:	5c001000 	.word	0x5c001000
 8002524:	000fffff 	.word	0x000fffff
 8002528:	47ff0000 	.word	0x47ff0000
 800252c:	40022000 	.word	0x40022000
 8002530:	40022100 	.word	0x40022100
 8002534:	58026300 	.word	0x58026300
 8002538:	40022300 	.word	0x40022300
 800253c:	cb840000 	.word	0xcb840000
 8002540:	58026000 	.word	0x58026000
 8002544:	2400000c 	.word	0x2400000c
 8002548:	00030d40 	.word	0x00030d40
 800254c:	c7520000 	.word	0xc7520000
 8002550:	cfb80000 	.word	0xcfb80000

08002554 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002554:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002556:	4a43      	ldr	r2, [pc, #268]	@ (8002664 <ADC_ConfigureBoostMode+0x110>)
{
 8002558:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800255a:	6803      	ldr	r3, [r0, #0]
 800255c:	4293      	cmp	r3, r2
 800255e:	d003      	beq.n	8002568 <ADC_ConfigureBoostMode+0x14>
 8002560:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002564:	4293      	cmp	r3, r2
 8002566:	d125      	bne.n	80025b4 <ADC_ConfigureBoostMode+0x60>
 8002568:	4b3f      	ldr	r3, [pc, #252]	@ (8002668 <ADC_ConfigureBoostMode+0x114>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8002570:	bf14      	ite	ne
 8002572:	2301      	movne	r3, #1
 8002574:	2300      	moveq	r3, #0
 8002576:	b9fb      	cbnz	r3, 80025b8 <ADC_ConfigureBoostMode+0x64>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002578:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800257c:	2100      	movs	r1, #0
 800257e:	f002 fb3f 	bl	8004c00 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8002582:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002584:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8002586:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800258a:	d04a      	beq.n	8002622 <ADC_ConfigureBoostMode+0xce>
 800258c:	d83f      	bhi.n	800260e <ADC_ConfigureBoostMode+0xba>
 800258e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002592:	d044      	beq.n	800261e <ADC_ConfigureBoostMode+0xca>
 8002594:	d836      	bhi.n	8002604 <ADC_ConfigureBoostMode+0xb0>
 8002596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800259a:	d008      	beq.n	80025ae <ADC_ConfigureBoostMode+0x5a>
 800259c:	d82c      	bhi.n	80025f8 <ADC_ConfigureBoostMode+0xa4>
 800259e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80025a2:	d004      	beq.n	80025ae <ADC_ConfigureBoostMode+0x5a>
 80025a4:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80025a8:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80025ac:	d116      	bne.n	80025dc <ADC_ConfigureBoostMode+0x88>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80025ae:	0c9b      	lsrs	r3, r3, #18
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	e00f      	b.n	80025d4 <ADC_ConfigureBoostMode+0x80>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80025b4:	4b2d      	ldr	r3, [pc, #180]	@ (800266c <ADC_ConfigureBoostMode+0x118>)
 80025b6:	e7d8      	b.n	800256a <ADC_ConfigureBoostMode+0x16>
    freq = HAL_RCC_GetHCLKFreq();
 80025b8:	f001 faf4 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80025bc:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 80025be:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 80025c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025c4:	d005      	beq.n	80025d2 <ADC_ConfigureBoostMode+0x7e>
 80025c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025ca:	d006      	beq.n	80025da <ADC_ConfigureBoostMode+0x86>
 80025cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025d0:	d104      	bne.n	80025dc <ADC_ConfigureBoostMode+0x88>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80025d2:	0c1b      	lsrs	r3, r3, #16
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80025d4:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 80025d8:	e000      	b.n	80025dc <ADC_ConfigureBoostMode+0x88>
        freq /= 4UL;
 80025da:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80025dc:	f7ff fdc6 	bl	800216c <HAL_GetREVID>
 80025e0:	f241 0303 	movw	r3, #4099	@ 0x1003
 80025e4:	4298      	cmp	r0, r3
 80025e6:	682b      	ldr	r3, [r5, #0]
 80025e8:	d823      	bhi.n	8002632 <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 80025ea:	4a21      	ldr	r2, [pc, #132]	@ (8002670 <ADC_ConfigureBoostMode+0x11c>)
 80025ec:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80025ee:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 80025f0:	d91b      	bls.n	800262a <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80025f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025f6:	e01a      	b.n	800262e <ADC_ConfigureBoostMode+0xda>
    switch (hadc->Init.ClockPrescaler)
 80025f8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80025fc:	d0d7      	beq.n	80025ae <ADC_ConfigureBoostMode+0x5a>
 80025fe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002602:	e7d3      	b.n	80025ac <ADC_ConfigureBoostMode+0x58>
 8002604:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002608:	d1e8      	bne.n	80025dc <ADC_ConfigureBoostMode+0x88>
        freq /= 32UL;
 800260a:	0944      	lsrs	r4, r0, #5
        break;
 800260c:	e7e6      	b.n	80025dc <ADC_ConfigureBoostMode+0x88>
    switch (hadc->Init.ClockPrescaler)
 800260e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002612:	d008      	beq.n	8002626 <ADC_ConfigureBoostMode+0xd2>
 8002614:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002618:	d1e0      	bne.n	80025dc <ADC_ConfigureBoostMode+0x88>
        freq /= 256UL;
 800261a:	0a04      	lsrs	r4, r0, #8
        break;
 800261c:	e7de      	b.n	80025dc <ADC_ConfigureBoostMode+0x88>
        freq /= 16UL;
 800261e:	0904      	lsrs	r4, r0, #4
        break;
 8002620:	e7dc      	b.n	80025dc <ADC_ConfigureBoostMode+0x88>
        freq /= 64UL;
 8002622:	0984      	lsrs	r4, r0, #6
        break;
 8002624:	e7da      	b.n	80025dc <ADC_ConfigureBoostMode+0x88>
        freq /= 128UL;
 8002626:	09c4      	lsrs	r4, r0, #7
        break;
 8002628:	e7d8      	b.n	80025dc <ADC_ConfigureBoostMode+0x88>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800262a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800262e:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002630:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 8002632:	4a10      	ldr	r2, [pc, #64]	@ (8002674 <ADC_ConfigureBoostMode+0x120>)
 8002634:	4294      	cmp	r4, r2
 8002636:	d803      	bhi.n	8002640 <ADC_ConfigureBoostMode+0xec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800263e:	e7f6      	b.n	800262e <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 8002640:	4a0d      	ldr	r2, [pc, #52]	@ (8002678 <ADC_ConfigureBoostMode+0x124>)
 8002642:	4294      	cmp	r4, r2
 8002644:	d803      	bhi.n	800264e <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800264c:	e7d1      	b.n	80025f2 <ADC_ConfigureBoostMode+0x9e>
    else if (freq <= 25000000UL)
 800264e:	4a0b      	ldr	r2, [pc, #44]	@ (800267c <ADC_ConfigureBoostMode+0x128>)
 8002650:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	bf96      	itet	ls
 8002656:	f422 7240 	bicls.w	r2, r2, #768	@ 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800265a:	f442 7240 	orrhi.w	r2, r2, #768	@ 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800265e:	f442 7200 	orrls.w	r2, r2, #512	@ 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002662:	e7e4      	b.n	800262e <ADC_ConfigureBoostMode+0xda>
 8002664:	40022000 	.word	0x40022000
 8002668:	40022300 	.word	0x40022300
 800266c:	58026300 	.word	0x58026300
 8002670:	01312d00 	.word	0x01312d00
 8002674:	00bebc21 	.word	0x00bebc21
 8002678:	017d7841 	.word	0x017d7841
 800267c:	02faf081 	.word	0x02faf081

08002680 <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 8002680:	2300      	movs	r3, #0
{
 8002682:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (hadc == NULL)
 8002684:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8002686:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8002688:	2800      	cmp	r0, #0
 800268a:	f000 80f0 	beq.w	800286e <HAL_ADC_Init+0x1ee>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800268e:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8002690:	b925      	cbnz	r5, 800269c <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 8002692:	f7fe fdbf 	bl	8001214 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002696:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002698:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800269c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	0090      	lsls	r0, r2, #2
 80026a2:	d505      	bpl.n	80026b0 <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 80026aa:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80026ae:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	00d1      	lsls	r1, r2, #3
 80026b4:	f140 809d 	bpl.w	80027f2 <HAL_ADC_Init+0x172>
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	00d2      	lsls	r2, r2, #3
 80026bc:	f100 80af 	bmi.w	800281e <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 80026c2:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c4:	f042 0210 	orr.w	r2, r2, #16
 80026c8:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ca:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	65a2      	str	r2, [r4, #88]	@ 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fd6e 	bl	80021b4 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80026da:	f002 0210 	and.w	r2, r2, #16
 80026de:	4302      	orrs	r2, r0
 80026e0:	f040 80c1 	bne.w	8002866 <HAL_ADC_Init+0x1e6>
    ADC_STATE_CLR_SET(hadc->State,
 80026e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026e6:	4618      	mov	r0, r3
    ADC_STATE_CLR_SET(hadc->State,
 80026e8:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 80026ec:	f042 0202 	orr.w	r2, r2, #2
 80026f0:	6562      	str	r2, [r4, #84]	@ 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026f2:	f7ff fd5b 	bl	80021ac <LL_ADC_IsEnabled>
 80026f6:	b980      	cbnz	r0, 800271a <HAL_ADC_Init+0x9a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026f8:	4e5e      	ldr	r6, [pc, #376]	@ (8002874 <HAL_ADC_Init+0x1f4>)
 80026fa:	495f      	ldr	r1, [pc, #380]	@ (8002878 <HAL_ADC_Init+0x1f8>)
 80026fc:	42b3      	cmp	r3, r6
 80026fe:	d002      	beq.n	8002706 <HAL_ADC_Init+0x86>
 8002700:	428b      	cmp	r3, r1
 8002702:	f040 808e 	bne.w	8002822 <HAL_ADC_Init+0x1a2>
 8002706:	485b      	ldr	r0, [pc, #364]	@ (8002874 <HAL_ADC_Init+0x1f4>)
 8002708:	f7ff fd50 	bl	80021ac <LL_ADC_IsEnabled>
 800270c:	4602      	mov	r2, r0
 800270e:	485a      	ldr	r0, [pc, #360]	@ (8002878 <HAL_ADC_Init+0x1f8>)
 8002710:	f7ff fd4c 	bl	80021ac <LL_ADC_IsEnabled>
 8002714:	4302      	orrs	r2, r0
 8002716:	f000 8092 	beq.w	800283e <HAL_ADC_Init+0x1be>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800271a:	f7ff fd27 	bl	800216c <HAL_GetREVID>
 800271e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002722:	7f21      	ldrb	r1, [r4, #28]
 8002724:	4298      	cmp	r0, r3
 8002726:	7d62      	ldrb	r2, [r4, #21]
 8002728:	68a0      	ldr	r0, [r4, #8]
 800272a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800272c:	f240 808d 	bls.w	800284a <HAL_ADC_Init+0x1ca>
 8002730:	2810      	cmp	r0, #16
 8002732:	f040 808a 	bne.w	800284a <HAL_ADC_Init+0x1ca>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002736:	0352      	lsls	r2, r2, #13
 8002738:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800273c:	431a      	orrs	r2, r3
 800273e:	f042 031c 	orr.w	r3, r2, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002742:	2901      	cmp	r1, #1
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002744:	bf02      	ittt	eq
 8002746:	6a22      	ldreq	r2, [r4, #32]
 8002748:	f102 32ff 	addeq.w	r2, r2, #4294967295	@ 0xffffffff
 800274c:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002750:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002752:	b122      	cbz	r2, 800275e <HAL_ADC_Init+0xde>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002754:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002758:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800275a:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800275c:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800275e:	6822      	ldr	r2, [r4, #0]
 8002760:	4946      	ldr	r1, [pc, #280]	@ (800287c <HAL_ADC_Init+0x1fc>)
 8002762:	68d0      	ldr	r0, [r2, #12]
 8002764:	4001      	ands	r1, r0
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002766:	4610      	mov	r0, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002768:	4319      	orrs	r1, r3
 800276a:	60d1      	str	r1, [r2, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800276c:	f7ff fd22 	bl	80021b4 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002770:	6893      	ldr	r3, [r2, #8]
 8002772:	f003 0308 	and.w	r3, r3, #8
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002776:	4303      	orrs	r3, r0
 8002778:	d127      	bne.n	80027ca <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800277a:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800277c:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800277e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002782:	f023 0303 	bic.w	r3, r3, #3
 8002786:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 800278a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800278c:	430b      	orrs	r3, r1
 800278e:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002790:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8002794:	2b01      	cmp	r3, #1
 8002796:	d15e      	bne.n	8002856 <HAL_ADC_Init+0x1d6>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002798:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800279a:	6910      	ldr	r0, [r2, #16]
 800279c:	1e59      	subs	r1, r3, #1
 800279e:	e9d4 3610 	ldrd	r3, r6, [r4, #64]	@ 0x40
 80027a2:	4333      	orrs	r3, r6
 80027a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80027a8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80027aa:	430b      	orrs	r3, r1
 80027ac:	4934      	ldr	r1, [pc, #208]	@ (8002880 <HAL_ADC_Init+0x200>)
 80027ae:	4001      	ands	r1, r0
 80027b0:	430b      	orrs	r3, r1
 80027b2:	f043 0301 	orr.w	r3, r3, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027b6:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 80027b8:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80027ba:	6913      	ldr	r3, [r2, #16]
 80027bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80027be:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80027c2:	430b      	orrs	r3, r1
 80027c4:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 80027c6:	f7ff fec5 	bl	8002554 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027ca:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027cc:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d145      	bne.n	800285e <HAL_ADC_Init+0x1de>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027d2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80027d4:	69a3      	ldr	r3, [r4, #24]
 80027d6:	f021 010f 	bic.w	r1, r1, #15
 80027da:	3b01      	subs	r3, #1
 80027dc:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027de:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027e0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80027e2:	f023 0303 	bic.w	r3, r3, #3
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6563      	str	r3, [r4, #84]	@ 0x54
}
 80027ec:	4628      	mov	r0, r5
 80027ee:	b002      	add	sp, #8
 80027f0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 80027f2:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f4:	4923      	ldr	r1, [pc, #140]	@ (8002884 <HAL_ADC_Init+0x204>)
 80027f6:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 80027fa:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80027fe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	4a20      	ldr	r2, [pc, #128]	@ (8002888 <HAL_ADC_Init+0x208>)
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	fbb2 f2f1 	udiv	r2, r2, r1
 800280c:	3201      	adds	r2, #1
      wait_loop_index--;
 800280e:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8002810:	9a01      	ldr	r2, [sp, #4]
 8002812:	2a00      	cmp	r2, #0
 8002814:	f43f af50 	beq.w	80026b8 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8002818:	9a01      	ldr	r2, [sp, #4]
 800281a:	3a01      	subs	r2, #1
 800281c:	e7f7      	b.n	800280e <HAL_ADC_Init+0x18e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800281e:	2500      	movs	r5, #0
 8002820:	e757      	b.n	80026d2 <HAL_ADC_Init+0x52>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002822:	481a      	ldr	r0, [pc, #104]	@ (800288c <HAL_ADC_Init+0x20c>)
 8002824:	f7ff fcc2 	bl	80021ac <LL_ADC_IsEnabled>
 8002828:	2800      	cmp	r0, #0
 800282a:	f47f af76 	bne.w	800271a <HAL_ADC_Init+0x9a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800282e:	4a18      	ldr	r2, [pc, #96]	@ (8002890 <HAL_ADC_Init+0x210>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002830:	6893      	ldr	r3, [r2, #8]
 8002832:	6861      	ldr	r1, [r4, #4]
 8002834:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8002838:	430b      	orrs	r3, r1
 800283a:	6093      	str	r3, [r2, #8]
}
 800283c:	e76d      	b.n	800271a <HAL_ADC_Init+0x9a>
 800283e:	42b3      	cmp	r3, r6
 8002840:	d001      	beq.n	8002846 <HAL_ADC_Init+0x1c6>
 8002842:	428b      	cmp	r3, r1
 8002844:	d1f3      	bne.n	800282e <HAL_ADC_Init+0x1ae>
 8002846:	4a13      	ldr	r2, [pc, #76]	@ (8002894 <HAL_ADC_Init+0x214>)
 8002848:	e7f2      	b.n	8002830 <HAL_ADC_Init+0x1b0>
                  hadc->Init.Overrun                                                    |
 800284a:	4303      	orrs	r3, r0
 800284c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002850:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002854:	e775      	b.n	8002742 <HAL_ADC_Init+0xc2>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002856:	6913      	ldr	r3, [r2, #16]
 8002858:	f023 0301 	bic.w	r3, r3, #1
 800285c:	e7ab      	b.n	80027b6 <HAL_ADC_Init+0x136>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800285e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002860:	f023 030f 	bic.w	r3, r3, #15
 8002864:	e7bb      	b.n	80027de <HAL_ADC_Init+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002866:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002868:	f043 0310 	orr.w	r3, r3, #16
 800286c:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 800286e:	2501      	movs	r5, #1
 8002870:	e7bc      	b.n	80027ec <HAL_ADC_Init+0x16c>
 8002872:	bf00      	nop
 8002874:	40022000 	.word	0x40022000
 8002878:	40022100 	.word	0x40022100
 800287c:	fff0c003 	.word	0xfff0c003
 8002880:	fc00f81e 	.word	0xfc00f81e
 8002884:	00030d40 	.word	0x00030d40
 8002888:	2400000c 	.word	0x2400000c
 800288c:	58026000 	.word	0x58026000
 8002890:	58026300 	.word	0x58026300
 8002894:	40022300 	.word	0x40022300

08002898 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002898:	4907      	ldr	r1, [pc, #28]	@ (80028b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800289a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800289c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800289e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80028a6:	0412      	lsls	r2, r2, #16
 80028a8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80028b4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b16      	ldr	r3, [pc, #88]	@ (8002918 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028be:	b530      	push	{r4, r5, lr}
 80028c0:	68dc      	ldr	r4, [r3, #12]
 80028c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	bf28      	it	cs
 80028d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d2:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d8:	bf8c      	ite	hi
 80028da:	3c03      	subhi	r4, #3
 80028dc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028de:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80028e2:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e4:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ec:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	fa03 f304 	lsl.w	r3, r3, r4
 80028f4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80028fc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80028fe:	db06      	blt.n	800290e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002904:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002908:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800290c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290e:	f000 000f 	and.w	r0, r0, #15
 8002912:	4a02      	ldr	r2, [pc, #8]	@ (800291c <HAL_NVIC_SetPriority+0x60>)
 8002914:	5413      	strb	r3, [r2, r0]
 8002916:	e7f9      	b.n	800290c <HAL_NVIC_SetPriority+0x50>
 8002918:	e000ed00 	.word	0xe000ed00
 800291c:	e000ed14 	.word	0xe000ed14

08002920 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002920:	2800      	cmp	r0, #0
 8002922:	db07      	blt.n	8002934 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002924:	2301      	movs	r3, #1
 8002926:	0941      	lsrs	r1, r0, #5
 8002928:	f000 001f 	and.w	r0, r0, #31
 800292c:	4a02      	ldr	r2, [pc, #8]	@ (8002938 <HAL_NVIC_EnableIRQ+0x18>)
 800292e:	4083      	lsls	r3, r0
 8002930:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	e000e100 	.word	0xe000e100

0800293c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800293c:	3801      	subs	r0, #1
 800293e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002942:	d20b      	bcs.n	800295c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002944:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002948:	4a05      	ldr	r2, [pc, #20]	@ (8002960 <HAL_SYSTICK_Config+0x24>)
 800294a:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800294c:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800294e:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002950:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002954:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002956:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002958:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800295a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800295c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002964:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002968:	4b04      	ldr	r3, [pc, #16]	@ (800297c <HAL_MPU_Disable+0x18>)
 800296a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800296c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002970:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002972:	2200      	movs	r2, #0
 8002974:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002980:	4b06      	ldr	r3, [pc, #24]	@ (800299c <HAL_MPU_Enable+0x1c>)
 8002982:	f040 0001 	orr.w	r0, r0, #1
 8002986:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800298a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800298c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002990:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002992:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002996:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80029a0:	7843      	ldrb	r3, [r0, #1]
 80029a2:	4a14      	ldr	r2, [pc, #80]	@ (80029f4 <HAL_MPU_ConfigRegion+0x54>)
 80029a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80029a8:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80029b4:	6843      	ldr	r3, [r0, #4]
 80029b6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029ba:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029bc:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029be:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029c0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80029c4:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029c6:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029c8:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029ca:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029ce:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029d0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029d4:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029d6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029da:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029e0:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80029e6:	7a01      	ldrb	r1, [r0, #8]
 80029e8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029ec:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80029fc:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fe:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8002bc4 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a02:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a06:	680a      	ldr	r2, [r1, #0]
 8002a08:	fa32 f503 	lsrs.w	r5, r2, r3
 8002a0c:	d102      	bne.n	8002a14 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8002a0e:	b003      	add	sp, #12
 8002a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a14:	2501      	movs	r5, #1
 8002a16:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8002a1a:	ea18 0202 	ands.w	r2, r8, r2
 8002a1e:	f000 80bb 	beq.w	8002b98 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a22:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a24:	2703      	movs	r7, #3
 8002a26:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a2a:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a2e:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a32:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a34:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a38:	2f01      	cmp	r7, #1
 8002a3a:	d834      	bhi.n	8002aa6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8002a3c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a3e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a42:	68cf      	ldr	r7, [r1, #12]
 8002a44:	fa07 f70e 	lsl.w	r7, r7, lr
 8002a48:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002a4c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002a4e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a50:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a54:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8002a58:	409f      	lsls	r7, r3
 8002a5a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8002a5e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002a60:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a62:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a64:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a68:	688f      	ldr	r7, [r1, #8]
 8002a6a:	fa07 f70e 	lsl.w	r7, r7, lr
 8002a6e:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8002a72:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a74:	d119      	bne.n	8002aaa <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8002a76:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a7a:	f003 0a07 	and.w	sl, r3, #7
 8002a7e:	f04f 0b0f 	mov.w	fp, #15
 8002a82:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002a86:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8002a8a:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a8e:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002a92:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a96:	690f      	ldr	r7, [r1, #16]
 8002a98:	fa07 f70a 	lsl.w	r7, r7, sl
 8002a9c:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8002aa0:	f8c8 7020 	str.w	r7, [r8, #32]
 8002aa4:	e001      	b.n	8002aaa <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa6:	2d03      	cmp	r5, #3
 8002aa8:	d1da      	bne.n	8002a60 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8002aaa:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aac:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab0:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ab4:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab8:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8002abc:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002abe:	d06b      	beq.n	8002b98 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac0:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8002ac4:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ac8:	f003 0c03 	and.w	ip, r3, #3
 8002acc:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad0:	f045 0502 	orr.w	r5, r5, #2
 8002ad4:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ad8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002adc:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8002ae0:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8002ae4:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ae8:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aec:	f005 0502 	and.w	r5, r5, #2
 8002af0:	9501      	str	r5, [sp, #4]
 8002af2:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002af4:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002af6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002afa:	4d31      	ldr	r5, [pc, #196]	@ (8002bc0 <HAL_GPIO_Init+0x1c8>)
 8002afc:	42a8      	cmp	r0, r5
 8002afe:	d04d      	beq.n	8002b9c <HAL_GPIO_Init+0x1a4>
 8002b00:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002b04:	42a8      	cmp	r0, r5
 8002b06:	d04b      	beq.n	8002ba0 <HAL_GPIO_Init+0x1a8>
 8002b08:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002b0c:	42a8      	cmp	r0, r5
 8002b0e:	d049      	beq.n	8002ba4 <HAL_GPIO_Init+0x1ac>
 8002b10:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002b14:	42a8      	cmp	r0, r5
 8002b16:	d047      	beq.n	8002ba8 <HAL_GPIO_Init+0x1b0>
 8002b18:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002b1c:	42a8      	cmp	r0, r5
 8002b1e:	d045      	beq.n	8002bac <HAL_GPIO_Init+0x1b4>
 8002b20:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002b24:	42a8      	cmp	r0, r5
 8002b26:	d043      	beq.n	8002bb0 <HAL_GPIO_Init+0x1b8>
 8002b28:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002b2c:	42a8      	cmp	r0, r5
 8002b2e:	d041      	beq.n	8002bb4 <HAL_GPIO_Init+0x1bc>
 8002b30:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002b34:	42a8      	cmp	r0, r5
 8002b36:	d03f      	beq.n	8002bb8 <HAL_GPIO_Init+0x1c0>
 8002b38:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002b3c:	42a8      	cmp	r0, r5
 8002b3e:	d03d      	beq.n	8002bbc <HAL_GPIO_Init+0x1c4>
 8002b40:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002b44:	42a8      	cmp	r0, r5
 8002b46:	bf14      	ite	ne
 8002b48:	250a      	movne	r5, #10
 8002b4a:	2509      	moveq	r5, #9
 8002b4c:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b50:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b54:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b58:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8002b5a:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8002b5e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002b60:	bf0c      	ite	eq
 8002b62:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002b64:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b66:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8002b6a:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8002b6c:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8002b6e:	bf0c      	ite	eq
 8002b70:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002b72:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b74:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8002b78:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8002b7a:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8002b7e:	bf0c      	ite	eq
 8002b80:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002b82:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b84:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8002b86:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8002b8a:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8002b8e:	bf54      	ite	pl
 8002b90:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8002b92:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8002b94:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8002b98:	3301      	adds	r3, #1
 8002b9a:	e734      	b.n	8002a06 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b9c:	2500      	movs	r5, #0
 8002b9e:	e7d5      	b.n	8002b4c <HAL_GPIO_Init+0x154>
 8002ba0:	2501      	movs	r5, #1
 8002ba2:	e7d3      	b.n	8002b4c <HAL_GPIO_Init+0x154>
 8002ba4:	2502      	movs	r5, #2
 8002ba6:	e7d1      	b.n	8002b4c <HAL_GPIO_Init+0x154>
 8002ba8:	2503      	movs	r5, #3
 8002baa:	e7cf      	b.n	8002b4c <HAL_GPIO_Init+0x154>
 8002bac:	2504      	movs	r5, #4
 8002bae:	e7cd      	b.n	8002b4c <HAL_GPIO_Init+0x154>
 8002bb0:	2505      	movs	r5, #5
 8002bb2:	e7cb      	b.n	8002b4c <HAL_GPIO_Init+0x154>
 8002bb4:	2506      	movs	r5, #6
 8002bb6:	e7c9      	b.n	8002b4c <HAL_GPIO_Init+0x154>
 8002bb8:	2507      	movs	r5, #7
 8002bba:	e7c7      	b.n	8002b4c <HAL_GPIO_Init+0x154>
 8002bbc:	2508      	movs	r5, #8
 8002bbe:	e7c5      	b.n	8002b4c <HAL_GPIO_Init+0x154>
 8002bc0:	58020000 	.word	0x58020000
 8002bc4:	58024400 	.word	0x58024400

08002bc8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bc8:	b10a      	cbz	r2, 8002bce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002bca:	6181      	str	r1, [r0, #24]
  }
}
 8002bcc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002bce:	0409      	lsls	r1, r1, #16
 8002bd0:	e7fb      	b.n	8002bca <HAL_GPIO_WritePin+0x2>

08002bd2 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8002bd2:	b538      	push	{r3, r4, r5, lr}
 8002bd4:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002bd6:	f7ff fab1 	bl	800213c <HAL_GetTick>
 8002bda:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8002bdc:	2c00      	cmp	r4, #0
 8002bde:	d061      	beq.n	8002ca4 <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8002be0:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8002be2:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8002be4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8002be8:	2302      	movs	r3, #2
 8002bea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8002bee:	68d3      	ldr	r3, [r2, #12]
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	07d2      	lsls	r2, r2, #31
 8002bfc:	d448      	bmi.n	8002c90 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8002bfe:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8002c06:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	69e1      	ldr	r1, [r4, #28]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	6a21      	ldr	r1, [r4, #32]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002c16:	430a      	orrs	r2, r1
 8002c18:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	68a1      	ldr	r1, [r4, #8]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002c26:	3901      	subs	r1, #1
 8002c28:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8002c2c:	6861      	ldr	r1, [r4, #4]
 8002c2e:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8002c32:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8002c34:	d103      	bne.n	8002c3e <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8002c3c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8002c3e:	2200      	movs	r2, #0
 8002c40:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8002c42:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8002c44:	2a00      	cmp	r2, #0
 8002c46:	da04      	bge.n	8002c52 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8002c48:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8002c4a:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8002c4c:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8002c50:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8002c52:	b292      	uxth	r2, r2
 8002c54:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8002c56:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002c58:	2a00      	cmp	r2, #0
 8002c5a:	da25      	bge.n	8002ca8 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8002c5c:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8002c5e:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8002c60:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 8002c64:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002c66:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002c68:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8002c6c:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002c70:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	d019      	beq.n	8002cac <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8002c78:	b2c9      	uxtb	r1, r1
 8002c7a:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8002c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 8002c7e:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8002c80:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 8002c82:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 8002c84:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8002c86:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8002c8a:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 8002c8e:	e00a      	b.n	8002ca6 <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8002c90:	f7ff fa54 	bl	800213c <HAL_GetTick>
 8002c94:	1b40      	subs	r0, r0, r5
 8002c96:	2805      	cmp	r0, #5
 8002c98:	d9ad      	bls.n	8002bf6 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8002c9a:	2340      	movs	r3, #64	@ 0x40
 8002c9c:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 8002ca4:	2001      	movs	r0, #1
}
 8002ca6:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002ca8:	6a18      	ldr	r0, [r3, #32]
 8002caa:	e7dd      	b.n	8002c68 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8002cac:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cae:	e7e5      	b.n	8002c7c <HAL_MDMA_Init+0xaa>

08002cb0 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8002cb0:	b1d8      	cbz	r0, 8002cea <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 8002cb2:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8002cb4:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 8002cb6:	68d3      	ldr	r3, [r2, #12]
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8002cc2:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8002cc4:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8002cc6:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8002cc8:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8002cca:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8002ccc:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8002cce:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8002cd0:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8002cd2:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8002cd4:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8002cd6:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8002cd8:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8002cda:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 8002cde:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 8002ce2:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	4770      	bx	lr
    return HAL_ERROR;
 8002cea:	2001      	movs	r0, #1
}
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002cf0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002cf2:	4c10      	ldr	r4, [pc, #64]	@ (8002d34 <HAL_PWREx_ConfigSupply+0x44>)
 8002cf4:	68e3      	ldr	r3, [r4, #12]
 8002cf6:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002cfa:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002cfc:	d105      	bne.n	8002d0a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	1a18      	subs	r0, r3, r0
 8002d04:	bf18      	it	ne
 8002d06:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8002d08:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d0a:	f023 0307 	bic.w	r3, r3, #7
 8002d0e:	4318      	orrs	r0, r3
 8002d10:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8002d12:	f7ff fa13 	bl	800213c <HAL_GetTick>
 8002d16:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d18:	6863      	ldr	r3, [r4, #4]
 8002d1a:	049b      	lsls	r3, r3, #18
 8002d1c:	d501      	bpl.n	8002d22 <HAL_PWREx_ConfigSupply+0x32>
      return HAL_OK;
 8002d1e:	2000      	movs	r0, #0
 8002d20:	e7f2      	b.n	8002d08 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d22:	f7ff fa0b 	bl	800213c <HAL_GetTick>
 8002d26:	1b40      	subs	r0, r0, r5
 8002d28:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002d2c:	d9f4      	bls.n	8002d18 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8002d2e:	2001      	movs	r0, #1
 8002d30:	e7ea      	b.n	8002d08 <HAL_PWREx_ConfigSupply+0x18>
 8002d32:	bf00      	nop
 8002d34:	58024800 	.word	0x58024800

08002d38 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8002d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8002d3c:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 8002d3e:	b136      	cbz	r6, 8002d4e <QSPI_Config+0x16>
 8002d40:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 8002d44:	d003      	beq.n	8002d4e <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8002d46:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8002d48:	6804      	ldr	r4, [r0, #0]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002d4e:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002d52:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002d56:	f1ba 0f00 	cmp.w	sl, #0
 8002d5a:	d04c      	beq.n	8002df6 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002d5c:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8002d5e:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002d60:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 8002d64:	ea4a 0406 	orr.w	r4, sl, r6
 8002d68:	680b      	ldr	r3, [r1, #0]
 8002d6a:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 8002d6e:	ea44 0a02 	orr.w	sl, r4, r2
 8002d72:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002d76:	f1be 0f00 	cmp.w	lr, #0
 8002d7a:	d024      	beq.n	8002dc6 <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002d7c:	688e      	ldr	r6, [r1, #8]
 8002d7e:	ea4a 040e 	orr.w	r4, sl, lr
 8002d82:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002d84:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002d86:	b19f      	cbz	r7, 8002db0 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002d88:	433b      	orrs	r3, r7
 8002d8a:	4303      	orrs	r3, r0
 8002d8c:	68c8      	ldr	r0, [r1, #12]
 8002d8e:	ea43 0309 	orr.w	r3, r3, r9
 8002d92:	ea43 0308 	orr.w	r3, r3, r8
 8002d96:	4333      	orrs	r3, r6
 8002d98:	4303      	orrs	r3, r0
 8002d9a:	ea43 030c 	orr.w	r3, r3, ip
 8002d9e:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002da0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002da4:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002da6:	d001      	beq.n	8002dac <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002da8:	684b      	ldr	r3, [r1, #4]
 8002daa:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002db0:	4303      	orrs	r3, r0
 8002db2:	ea43 0309 	orr.w	r3, r3, r9
 8002db6:	ea43 0308 	orr.w	r3, r3, r8
 8002dba:	4333      	orrs	r3, r6
 8002dbc:	ea43 030c 	orr.w	r3, r3, ip
 8002dc0:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002dc2:	616b      	str	r3, [r5, #20]
 8002dc4:	e7f2      	b.n	8002dac <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002dc6:	b167      	cbz	r7, 8002de2 <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002dc8:	433b      	orrs	r3, r7
 8002dca:	4303      	orrs	r3, r0
 8002dcc:	68c8      	ldr	r0, [r1, #12]
 8002dce:	ea43 0309 	orr.w	r3, r3, r9
 8002dd2:	ea43 0308 	orr.w	r3, r3, r8
 8002dd6:	4303      	orrs	r3, r0
 8002dd8:	ea43 030c 	orr.w	r3, r3, ip
 8002ddc:	ea43 030a 	orr.w	r3, r3, sl
 8002de0:	e7de      	b.n	8002da0 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002de2:	4303      	orrs	r3, r0
 8002de4:	ea43 0309 	orr.w	r3, r3, r9
 8002de8:	ea43 0408 	orr.w	r4, r3, r8
 8002dec:	ea44 030c 	orr.w	r3, r4, ip
 8002df0:	ea43 030a 	orr.w	r3, r3, sl
 8002df4:	e7e5      	b.n	8002dc2 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002df6:	f1be 0f00 	cmp.w	lr, #0
 8002dfa:	d02c      	beq.n	8002e56 <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002dfc:	ea46 050e 	orr.w	r5, r6, lr
 8002e00:	688b      	ldr	r3, [r1, #8]
 8002e02:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e04:	694e      	ldr	r6, [r1, #20]
 8002e06:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002e08:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e0a:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e0e:	04b6      	lsls	r6, r6, #18
 8002e10:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e12:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002e16:	b1a7      	cbz	r7, 8002e42 <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e18:	433b      	orrs	r3, r7
 8002e1a:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002e1c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e20:	ea43 0308 	orr.w	r3, r3, r8
 8002e24:	ea43 030e 	orr.w	r3, r3, lr
 8002e28:	ea43 030c 	orr.w	r3, r3, ip
 8002e2c:	ea43 0300 	orr.w	r3, r3, r0
 8002e30:	ea43 0306 	orr.w	r3, r3, r6
 8002e34:	ea43 0305 	orr.w	r3, r3, r5
 8002e38:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002e3a:	d0b7      	beq.n	8002dac <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002e3c:	684b      	ldr	r3, [r1, #4]
 8002e3e:	61a3      	str	r3, [r4, #24]
 8002e40:	e7b4      	b.n	8002dac <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e42:	ea43 0308 	orr.w	r3, r3, r8
 8002e46:	ea43 030e 	orr.w	r3, r3, lr
 8002e4a:	ea43 030c 	orr.w	r3, r3, ip
 8002e4e:	4333      	orrs	r3, r6
 8002e50:	432b      	orrs	r3, r5
 8002e52:	6163      	str	r3, [r4, #20]
 8002e54:	e7aa      	b.n	8002dac <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002e56:	b1d7      	cbz	r7, 8002e8e <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e58:	ea46 0307 	orr.w	r3, r6, r7
 8002e5c:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8002e5e:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002e60:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e64:	ea43 0302 	orr.w	r3, r3, r2
 8002e68:	ea43 0304 	orr.w	r3, r3, r4
 8002e6c:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 8002e6e:	ea43 0304 	orr.w	r3, r3, r4
 8002e72:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8002e74:	ea43 0304 	orr.w	r3, r3, r4
 8002e78:	68cc      	ldr	r4, [r1, #12]
 8002e7a:	ea43 0304 	orr.w	r3, r3, r4
 8002e7e:	694c      	ldr	r4, [r1, #20]
 8002e80:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8002e84:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002e86:	d091      	beq.n	8002dac <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002e88:	684b      	ldr	r3, [r1, #4]
 8002e8a:	6183      	str	r3, [r0, #24]
 8002e8c:	e78e      	b.n	8002dac <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8002e8e:	2e00      	cmp	r6, #0
 8002e90:	d08c      	beq.n	8002dac <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e92:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8002e94:	6800      	ldr	r0, [r0, #0]
 8002e96:	4333      	orrs	r3, r6
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	694a      	ldr	r2, [r1, #20]
 8002ea4:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8002ea8:	6143      	str	r3, [r0, #20]
}
 8002eaa:	e77f      	b.n	8002dac <QSPI_Config+0x74>

08002eac <QSPI_WaitFlagStateUntilTimeout>:
{
 8002eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eb0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	460e      	mov	r6, r1
 8002eb8:	4615      	mov	r5, r2
 8002eba:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ebc:	6822      	ldr	r2, [r4, #0]
 8002ebe:	6893      	ldr	r3, [r2, #8]
 8002ec0:	4233      	tst	r3, r6
 8002ec2:	bf14      	ite	ne
 8002ec4:	2301      	movne	r3, #1
 8002ec6:	2300      	moveq	r3, #0
 8002ec8:	42ab      	cmp	r3, r5
 8002eca:	d101      	bne.n	8002ed0 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8002ecc:	2000      	movs	r0, #0
 8002ece:	e012      	b.n	8002ef6 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8002ed0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002ed4:	d0f3      	beq.n	8002ebe <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed6:	f7ff f931 	bl	800213c <HAL_GetTick>
 8002eda:	1bc0      	subs	r0, r0, r7
 8002edc:	4540      	cmp	r0, r8
 8002ede:	d802      	bhi.n	8002ee6 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8002ee0:	f1b8 0f00 	cmp.w	r8, #0
 8002ee4:	d1ea      	bne.n	8002ebc <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002ee6:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002ee8:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002eea:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002eee:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8002ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002efa <HAL_QSPI_MspInit>:
}
 8002efa:	4770      	bx	lr

08002efc <HAL_QSPI_Init>:
{
 8002efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002efe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002f00:	f7ff f91c 	bl	800213c <HAL_GetTick>
 8002f04:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8002f06:	2c00      	cmp	r4, #0
 8002f08:	d03f      	beq.n	8002f8a <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002f0a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002f0e:	b92b      	cbnz	r3, 8002f1c <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 8002f10:	4620      	mov	r0, r4
 8002f12:	f7ff fff2 	bl	8002efa <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8002f16:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f1a:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002f1c:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002f1e:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002f20:	68a3      	ldr	r3, [r4, #8]
 8002f22:	680a      	ldr	r2, [r1, #0]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8002f2a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002f2e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002f30:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002f32:	2200      	movs	r2, #0
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	2120      	movs	r1, #32
 8002f38:	462b      	mov	r3, r5
 8002f3a:	f7ff ffb7 	bl	8002eac <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8002f3e:	bb10      	cbnz	r0, 8002f86 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002f40:	6822      	ldr	r2, [r4, #0]
 8002f42:	69e5      	ldr	r5, [r4, #28]
 8002f44:	68e3      	ldr	r3, [r4, #12]
 8002f46:	6811      	ldr	r1, [r2, #0]
 8002f48:	432b      	orrs	r3, r5
 8002f4a:	6a25      	ldr	r5, [r4, #32]
 8002f4c:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8002f50:	432b      	orrs	r3, r5
 8002f52:	6865      	ldr	r5, [r4, #4]
 8002f54:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 8002f58:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002f60:	6855      	ldr	r5, [r2, #4]
 8002f62:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8002f66:	430b      	orrs	r3, r1
 8002f68:	6921      	ldr	r1, [r4, #16]
 8002f6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002f6e:	4908      	ldr	r1, [pc, #32]	@ (8002f90 <HAL_QSPI_Init+0x94>)
 8002f70:	4029      	ands	r1, r5
 8002f72:	430b      	orrs	r3, r1
 8002f74:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8002f76:	6813      	ldr	r3, [r2, #0]
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8002f7e:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002f80:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8002f82:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 8002f86:	b003      	add	sp, #12
 8002f88:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	e7fb      	b.n	8002f86 <HAL_QSPI_Init+0x8a>
 8002f8e:	bf00      	nop
 8002f90:	ffe0f8fe 	.word	0xffe0f8fe

08002f94 <HAL_QSPI_Command>:
{
 8002f94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f98:	4604      	mov	r4, r0
 8002f9a:	468a      	mov	sl, r1
 8002f9c:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002f9e:	f7ff f8cd 	bl	800213c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8002fa2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8002fa6:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d036      	beq.n	800301a <HAL_QSPI_Command+0x86>
 8002fac:	2301      	movs	r3, #1
 8002fae:	2602      	movs	r6, #2
 8002fb0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002fb4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	fa5f f983 	uxtb.w	r9, r3
 8002fbe:	d128      	bne.n	8003012 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002fc0:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2120      	movs	r1, #32
 8002fc6:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002fc8:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8002fca:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002fce:	f8cd 8000 	str.w	r8, [sp]
 8002fd2:	f7ff ff6b 	bl	8002eac <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8002fd6:	4605      	mov	r5, r0
 8002fd8:	b9a0      	cbnz	r0, 8003004 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002fda:	4602      	mov	r2, r0
 8002fdc:	4651      	mov	r1, sl
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f7ff feaa 	bl	8002d38 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8002fe4:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8002fe8:	b953      	cbnz	r3, 8003000 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002fea:	463b      	mov	r3, r7
 8002fec:	464a      	mov	r2, r9
 8002fee:	4631      	mov	r1, r6
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	f8cd 8000 	str.w	r8, [sp]
 8002ff6:	f7ff ff59 	bl	8002eac <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8002ffa:	b960      	cbnz	r0, 8003016 <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8003000:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8003004:	2300      	movs	r3, #0
 8003006:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800300a:	4628      	mov	r0, r5
 800300c:	b002      	add	sp, #8
 800300e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 8003012:	4635      	mov	r5, r6
 8003014:	e7f6      	b.n	8003004 <HAL_QSPI_Command+0x70>
 8003016:	4605      	mov	r5, r0
 8003018:	e7f4      	b.n	8003004 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800301a:	2502      	movs	r5, #2
 800301c:	e7f5      	b.n	800300a <HAL_QSPI_Command+0x76>

0800301e <HAL_QSPI_Transmit>:
{
 800301e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003022:	4604      	mov	r4, r0
 8003024:	4688      	mov	r8, r1
 8003026:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8003028:	f7ff f888 	bl	800213c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800302c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8003030:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003032:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8003034:	2b01      	cmp	r3, #1
 8003036:	d04c      	beq.n	80030d2 <HAL_QSPI_Transmit+0xb4>
 8003038:	2301      	movs	r3, #1
 800303a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800303e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8003042:	2b01      	cmp	r3, #1
 8003044:	b2d8      	uxtb	r0, r3
 8003046:	d142      	bne.n	80030ce <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003048:	2300      	movs	r3, #0
 800304a:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800304c:	f1b8 0f00 	cmp.w	r8, #0
 8003050:	d038      	beq.n	80030c4 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8003052:	2312      	movs	r3, #18
 8003054:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003058:	692b      	ldr	r3, [r5, #16]
 800305a:	3301      	adds	r3, #1
 800305c:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800305e:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8003060:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003064:	3301      	adds	r3, #1
 8003066:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003068:	696b      	ldr	r3, [r5, #20]
 800306a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800306e:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8003070:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003072:	b99b      	cbnz	r3, 800309c <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003074:	4633      	mov	r3, r6
 8003076:	2201      	movs	r2, #1
 8003078:	2102      	movs	r1, #2
 800307a:	4620      	mov	r0, r4
 800307c:	9700      	str	r7, [sp, #0]
 800307e:	f7ff ff15 	bl	8002eac <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8003082:	b910      	cbnz	r0, 800308a <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003084:	6823      	ldr	r3, [r4, #0]
 8003086:	2202      	movs	r2, #2
 8003088:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800308a:	2301      	movs	r3, #1
 800308c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8003090:	2300      	movs	r3, #0
 8003092:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8003096:	b002      	add	sp, #8
 8003098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800309c:	4633      	mov	r3, r6
 800309e:	2201      	movs	r2, #1
 80030a0:	2104      	movs	r1, #4
 80030a2:	4620      	mov	r0, r4
 80030a4:	9700      	str	r7, [sp, #0]
 80030a6:	f7ff ff01 	bl	8002eac <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d1ed      	bne.n	800308a <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80030ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 80030b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80030b8:	3301      	adds	r3, #1
 80030ba:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 80030bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80030be:	3b01      	subs	r3, #1
 80030c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030c2:	e7d5      	b.n	8003070 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80030c4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80030c6:	f043 0308 	orr.w	r3, r3, #8
 80030ca:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 80030cc:	e7e0      	b.n	8003090 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 80030ce:	2002      	movs	r0, #2
 80030d0:	e7de      	b.n	8003090 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 80030d2:	2002      	movs	r0, #2
 80030d4:	e7df      	b.n	8003096 <HAL_QSPI_Transmit+0x78>

080030d6 <HAL_QSPI_Receive>:
{
 80030d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80030da:	4604      	mov	r4, r0
 80030dc:	4617      	mov	r7, r2
 80030de:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f7ff f82c 	bl	800213c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80030e4:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 80030e6:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80030e8:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 80030ea:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d04f      	beq.n	8003192 <HAL_QSPI_Receive+0xbc>
 80030f2:	2301      	movs	r3, #1
 80030f4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80030f8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	b2d8      	uxtb	r0, r3
 8003100:	d145      	bne.n	800318e <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003102:	2300      	movs	r3, #0
 8003104:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8003106:	f1b8 0f00 	cmp.w	r8, #0
 800310a:	d03b      	beq.n	8003184 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800310c:	2322      	movs	r3, #34	@ 0x22
 800310e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003112:	692b      	ldr	r3, [r5, #16]
 8003114:	3301      	adds	r3, #1
 8003116:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003118:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800311a:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800311e:	3301      	adds	r3, #1
 8003120:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003122:	6969      	ldr	r1, [r5, #20]
 8003124:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 8003128:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800312c:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800312e:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8003130:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003132:	b99b      	cbnz	r3, 800315c <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003134:	4633      	mov	r3, r6
 8003136:	2201      	movs	r2, #1
 8003138:	2102      	movs	r1, #2
 800313a:	4620      	mov	r0, r4
 800313c:	9700      	str	r7, [sp, #0]
 800313e:	f7ff feb5 	bl	8002eac <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8003142:	b910      	cbnz	r0, 800314a <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	2202      	movs	r2, #2
 8003148:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800314a:	2301      	movs	r3, #1
 800314c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8003150:	2300      	movs	r3, #0
 8003152:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8003156:	b002      	add	sp, #8
 8003158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800315c:	4633      	mov	r3, r6
 800315e:	2201      	movs	r2, #1
 8003160:	2106      	movs	r1, #6
 8003162:	4620      	mov	r0, r4
 8003164:	9700      	str	r7, [sp, #0]
 8003166:	f7ff fea1 	bl	8002eac <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800316a:	2800      	cmp	r0, #0
 800316c:	d1ed      	bne.n	800314a <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800316e:	f895 2020 	ldrb.w	r2, [r5, #32]
 8003172:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003174:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8003176:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003178:	3301      	adds	r3, #1
 800317a:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800317c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800317e:	3b01      	subs	r3, #1
 8003180:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003182:	e7d5      	b.n	8003130 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003184:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003186:	f043 0308 	orr.w	r3, r3, #8
 800318a:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800318c:	e7e0      	b.n	8003150 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800318e:	2002      	movs	r0, #2
 8003190:	e7de      	b.n	8003150 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 8003192:	2002      	movs	r0, #2
 8003194:	e7df      	b.n	8003156 <HAL_QSPI_Receive+0x80>

08003196 <HAL_QSPI_AutoPolling>:
{
 8003196:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800319a:	4604      	mov	r4, r0
 800319c:	461f      	mov	r7, r3
 800319e:	4689      	mov	r9, r1
 80031a0:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 80031a2:	f7fe ffcb 	bl	800213c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80031a6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80031aa:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d041      	beq.n	8003234 <HAL_QSPI_AutoPolling+0x9e>
 80031b0:	2301      	movs	r3, #1
 80031b2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80031b6:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	fa5f f883 	uxtb.w	r8, r3
 80031c0:	d136      	bne.n	8003230 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80031c2:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80031c4:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80031c6:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80031c8:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80031ca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80031ce:	4603      	mov	r3, r0
 80031d0:	9700      	str	r7, [sp, #0]
 80031d2:	4620      	mov	r0, r4
 80031d4:	f7ff fe6a 	bl	8002eac <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80031d8:	bb20      	cbnz	r0, 8003224 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80031da:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80031dc:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80031de:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80031e0:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80031e2:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80031e4:	686b      	ldr	r3, [r5, #4]
 80031e6:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80031e8:	68ab      	ldr	r3, [r5, #8]
 80031ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80031ec:	6813      	ldr	r3, [r2, #0]
 80031ee:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80031f2:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80031f4:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80031f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031fa:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80031fc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 8003200:	68eb      	ldr	r3, [r5, #12]
 8003202:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003206:	f7ff fd97 	bl	8002d38 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800320a:	4633      	mov	r3, r6
 800320c:	4642      	mov	r2, r8
 800320e:	2108      	movs	r1, #8
 8003210:	4620      	mov	r0, r4
 8003212:	9700      	str	r7, [sp, #0]
 8003214:	f7ff fe4a 	bl	8002eac <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8003218:	b920      	cbnz	r0, 8003224 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	2208      	movs	r2, #8
 800321e:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8003220:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8003224:	2300      	movs	r3, #0
 8003226:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800322a:	b003      	add	sp, #12
 800322c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8003230:	2002      	movs	r0, #2
 8003232:	e7f7      	b.n	8003224 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 8003234:	2002      	movs	r0, #2
 8003236:	e7f8      	b.n	800322a <HAL_QSPI_AutoPolling+0x94>

08003238 <HAL_QSPI_MemoryMapped>:
{
 8003238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800323a:	4604      	mov	r4, r0
 800323c:	4616      	mov	r6, r2
 800323e:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8003240:	f7fe ff7c 	bl	800213c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8003244:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8003248:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800324a:	2a01      	cmp	r2, #1
 800324c:	d033      	beq.n	80032b6 <HAL_QSPI_MemoryMapped+0x7e>
 800324e:	2201      	movs	r2, #1
 8003250:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003254:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8003258:	2a01      	cmp	r2, #1
 800325a:	d12a      	bne.n	80032b2 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800325c:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800325e:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003260:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003262:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8003264:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003268:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800326a:	9100      	str	r1, [sp, #0]
 800326c:	2120      	movs	r1, #32
 800326e:	f7ff fe1d 	bl	8002eac <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8003272:	4605      	mov	r5, r0
 8003274:	b9b8      	cbnz	r0, 80032a6 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	6872      	ldr	r2, [r6, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800327c:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800327e:	f020 0008 	bic.w	r0, r0, #8
 8003282:	ea40 0002 	orr.w	r0, r0, r2
 8003286:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8003288:	d107      	bne.n	800329a <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800328a:	6832      	ldr	r2, [r6, #0]
 800328c:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800328e:	2210      	movs	r2, #16
 8003290:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003298:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800329a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800329e:	4639      	mov	r1, r7
 80032a0:	4620      	mov	r0, r4
 80032a2:	f7ff fd49 	bl	8002d38 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 80032a6:	2300      	movs	r3, #0
 80032a8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80032ac:	4628      	mov	r0, r5
 80032ae:	b003      	add	sp, #12
 80032b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 80032b2:	2502      	movs	r5, #2
 80032b4:	e7f7      	b.n	80032a6 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 80032b6:	2502      	movs	r5, #2
 80032b8:	e7f8      	b.n	80032ac <HAL_QSPI_MemoryMapped+0x74>
	...

080032bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032be:	4604      	mov	r4, r0
 80032c0:	2800      	cmp	r0, #0
 80032c2:	d074      	beq.n	80033ae <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c4:	6803      	ldr	r3, [r0, #0]
 80032c6:	07d8      	lsls	r0, r3, #31
 80032c8:	d45e      	bmi.n	8003388 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	0799      	lsls	r1, r3, #30
 80032ce:	f100 80ad 	bmi.w	800342c <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032d2:	6823      	ldr	r3, [r4, #0]
 80032d4:	06da      	lsls	r2, r3, #27
 80032d6:	d527      	bpl.n	8003328 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032d8:	4a9c      	ldr	r2, [pc, #624]	@ (800354c <HAL_RCC_OscConfig+0x290>)
 80032da:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d007      	beq.n	80032f6 <HAL_RCC_OscConfig+0x3a>
 80032e6:	2b18      	cmp	r3, #24
 80032e8:	f040 8103 	bne.w	80034f2 <HAL_RCC_OscConfig+0x236>
 80032ec:	f001 0303 	and.w	r3, r1, #3
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	f040 80fe 	bne.w	80034f2 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032f6:	6813      	ldr	r3, [r2, #0]
 80032f8:	05db      	lsls	r3, r3, #23
 80032fa:	d502      	bpl.n	8003302 <HAL_RCC_OscConfig+0x46>
 80032fc:	69e3      	ldr	r3, [r4, #28]
 80032fe:	2b80      	cmp	r3, #128	@ 0x80
 8003300:	d155      	bne.n	80033ae <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003302:	f7fe ff33 	bl	800216c <HAL_GetREVID>
 8003306:	f241 0303 	movw	r3, #4099	@ 0x1003
 800330a:	6a21      	ldr	r1, [r4, #32]
 800330c:	4298      	cmp	r0, r3
 800330e:	4b8f      	ldr	r3, [pc, #572]	@ (800354c <HAL_RCC_OscConfig+0x290>)
 8003310:	f200 80e8 	bhi.w	80034e4 <HAL_RCC_OscConfig+0x228>
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	2920      	cmp	r1, #32
 8003318:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800331c:	bf0c      	ite	eq
 800331e:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 8003322:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8003326:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	0719      	lsls	r1, r3, #28
 800332c:	f100 8123 	bmi.w	8003576 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	069a      	lsls	r2, r3, #26
 8003334:	f100 8144 	bmi.w	80035c0 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003338:	6823      	ldr	r3, [r4, #0]
 800333a:	075d      	lsls	r5, r3, #29
 800333c:	d51e      	bpl.n	800337c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800333e:	4d84      	ldr	r5, [pc, #528]	@ (8003550 <HAL_RCC_OscConfig+0x294>)
 8003340:	682b      	ldr	r3, [r5, #0]
 8003342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003346:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003348:	f7fe fef8 	bl	800213c <HAL_GetTick>
 800334c:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800334e:	682b      	ldr	r3, [r5, #0]
 8003350:	05da      	lsls	r2, r3, #23
 8003352:	f140 815a 	bpl.w	800360a <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003356:	68a3      	ldr	r3, [r4, #8]
 8003358:	4d7c      	ldr	r5, [pc, #496]	@ (800354c <HAL_RCC_OscConfig+0x290>)
 800335a:	2b01      	cmp	r3, #1
 800335c:	f040 815c 	bne.w	8003618 <HAL_RCC_OscConfig+0x35c>
 8003360:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800336c:	f7fe fee6 	bl	800213c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003370:	4e76      	ldr	r6, [pc, #472]	@ (800354c <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8003372:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003374:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003376:	079b      	lsls	r3, r3, #30
 8003378:	f140 8174 	bpl.w	8003664 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800337e:	2900      	cmp	r1, #0
 8003380:	f040 8177 	bne.w	8003672 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8003384:	2000      	movs	r0, #0
 8003386:	e02b      	b.n	80033e0 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003388:	4a70      	ldr	r2, [pc, #448]	@ (800354c <HAL_RCC_OscConfig+0x290>)
 800338a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800338c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800338e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003392:	2b10      	cmp	r3, #16
 8003394:	d005      	beq.n	80033a2 <HAL_RCC_OscConfig+0xe6>
 8003396:	2b18      	cmp	r3, #24
 8003398:	d10b      	bne.n	80033b2 <HAL_RCC_OscConfig+0xf6>
 800339a:	f001 0303 	and.w	r3, r1, #3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d107      	bne.n	80033b2 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a2:	6813      	ldr	r3, [r2, #0]
 80033a4:	039a      	lsls	r2, r3, #14
 80033a6:	d590      	bpl.n	80032ca <HAL_RCC_OscConfig+0xe>
 80033a8:	6863      	ldr	r3, [r4, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d18d      	bne.n	80032ca <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80033ae:	2001      	movs	r0, #1
 80033b0:	e016      	b.n	80033e0 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b2:	6863      	ldr	r3, [r4, #4]
 80033b4:	4d65      	ldr	r5, [pc, #404]	@ (800354c <HAL_RCC_OscConfig+0x290>)
 80033b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ba:	d112      	bne.n	80033e2 <HAL_RCC_OscConfig+0x126>
 80033bc:	682b      	ldr	r3, [r5, #0]
 80033be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80033c4:	f7fe feba 	bl	800213c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033c8:	4e60      	ldr	r6, [pc, #384]	@ (800354c <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80033ca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033cc:	6833      	ldr	r3, [r6, #0]
 80033ce:	039b      	lsls	r3, r3, #14
 80033d0:	f53f af7b 	bmi.w	80032ca <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d4:	f7fe feb2 	bl	800213c <HAL_GetTick>
 80033d8:	1b40      	subs	r0, r0, r5
 80033da:	2864      	cmp	r0, #100	@ 0x64
 80033dc:	d9f6      	bls.n	80033cc <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 80033de:	2003      	movs	r0, #3
}
 80033e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e2:	b9a3      	cbnz	r3, 800340e <HAL_RCC_OscConfig+0x152>
 80033e4:	682b      	ldr	r3, [r5, #0]
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ea:	602b      	str	r3, [r5, #0]
 80033ec:	682b      	ldr	r3, [r5, #0]
 80033ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80033f4:	f7fe fea2 	bl	800213c <HAL_GetTick>
 80033f8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033fa:	682b      	ldr	r3, [r5, #0]
 80033fc:	039f      	lsls	r7, r3, #14
 80033fe:	f57f af64 	bpl.w	80032ca <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003402:	f7fe fe9b 	bl	800213c <HAL_GetTick>
 8003406:	1b80      	subs	r0, r0, r6
 8003408:	2864      	cmp	r0, #100	@ 0x64
 800340a:	d9f6      	bls.n	80033fa <HAL_RCC_OscConfig+0x13e>
 800340c:	e7e7      	b.n	80033de <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800340e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003412:	682b      	ldr	r3, [r5, #0]
 8003414:	d103      	bne.n	800341e <HAL_RCC_OscConfig+0x162>
 8003416:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800341a:	602b      	str	r3, [r5, #0]
 800341c:	e7ce      	b.n	80033bc <HAL_RCC_OscConfig+0x100>
 800341e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003422:	602b      	str	r3, [r5, #0]
 8003424:	682b      	ldr	r3, [r5, #0]
 8003426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800342a:	e7ca      	b.n	80033c2 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800342c:	4947      	ldr	r1, [pc, #284]	@ (800354c <HAL_RCC_OscConfig+0x290>)
 800342e:	68e2      	ldr	r2, [r4, #12]
 8003430:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003432:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003434:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8003438:	d003      	beq.n	8003442 <HAL_RCC_OscConfig+0x186>
 800343a:	2b18      	cmp	r3, #24
 800343c:	d12a      	bne.n	8003494 <HAL_RCC_OscConfig+0x1d8>
 800343e:	0780      	lsls	r0, r0, #30
 8003440:	d128      	bne.n	8003494 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003442:	680b      	ldr	r3, [r1, #0]
 8003444:	075b      	lsls	r3, r3, #29
 8003446:	d501      	bpl.n	800344c <HAL_RCC_OscConfig+0x190>
 8003448:	2a00      	cmp	r2, #0
 800344a:	d0b0      	beq.n	80033ae <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800344c:	4d3f      	ldr	r5, [pc, #252]	@ (800354c <HAL_RCC_OscConfig+0x290>)
 800344e:	682b      	ldr	r3, [r5, #0]
 8003450:	f023 0319 	bic.w	r3, r3, #25
 8003454:	4313      	orrs	r3, r2
 8003456:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003458:	f7fe fe70 	bl	800213c <HAL_GetTick>
 800345c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800345e:	682b      	ldr	r3, [r5, #0]
 8003460:	075f      	lsls	r7, r3, #29
 8003462:	d511      	bpl.n	8003488 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003464:	f7fe fe82 	bl	800216c <HAL_GetREVID>
 8003468:	f241 0303 	movw	r3, #4099	@ 0x1003
 800346c:	6922      	ldr	r2, [r4, #16]
 800346e:	4298      	cmp	r0, r3
 8003470:	686b      	ldr	r3, [r5, #4]
 8003472:	d822      	bhi.n	80034ba <HAL_RCC_OscConfig+0x1fe>
 8003474:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003478:	2a40      	cmp	r2, #64	@ 0x40
 800347a:	bf0c      	ite	eq
 800347c:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8003480:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8003484:	606b      	str	r3, [r5, #4]
 8003486:	e724      	b.n	80032d2 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003488:	f7fe fe58 	bl	800213c <HAL_GetTick>
 800348c:	1b80      	subs	r0, r0, r6
 800348e:	2802      	cmp	r0, #2
 8003490:	d9e5      	bls.n	800345e <HAL_RCC_OscConfig+0x1a2>
 8003492:	e7a4      	b.n	80033de <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003494:	4d2d      	ldr	r5, [pc, #180]	@ (800354c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003496:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003498:	b1a2      	cbz	r2, 80034c4 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800349a:	f023 0319 	bic.w	r3, r3, #25
 800349e:	4313      	orrs	r3, r2
 80034a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80034a2:	f7fe fe4b 	bl	800213c <HAL_GetTick>
 80034a6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034a8:	682b      	ldr	r3, [r5, #0]
 80034aa:	0758      	lsls	r0, r3, #29
 80034ac:	d4da      	bmi.n	8003464 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ae:	f7fe fe45 	bl	800213c <HAL_GetTick>
 80034b2:	1b80      	subs	r0, r0, r6
 80034b4:	2802      	cmp	r0, #2
 80034b6:	d9f7      	bls.n	80034a8 <HAL_RCC_OscConfig+0x1ec>
 80034b8:	e791      	b.n	80033de <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ba:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80034be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80034c2:	e7df      	b.n	8003484 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80034ca:	f7fe fe37 	bl	800213c <HAL_GetTick>
 80034ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034d0:	682b      	ldr	r3, [r5, #0]
 80034d2:	0759      	lsls	r1, r3, #29
 80034d4:	f57f aefd 	bpl.w	80032d2 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d8:	f7fe fe30 	bl	800213c <HAL_GetTick>
 80034dc:	1b80      	subs	r0, r0, r6
 80034de:	2802      	cmp	r0, #2
 80034e0:	d9f6      	bls.n	80034d0 <HAL_RCC_OscConfig+0x214>
 80034e2:	e77c      	b.n	80033de <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 80034ea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80034ee:	60da      	str	r2, [r3, #12]
 80034f0:	e71a      	b.n	8003328 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80034f2:	69e3      	ldr	r3, [r4, #28]
 80034f4:	4d15      	ldr	r5, [pc, #84]	@ (800354c <HAL_RCC_OscConfig+0x290>)
 80034f6:	b36b      	cbz	r3, 8003554 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003500:	f7fe fe1c 	bl	800213c <HAL_GetTick>
 8003504:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003506:	682b      	ldr	r3, [r5, #0]
 8003508:	05df      	lsls	r7, r3, #23
 800350a:	d511      	bpl.n	8003530 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800350c:	f7fe fe2e 	bl	800216c <HAL_GetREVID>
 8003510:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003514:	6a22      	ldr	r2, [r4, #32]
 8003516:	4298      	cmp	r0, r3
 8003518:	d810      	bhi.n	800353c <HAL_RCC_OscConfig+0x280>
 800351a:	686b      	ldr	r3, [r5, #4]
 800351c:	2a20      	cmp	r2, #32
 800351e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003522:	bf0c      	ite	eq
 8003524:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8003528:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800352c:	606b      	str	r3, [r5, #4]
 800352e:	e6fb      	b.n	8003328 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003530:	f7fe fe04 	bl	800213c <HAL_GetTick>
 8003534:	1b80      	subs	r0, r0, r6
 8003536:	2802      	cmp	r0, #2
 8003538:	d9e5      	bls.n	8003506 <HAL_RCC_OscConfig+0x24a>
 800353a:	e750      	b.n	80033de <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800353c:	68eb      	ldr	r3, [r5, #12]
 800353e:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003542:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003546:	60eb      	str	r3, [r5, #12]
 8003548:	e6ee      	b.n	8003328 <HAL_RCC_OscConfig+0x6c>
 800354a:	bf00      	nop
 800354c:	58024400 	.word	0x58024400
 8003550:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8003554:	682b      	ldr	r3, [r5, #0]
 8003556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800355a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800355c:	f7fe fdee 	bl	800213c <HAL_GetTick>
 8003560:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003562:	682b      	ldr	r3, [r5, #0]
 8003564:	05d8      	lsls	r0, r3, #23
 8003566:	f57f aedf 	bpl.w	8003328 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800356a:	f7fe fde7 	bl	800213c <HAL_GetTick>
 800356e:	1b80      	subs	r0, r0, r6
 8003570:	2802      	cmp	r0, #2
 8003572:	d9f6      	bls.n	8003562 <HAL_RCC_OscConfig+0x2a6>
 8003574:	e733      	b.n	80033de <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003576:	6963      	ldr	r3, [r4, #20]
 8003578:	4da5      	ldr	r5, [pc, #660]	@ (8003810 <HAL_RCC_OscConfig+0x554>)
 800357a:	b183      	cbz	r3, 800359e <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800357c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003584:	f7fe fdda 	bl	800213c <HAL_GetTick>
 8003588:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800358a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800358c:	079b      	lsls	r3, r3, #30
 800358e:	f53f aecf 	bmi.w	8003330 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003592:	f7fe fdd3 	bl	800213c <HAL_GetTick>
 8003596:	1b80      	subs	r0, r0, r6
 8003598:	2802      	cmp	r0, #2
 800359a:	d9f6      	bls.n	800358a <HAL_RCC_OscConfig+0x2ce>
 800359c:	e71f      	b.n	80033de <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800359e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80035a6:	f7fe fdc9 	bl	800213c <HAL_GetTick>
 80035aa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035ac:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80035ae:	079f      	lsls	r7, r3, #30
 80035b0:	f57f aebe 	bpl.w	8003330 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b4:	f7fe fdc2 	bl	800213c <HAL_GetTick>
 80035b8:	1b80      	subs	r0, r0, r6
 80035ba:	2802      	cmp	r0, #2
 80035bc:	d9f6      	bls.n	80035ac <HAL_RCC_OscConfig+0x2f0>
 80035be:	e70e      	b.n	80033de <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80035c0:	69a3      	ldr	r3, [r4, #24]
 80035c2:	4d93      	ldr	r5, [pc, #588]	@ (8003810 <HAL_RCC_OscConfig+0x554>)
 80035c4:	b183      	cbz	r3, 80035e8 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 80035c6:	682b      	ldr	r3, [r5, #0]
 80035c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035cc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80035ce:	f7fe fdb5 	bl	800213c <HAL_GetTick>
 80035d2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035d4:	682b      	ldr	r3, [r5, #0]
 80035d6:	0498      	lsls	r0, r3, #18
 80035d8:	f53f aeae 	bmi.w	8003338 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035dc:	f7fe fdae 	bl	800213c <HAL_GetTick>
 80035e0:	1b80      	subs	r0, r0, r6
 80035e2:	2802      	cmp	r0, #2
 80035e4:	d9f6      	bls.n	80035d4 <HAL_RCC_OscConfig+0x318>
 80035e6:	e6fa      	b.n	80033de <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 80035e8:	682b      	ldr	r3, [r5, #0]
 80035ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035ee:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80035f0:	f7fe fda4 	bl	800213c <HAL_GetTick>
 80035f4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035f6:	682b      	ldr	r3, [r5, #0]
 80035f8:	0499      	lsls	r1, r3, #18
 80035fa:	f57f ae9d 	bpl.w	8003338 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035fe:	f7fe fd9d 	bl	800213c <HAL_GetTick>
 8003602:	1b80      	subs	r0, r0, r6
 8003604:	2802      	cmp	r0, #2
 8003606:	d9f6      	bls.n	80035f6 <HAL_RCC_OscConfig+0x33a>
 8003608:	e6e9      	b.n	80033de <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360a:	f7fe fd97 	bl	800213c <HAL_GetTick>
 800360e:	1b80      	subs	r0, r0, r6
 8003610:	2864      	cmp	r0, #100	@ 0x64
 8003612:	f67f ae9c 	bls.w	800334e <HAL_RCC_OscConfig+0x92>
 8003616:	e6e2      	b.n	80033de <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003618:	b9b3      	cbnz	r3, 8003648 <HAL_RCC_OscConfig+0x38c>
 800361a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361c:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	672b      	str	r3, [r5, #112]	@ 0x70
 8003626:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003628:	f023 0304 	bic.w	r3, r3, #4
 800362c:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800362e:	f7fe fd85 	bl	800213c <HAL_GetTick>
 8003632:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003634:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003636:	0798      	lsls	r0, r3, #30
 8003638:	f57f aea0 	bpl.w	800337c <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363c:	f7fe fd7e 	bl	800213c <HAL_GetTick>
 8003640:	1b80      	subs	r0, r0, r6
 8003642:	42b8      	cmp	r0, r7
 8003644:	d9f6      	bls.n	8003634 <HAL_RCC_OscConfig+0x378>
 8003646:	e6ca      	b.n	80033de <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003648:	2b05      	cmp	r3, #5
 800364a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800364c:	d103      	bne.n	8003656 <HAL_RCC_OscConfig+0x39a>
 800364e:	f043 0304 	orr.w	r3, r3, #4
 8003652:	672b      	str	r3, [r5, #112]	@ 0x70
 8003654:	e684      	b.n	8003360 <HAL_RCC_OscConfig+0xa4>
 8003656:	f023 0301 	bic.w	r3, r3, #1
 800365a:	672b      	str	r3, [r5, #112]	@ 0x70
 800365c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800365e:	f023 0304 	bic.w	r3, r3, #4
 8003662:	e680      	b.n	8003366 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003664:	f7fe fd6a 	bl	800213c <HAL_GetTick>
 8003668:	1b40      	subs	r0, r0, r5
 800366a:	42b8      	cmp	r0, r7
 800366c:	f67f ae82 	bls.w	8003374 <HAL_RCC_OscConfig+0xb8>
 8003670:	e6b5      	b.n	80033de <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003672:	4d67      	ldr	r5, [pc, #412]	@ (8003810 <HAL_RCC_OscConfig+0x554>)
 8003674:	692b      	ldr	r3, [r5, #16]
 8003676:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800367a:	2b18      	cmp	r3, #24
 800367c:	d07a      	beq.n	8003774 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800367e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003680:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 8003682:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003686:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003688:	d167      	bne.n	800375a <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 800368a:	f7fe fd57 	bl	800213c <HAL_GetTick>
 800368e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003690:	682b      	ldr	r3, [r5, #0]
 8003692:	0199      	lsls	r1, r3, #6
 8003694:	d45b      	bmi.n	800374e <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003696:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003698:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800369a:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800369e:	f023 0303 	bic.w	r3, r3, #3
 80036a2:	4313      	orrs	r3, r2
 80036a4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80036a6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80036aa:	62ab      	str	r3, [r5, #40]	@ 0x28
 80036ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80036ae:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80036b0:	3b01      	subs	r3, #1
 80036b2:	3a01      	subs	r2, #1
 80036b4:	025b      	lsls	r3, r3, #9
 80036b6:	0412      	lsls	r2, r2, #16
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80036be:	4313      	orrs	r3, r2
 80036c0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80036c2:	3a01      	subs	r2, #1
 80036c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036c8:	4313      	orrs	r3, r2
 80036ca:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80036cc:	3a01      	subs	r2, #1
 80036ce:	0612      	lsls	r2, r2, #24
 80036d0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80036d4:	4313      	orrs	r3, r2
 80036d6:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80036d8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80036da:	f023 0301 	bic.w	r3, r3, #1
 80036de:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036e0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80036e2:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80036e4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036e8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80036ec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80036f0:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80036f2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80036f4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80036f6:	f023 030c 	bic.w	r3, r3, #12
 80036fa:	4313      	orrs	r3, r2
 80036fc:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80036fe:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003700:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003702:	f023 0302 	bic.w	r3, r3, #2
 8003706:	4313      	orrs	r3, r2
 8003708:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800370a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800370c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003710:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003712:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003718:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800371a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800371c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003720:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8003722:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800372a:	682b      	ldr	r3, [r5, #0]
 800372c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003730:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003732:	f7fe fd03 	bl	800213c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003736:	4d36      	ldr	r5, [pc, #216]	@ (8003810 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 8003738:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800373a:	682b      	ldr	r3, [r5, #0]
 800373c:	019a      	lsls	r2, r3, #6
 800373e:	f53f ae21 	bmi.w	8003384 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003742:	f7fe fcfb 	bl	800213c <HAL_GetTick>
 8003746:	1b00      	subs	r0, r0, r4
 8003748:	2802      	cmp	r0, #2
 800374a:	d9f6      	bls.n	800373a <HAL_RCC_OscConfig+0x47e>
 800374c:	e647      	b.n	80033de <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374e:	f7fe fcf5 	bl	800213c <HAL_GetTick>
 8003752:	1b80      	subs	r0, r0, r6
 8003754:	2802      	cmp	r0, #2
 8003756:	d99b      	bls.n	8003690 <HAL_RCC_OscConfig+0x3d4>
 8003758:	e641      	b.n	80033de <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800375a:	f7fe fcef 	bl	800213c <HAL_GetTick>
 800375e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	019b      	lsls	r3, r3, #6
 8003764:	f57f ae0e 	bpl.w	8003384 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003768:	f7fe fce8 	bl	800213c <HAL_GetTick>
 800376c:	1b00      	subs	r0, r0, r4
 800376e:	2802      	cmp	r0, #2
 8003770:	d9f6      	bls.n	8003760 <HAL_RCC_OscConfig+0x4a4>
 8003772:	e634      	b.n	80033de <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003774:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003776:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003778:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800377a:	f43f ae18 	beq.w	80033ae <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377e:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003782:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003784:	4281      	cmp	r1, r0
 8003786:	f47f ae12 	bne.w	80033ae <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800378a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003790:	428a      	cmp	r2, r1
 8003792:	f47f ae0c 	bne.w	80033ae <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003796:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003798:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800379c:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800379e:	4291      	cmp	r1, r2
 80037a0:	f47f ae05 	bne.w	80033ae <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037a4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80037a6:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80037aa:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037ac:	4291      	cmp	r1, r2
 80037ae:	f47f adfe 	bne.w	80033ae <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037b2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80037b4:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80037b8:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037ba:	4291      	cmp	r1, r2
 80037bc:	f47f adf7 	bne.w	80033ae <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80037c0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80037c2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80037c6:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037c8:	4293      	cmp	r3, r2
 80037ca:	f47f adf0 	bne.w	80033ae <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80037ce:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80037d0:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80037d2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80037d6:	429a      	cmp	r2, r3
 80037d8:	f43f add4 	beq.w	8003384 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 80037dc:	4d0c      	ldr	r5, [pc, #48]	@ (8003810 <HAL_RCC_OscConfig+0x554>)
 80037de:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 80037e6:	f7fe fca9 	bl	800213c <HAL_GetTick>
 80037ea:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80037ec:	f7fe fca6 	bl	800213c <HAL_GetTick>
 80037f0:	42b0      	cmp	r0, r6
 80037f2:	d0fb      	beq.n	80037ec <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037f4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80037f6:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80037f8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037fc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003800:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003804:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8003806:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800380e:	e5b9      	b.n	8003384 <HAL_RCC_OscConfig+0xc8>
 8003810:	58024400 	.word	0x58024400

08003814 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003814:	4b49      	ldr	r3, [pc, #292]	@ (800393c <HAL_RCC_GetSysClockFreq+0x128>)
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800381c:	2a10      	cmp	r2, #16
{
 800381e:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003820:	f000 8088 	beq.w	8003934 <HAL_RCC_GetSysClockFreq+0x120>
 8003824:	2a18      	cmp	r2, #24
 8003826:	d00c      	beq.n	8003842 <HAL_RCC_GetSysClockFreq+0x2e>
 8003828:	2a00      	cmp	r2, #0
 800382a:	f040 8085 	bne.w	8003938 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4843      	ldr	r0, [pc, #268]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003832:	f012 0f20 	tst.w	r2, #32
 8003836:	d003      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800383e:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8003840:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003842:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003844:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003846:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 8003848:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800384c:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 8003852:	d0f5      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003854:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003858:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800385c:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003860:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003864:	4362      	muls	r2, r4
 8003866:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800386a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800386c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003870:	ee06 2a90 	vmov	s13, r2
 8003874:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8003878:	d04e      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x104>
 800387a:	2902      	cmp	r1, #2
 800387c:	d03e      	beq.n	80038fc <HAL_RCC_GetSysClockFreq+0xe8>
 800387e:	2900      	cmp	r1, #0
 8003880:	d14a      	bne.n	8003918 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	0692      	lsls	r2, r2, #26
 8003886:	d527      	bpl.n	80038d8 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003888:	6819      	ldr	r1, [r3, #0]
 800388a:	4a2d      	ldr	r2, [pc, #180]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x12c>)
 800388c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003892:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003898:	ee07 2a90 	vmov	s15, r2
 800389c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80038a0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80038a4:	ee07 3a10 	vmov	s14, r3
 80038a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80038ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 80038b0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80038b4:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80038b8:	4b20      	ldr	r3, [pc, #128]	@ (800393c <HAL_RCC_GetSysClockFreq+0x128>)
 80038ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038bc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80038c0:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80038c2:	ee07 3a10 	vmov	s14, r3
 80038c6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80038ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80038ce:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80038d2:	ee17 0a90 	vmov	r0, s15
 80038d6:	e7b3      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 80038ee:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8003944 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038f2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80038f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 80038fa:	e7dd      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003902:	ee07 3a90 	vmov	s15, r3
 8003906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800390a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800390e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003912:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 8003948 <HAL_RCC_GetSysClockFreq+0x134>
 8003916:	e7ec      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800392a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800392e:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800394c <HAL_RCC_GetSysClockFreq+0x138>
 8003932:	e7de      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003934:	4806      	ldr	r0, [pc, #24]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003936:	e783      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8003938:	4806      	ldr	r0, [pc, #24]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x140>)
 800393a:	e781      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x2c>
 800393c:	58024400 	.word	0x58024400
 8003940:	03d09000 	.word	0x03d09000
 8003944:	4c742400 	.word	0x4c742400
 8003948:	4bbebc20 	.word	0x4bbebc20
 800394c:	4a742400 	.word	0x4a742400
 8003950:	017d7840 	.word	0x017d7840
 8003954:	003d0900 	.word	0x003d0900

08003958 <HAL_RCC_ClockConfig>:
{
 8003958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800395c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800395e:	4604      	mov	r4, r0
 8003960:	b910      	cbnz	r0, 8003968 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003962:	2001      	movs	r0, #1
}
 8003964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003968:	4a88      	ldr	r2, [pc, #544]	@ (8003b8c <HAL_RCC_ClockConfig+0x234>)
 800396a:	6813      	ldr	r3, [r2, #0]
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	428b      	cmp	r3, r1
 8003972:	f0c0 8093 	bcc.w	8003a9c <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	075f      	lsls	r7, r3, #29
 800397a:	f100 809b 	bmi.w	8003ab4 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800397e:	071e      	lsls	r6, r3, #28
 8003980:	d50b      	bpl.n	800399a <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003982:	4983      	ldr	r1, [pc, #524]	@ (8003b90 <HAL_RCC_ClockConfig+0x238>)
 8003984:	6960      	ldr	r0, [r4, #20]
 8003986:	69ca      	ldr	r2, [r1, #28]
 8003988:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800398c:	4290      	cmp	r0, r2
 800398e:	d904      	bls.n	800399a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003990:	69ca      	ldr	r2, [r1, #28]
 8003992:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003996:	4302      	orrs	r2, r0
 8003998:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399a:	06d8      	lsls	r0, r3, #27
 800399c:	d50b      	bpl.n	80039b6 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800399e:	497c      	ldr	r1, [pc, #496]	@ (8003b90 <HAL_RCC_ClockConfig+0x238>)
 80039a0:	69a0      	ldr	r0, [r4, #24]
 80039a2:	69ca      	ldr	r2, [r1, #28]
 80039a4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80039a8:	4290      	cmp	r0, r2
 80039aa:	d904      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039ac:	69ca      	ldr	r2, [r1, #28]
 80039ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039b2:	4302      	orrs	r2, r0
 80039b4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039b6:	0699      	lsls	r1, r3, #26
 80039b8:	d50b      	bpl.n	80039d2 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039ba:	4975      	ldr	r1, [pc, #468]	@ (8003b90 <HAL_RCC_ClockConfig+0x238>)
 80039bc:	69e0      	ldr	r0, [r4, #28]
 80039be:	6a0a      	ldr	r2, [r1, #32]
 80039c0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80039c4:	4290      	cmp	r0, r2
 80039c6:	d904      	bls.n	80039d2 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039c8:	6a0a      	ldr	r2, [r1, #32]
 80039ca:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80039ce:	4302      	orrs	r2, r0
 80039d0:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d2:	079a      	lsls	r2, r3, #30
 80039d4:	d50b      	bpl.n	80039ee <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039d6:	496e      	ldr	r1, [pc, #440]	@ (8003b90 <HAL_RCC_ClockConfig+0x238>)
 80039d8:	68e0      	ldr	r0, [r4, #12]
 80039da:	698a      	ldr	r2, [r1, #24]
 80039dc:	f002 020f 	and.w	r2, r2, #15
 80039e0:	4290      	cmp	r0, r2
 80039e2:	d904      	bls.n	80039ee <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e4:	698a      	ldr	r2, [r1, #24]
 80039e6:	f022 020f 	bic.w	r2, r2, #15
 80039ea:	4302      	orrs	r2, r0
 80039ec:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ee:	07df      	lsls	r7, r3, #31
 80039f0:	d46e      	bmi.n	8003ad0 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	079e      	lsls	r6, r3, #30
 80039f6:	f100 80a1 	bmi.w	8003b3c <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039fa:	4964      	ldr	r1, [pc, #400]	@ (8003b8c <HAL_RCC_ClockConfig+0x234>)
 80039fc:	680a      	ldr	r2, [r1, #0]
 80039fe:	f002 020f 	and.w	r2, r2, #15
 8003a02:	42aa      	cmp	r2, r5
 8003a04:	f200 80a8 	bhi.w	8003b58 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a08:	0758      	lsls	r0, r3, #29
 8003a0a:	f100 80b1 	bmi.w	8003b70 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0e:	0719      	lsls	r1, r3, #28
 8003a10:	d50b      	bpl.n	8003a2a <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a12:	495f      	ldr	r1, [pc, #380]	@ (8003b90 <HAL_RCC_ClockConfig+0x238>)
 8003a14:	6960      	ldr	r0, [r4, #20]
 8003a16:	69ca      	ldr	r2, [r1, #28]
 8003a18:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003a1c:	4290      	cmp	r0, r2
 8003a1e:	d204      	bcs.n	8003a2a <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a20:	69ca      	ldr	r2, [r1, #28]
 8003a22:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003a26:	4302      	orrs	r2, r0
 8003a28:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2a:	06da      	lsls	r2, r3, #27
 8003a2c:	d50b      	bpl.n	8003a46 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a2e:	4958      	ldr	r1, [pc, #352]	@ (8003b90 <HAL_RCC_ClockConfig+0x238>)
 8003a30:	69a0      	ldr	r0, [r4, #24]
 8003a32:	69ca      	ldr	r2, [r1, #28]
 8003a34:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003a38:	4290      	cmp	r0, r2
 8003a3a:	d204      	bcs.n	8003a46 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a3c:	69ca      	ldr	r2, [r1, #28]
 8003a3e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a42:	4302      	orrs	r2, r0
 8003a44:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a46:	069b      	lsls	r3, r3, #26
 8003a48:	d50b      	bpl.n	8003a62 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a4a:	4a51      	ldr	r2, [pc, #324]	@ (8003b90 <HAL_RCC_ClockConfig+0x238>)
 8003a4c:	69e1      	ldr	r1, [r4, #28]
 8003a4e:	6a13      	ldr	r3, [r2, #32]
 8003a50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a54:	4299      	cmp	r1, r3
 8003a56:	d204      	bcs.n	8003a62 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a58:	6a13      	ldr	r3, [r2, #32]
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a62:	f7ff fed7 	bl	8003814 <HAL_RCC_GetSysClockFreq>
 8003a66:	494a      	ldr	r1, [pc, #296]	@ (8003b90 <HAL_RCC_ClockConfig+0x238>)
 8003a68:	4a4a      	ldr	r2, [pc, #296]	@ (8003b94 <HAL_RCC_ClockConfig+0x23c>)
 8003a6a:	698b      	ldr	r3, [r1, #24]
 8003a6c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003a70:	5cd3      	ldrb	r3, [r2, r3]
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a78:	698b      	ldr	r3, [r1, #24]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	5cd3      	ldrb	r3, [r2, r3]
 8003a80:	4a45      	ldr	r2, [pc, #276]	@ (8003b98 <HAL_RCC_ClockConfig+0x240>)
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	fa20 f303 	lsr.w	r3, r0, r3
 8003a8a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8003a8c:	4b43      	ldr	r3, [pc, #268]	@ (8003b9c <HAL_RCC_ClockConfig+0x244>)
 8003a8e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8003a90:	4b43      	ldr	r3, [pc, #268]	@ (8003ba0 <HAL_RCC_ClockConfig+0x248>)
}
 8003a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8003a96:	6818      	ldr	r0, [r3, #0]
 8003a98:	f7fe baf0 	b.w	800207c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9c:	6813      	ldr	r3, [r2, #0]
 8003a9e:	f023 030f 	bic.w	r3, r3, #15
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	6813      	ldr	r3, [r2, #0]
 8003aa8:	f003 030f 	and.w	r3, r3, #15
 8003aac:	428b      	cmp	r3, r1
 8003aae:	f47f af58 	bne.w	8003962 <HAL_RCC_ClockConfig+0xa>
 8003ab2:	e760      	b.n	8003976 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ab4:	4936      	ldr	r1, [pc, #216]	@ (8003b90 <HAL_RCC_ClockConfig+0x238>)
 8003ab6:	6920      	ldr	r0, [r4, #16]
 8003ab8:	698a      	ldr	r2, [r1, #24]
 8003aba:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003abe:	4290      	cmp	r0, r2
 8003ac0:	f67f af5d 	bls.w	800397e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ac4:	698a      	ldr	r2, [r1, #24]
 8003ac6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003aca:	4302      	orrs	r2, r0
 8003acc:	618a      	str	r2, [r1, #24]
 8003ace:	e756      	b.n	800397e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8003b90 <HAL_RCC_ClockConfig+0x238>)
 8003ad2:	68a1      	ldr	r1, [r4, #8]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 8003ada:	430a      	orrs	r2, r1
 8003adc:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ade:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ae0:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae2:	2902      	cmp	r1, #2
 8003ae4:	d11d      	bne.n	8003b22 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ae6:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aea:	f43f af3a 	beq.w	8003962 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003aee:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af0:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af4:	4f26      	ldr	r7, [pc, #152]	@ (8003b90 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003af6:	f022 0207 	bic.w	r2, r2, #7
 8003afa:	430a      	orrs	r2, r1
 8003afc:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 8003afe:	f7fe fb1d 	bl	800213c <HAL_GetTick>
 8003b02:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	6862      	ldr	r2, [r4, #4]
 8003b08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b0c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8003b10:	f43f af6f 	beq.w	80039f2 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b14:	f7fe fb12 	bl	800213c <HAL_GetTick>
 8003b18:	1b80      	subs	r0, r0, r6
 8003b1a:	4540      	cmp	r0, r8
 8003b1c:	d9f2      	bls.n	8003b04 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 8003b1e:	2003      	movs	r0, #3
 8003b20:	e720      	b.n	8003964 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b22:	2903      	cmp	r1, #3
 8003b24:	d102      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b26:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8003b2a:	e7de      	b.n	8003aea <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b2c:	2901      	cmp	r1, #1
 8003b2e:	d102      	bne.n	8003b36 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b30:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8003b34:	e7d9      	b.n	8003aea <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b36:	f012 0f04 	tst.w	r2, #4
 8003b3a:	e7d6      	b.n	8003aea <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b3c:	4914      	ldr	r1, [pc, #80]	@ (8003b90 <HAL_RCC_ClockConfig+0x238>)
 8003b3e:	68e0      	ldr	r0, [r4, #12]
 8003b40:	698a      	ldr	r2, [r1, #24]
 8003b42:	f002 020f 	and.w	r2, r2, #15
 8003b46:	4290      	cmp	r0, r2
 8003b48:	f4bf af57 	bcs.w	80039fa <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b4c:	698a      	ldr	r2, [r1, #24]
 8003b4e:	f022 020f 	bic.w	r2, r2, #15
 8003b52:	4302      	orrs	r2, r0
 8003b54:	618a      	str	r2, [r1, #24]
 8003b56:	e750      	b.n	80039fa <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b58:	680a      	ldr	r2, [r1, #0]
 8003b5a:	f022 020f 	bic.w	r2, r2, #15
 8003b5e:	432a      	orrs	r2, r5
 8003b60:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b62:	680a      	ldr	r2, [r1, #0]
 8003b64:	f002 020f 	and.w	r2, r2, #15
 8003b68:	42aa      	cmp	r2, r5
 8003b6a:	f47f aefa 	bne.w	8003962 <HAL_RCC_ClockConfig+0xa>
 8003b6e:	e74b      	b.n	8003a08 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b70:	4907      	ldr	r1, [pc, #28]	@ (8003b90 <HAL_RCC_ClockConfig+0x238>)
 8003b72:	6920      	ldr	r0, [r4, #16]
 8003b74:	698a      	ldr	r2, [r1, #24]
 8003b76:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003b7a:	4290      	cmp	r0, r2
 8003b7c:	f4bf af47 	bcs.w	8003a0e <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b80:	698a      	ldr	r2, [r1, #24]
 8003b82:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003b86:	4302      	orrs	r2, r0
 8003b88:	618a      	str	r2, [r1, #24]
 8003b8a:	e740      	b.n	8003a0e <HAL_RCC_ClockConfig+0xb6>
 8003b8c:	52002000 	.word	0x52002000
 8003b90:	58024400 	.word	0x58024400
 8003b94:	0801d4d9 	.word	0x0801d4d9
 8003b98:	24000008 	.word	0x24000008
 8003b9c:	2400000c 	.word	0x2400000c
 8003ba0:	24000014 	.word	0x24000014

08003ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba4:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ba6:	f7ff fe35 	bl	8003814 <HAL_RCC_GetSysClockFreq>
 8003baa:	4a0b      	ldr	r2, [pc, #44]	@ (8003bd8 <HAL_RCC_GetHCLKFreq+0x34>)
 8003bac:	490b      	ldr	r1, [pc, #44]	@ (8003bdc <HAL_RCC_GetHCLKFreq+0x38>)
 8003bae:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bb0:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003bb2:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bb6:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bc4:	5c88      	ldrb	r0, [r1, r2]
 8003bc6:	4a06      	ldr	r2, [pc, #24]	@ (8003be0 <HAL_RCC_GetHCLKFreq+0x3c>)
 8003bc8:	f000 001f 	and.w	r0, r0, #31
 8003bcc:	fa23 f000 	lsr.w	r0, r3, r0
 8003bd0:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bd2:	4a04      	ldr	r2, [pc, #16]	@ (8003be4 <HAL_RCC_GetHCLKFreq+0x40>)
 8003bd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003bd6:	bd08      	pop	{r3, pc}
 8003bd8:	58024400 	.word	0x58024400
 8003bdc:	0801d4d9 	.word	0x0801d4d9
 8003be0:	24000008 	.word	0x24000008
 8003be4:	2400000c 	.word	0x2400000c

08003be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be8:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003bea:	f7ff ffdb 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
 8003bee:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003bf0:	4a05      	ldr	r2, [pc, #20]	@ (8003c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003bf8:	5cd3      	ldrb	r3, [r2, r3]
 8003bfa:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003bfe:	40d8      	lsrs	r0, r3
 8003c00:	bd08      	pop	{r3, pc}
 8003c02:	bf00      	nop
 8003c04:	58024400 	.word	0x58024400
 8003c08:	0801d4d9 	.word	0x0801d4d9

08003c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c0c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003c0e:	f7ff ffc9 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
 8003c12:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003c14:	4a05      	ldr	r2, [pc, #20]	@ (8003c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003c1c:	5cd3      	ldrb	r3, [r2, r3]
 8003c1e:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003c22:	40d8      	lsrs	r0, r3
 8003c24:	bd08      	pop	{r3, pc}
 8003c26:	bf00      	nop
 8003c28:	58024400 	.word	0x58024400
 8003c2c:	0801d4d9 	.word	0x0801d4d9

08003c30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c32:	4c3a      	ldr	r4, [pc, #232]	@ (8003d1c <RCCEx_PLL2_Config+0xec>)
{
 8003c34:	4606      	mov	r6, r0
 8003c36:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c38:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d069      	beq.n	8003d16 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c48:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c4a:	f7fe fa77 	bl	800213c <HAL_GetTick>
 8003c4e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	011a      	lsls	r2, r3, #4
 8003c54:	d44b      	bmi.n	8003cee <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003c56:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003c58:	6832      	ldr	r2, [r6, #0]
 8003c5a:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003c5e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003c62:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c64:	68b3      	ldr	r3, [r6, #8]
 8003c66:	68f2      	ldr	r2, [r6, #12]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	3a01      	subs	r2, #1
 8003c6c:	025b      	lsls	r3, r3, #9
 8003c6e:	0412      	lsls	r2, r2, #16
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003c76:	4313      	orrs	r3, r2
 8003c78:	6872      	ldr	r2, [r6, #4]
 8003c7a:	3a01      	subs	r2, #1
 8003c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c80:	4313      	orrs	r3, r2
 8003c82:	6932      	ldr	r2, [r6, #16]
 8003c84:	3a01      	subs	r2, #1
 8003c86:	0612      	lsls	r2, r2, #24
 8003c88:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c90:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003c92:	6972      	ldr	r2, [r6, #20]
 8003c94:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c9c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003c9e:	69b2      	ldr	r2, [r6, #24]
 8003ca0:	f023 0320 	bic.w	r3, r3, #32
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ca8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003caa:	f023 0310 	bic.w	r3, r3, #16
 8003cae:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003cb0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003cb2:	69f2      	ldr	r2, [r6, #28]
 8003cb4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cb8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003cbc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003cc0:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003cc2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003cc4:	f043 0310 	orr.w	r3, r3, #16
 8003cc8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003cca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003ccc:	b9b5      	cbnz	r5, 8003cfc <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003cce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003cd2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003cd4:	4c11      	ldr	r4, [pc, #68]	@ (8003d1c <RCCEx_PLL2_Config+0xec>)
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003cdc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cde:	f7fe fa2d 	bl	800213c <HAL_GetTick>
 8003ce2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	d50f      	bpl.n	8003d0a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8003cea:	2000      	movs	r0, #0
 8003cec:	e005      	b.n	8003cfa <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003cee:	f7fe fa25 	bl	800213c <HAL_GetTick>
 8003cf2:	1bc0      	subs	r0, r0, r7
 8003cf4:	2802      	cmp	r0, #2
 8003cf6:	d9ab      	bls.n	8003c50 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8003cf8:	2003      	movs	r0, #3
}
 8003cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8003cfc:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003cfe:	bf0c      	ite	eq
 8003d00:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003d04:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8003d08:	e7e3      	b.n	8003cd2 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d0a:	f7fe fa17 	bl	800213c <HAL_GetTick>
 8003d0e:	1b40      	subs	r0, r0, r5
 8003d10:	2802      	cmp	r0, #2
 8003d12:	d9e7      	bls.n	8003ce4 <RCCEx_PLL2_Config+0xb4>
 8003d14:	e7f0      	b.n	8003cf8 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8003d16:	2001      	movs	r0, #1
 8003d18:	e7ef      	b.n	8003cfa <RCCEx_PLL2_Config+0xca>
 8003d1a:	bf00      	nop
 8003d1c:	58024400 	.word	0x58024400

08003d20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d22:	4c3a      	ldr	r4, [pc, #232]	@ (8003e0c <RCCEx_PLL3_Config+0xec>)
{
 8003d24:	4606      	mov	r6, r0
 8003d26:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d28:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d069      	beq.n	8003e06 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d38:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d3a:	f7fe f9ff 	bl	800213c <HAL_GetTick>
 8003d3e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	009a      	lsls	r2, r3, #2
 8003d44:	d44b      	bmi.n	8003dde <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d46:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003d48:	6832      	ldr	r2, [r6, #0]
 8003d4a:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8003d4e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8003d52:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d54:	68b3      	ldr	r3, [r6, #8]
 8003d56:	68f2      	ldr	r2, [r6, #12]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	3a01      	subs	r2, #1
 8003d5c:	025b      	lsls	r3, r3, #9
 8003d5e:	0412      	lsls	r2, r2, #16
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003d66:	4313      	orrs	r3, r2
 8003d68:	6872      	ldr	r2, [r6, #4]
 8003d6a:	3a01      	subs	r2, #1
 8003d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d70:	4313      	orrs	r3, r2
 8003d72:	6932      	ldr	r2, [r6, #16]
 8003d74:	3a01      	subs	r2, #1
 8003d76:	0612      	lsls	r2, r2, #24
 8003d78:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d80:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003d82:	6972      	ldr	r2, [r6, #20]
 8003d84:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d8c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003d8e:	69b2      	ldr	r2, [r6, #24]
 8003d90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d94:	4313      	orrs	r3, r2
 8003d96:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003d98:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003d9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d9e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003da0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003da2:	69f2      	ldr	r2, [r6, #28]
 8003da4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003da8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003dac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003db0:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003db2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003dba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003dbc:	b9b5      	cbnz	r5, 8003dec <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003dbe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003dc2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003dc4:	4c11      	ldr	r4, [pc, #68]	@ (8003e0c <RCCEx_PLL3_Config+0xec>)
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dcc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dce:	f7fe f9b5 	bl	800213c <HAL_GetTick>
 8003dd2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	d50f      	bpl.n	8003dfa <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8003dda:	2000      	movs	r0, #0
 8003ddc:	e005      	b.n	8003dea <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003dde:	f7fe f9ad 	bl	800213c <HAL_GetTick>
 8003de2:	1bc0      	subs	r0, r0, r7
 8003de4:	2802      	cmp	r0, #2
 8003de6:	d9ab      	bls.n	8003d40 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8003de8:	2003      	movs	r0, #3
}
 8003dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8003dec:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003dee:	bf0c      	ite	eq
 8003df0:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003df4:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8003df8:	e7e3      	b.n	8003dc2 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003dfa:	f7fe f99f 	bl	800213c <HAL_GetTick>
 8003dfe:	1b40      	subs	r0, r0, r5
 8003e00:	2802      	cmp	r0, #2
 8003e02:	d9e7      	bls.n	8003dd4 <RCCEx_PLL3_Config+0xb4>
 8003e04:	e7f0      	b.n	8003de8 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8003e06:	2001      	movs	r0, #1
 8003e08:	e7ef      	b.n	8003dea <RCCEx_PLL3_Config+0xca>
 8003e0a:	bf00      	nop
 8003e0c:	58024400 	.word	0x58024400

08003e10 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e14:	6803      	ldr	r3, [r0, #0]
{
 8003e16:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e18:	0118      	lsls	r0, r3, #4
 8003e1a:	d51e      	bpl.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003e1c:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 8003e1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e22:	d02b      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003e24:	d80f      	bhi.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8003e26:	b1d3      	cbz	r3, 8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003e28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e2c:	d01d      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8003e2e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e30:	682b      	ldr	r3, [r5, #0]
 8003e32:	05d9      	lsls	r1, r3, #23
 8003e34:	d551      	bpl.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003e36:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d84d      	bhi.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8003e3c:	e8df f003 	tbb	[pc, r3]
 8003e40:	29463f24 	.word	0x29463f24
 8003e44:	29          	.byte	0x29
 8003e45:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003e46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e4a:	d1f0      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e4c:	4a85      	ldr	r2, [pc, #532]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e4e:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8003e50:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8003e52:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003e56:	430b      	orrs	r3, r1
 8003e58:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e5a:	2600      	movs	r6, #0
 8003e5c:	e7e8      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e5e:	4a81      	ldr	r2, [pc, #516]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e60:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e66:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003e68:	e7f0      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	f105 0008 	add.w	r0, r5, #8
 8003e70:	f7ff fede 	bl	8003c30 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e74:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8003e76:	2800      	cmp	r0, #0
 8003e78:	d1da      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8003e7a:	e7e7      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e7c:	2102      	movs	r1, #2
 8003e7e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8003e82:	f7ff ff4d 	bl	8003d20 <RCCEx_PLL3_Config>
 8003e86:	e7f5      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x64>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e88:	4a76      	ldr	r2, [pc, #472]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e8a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003e92:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 8003e94:	bb1c      	cbnz	r4, 8003ede <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e96:	4a73      	ldr	r2, [pc, #460]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e98:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8003e9a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8003e9c:	f023 0307 	bic.w	r3, r3, #7
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ea4:	682b      	ldr	r3, [r5, #0]
 8003ea6:	059a      	lsls	r2, r3, #22
 8003ea8:	d528      	bpl.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai23ClockSelection)
 8003eaa:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8003eac:	2b80      	cmp	r3, #128	@ 0x80
 8003eae:	d043      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003eb0:	d817      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8003eb2:	b3a3      	cbz	r3, 8003f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8003eb4:	2b40      	cmp	r3, #64	@ 0x40
 8003eb6:	d038      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8003eb8:	2601      	movs	r6, #1
 8003eba:	4634      	mov	r4, r6
 8003ebc:	e01e      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xec>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	f105 0008 	add.w	r0, r5, #8
 8003ec4:	f7ff feb4 	bl	8003c30 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ec8:	4604      	mov	r4, r0
        break;
 8003eca:	e7e3      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x84>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ecc:	2100      	movs	r1, #0
 8003ece:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8003ed2:	f7ff ff25 	bl	8003d20 <RCCEx_PLL3_Config>
 8003ed6:	e7f7      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003ed8:	2601      	movs	r6, #1
 8003eda:	4634      	mov	r4, r6
 8003edc:	e7e2      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8003ede:	4626      	mov	r6, r4
 8003ee0:	e7e0      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai23ClockSelection)
 8003ee2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ee4:	d002      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eea:	d1e5      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if (ret == HAL_OK)
 8003eec:	bb54      	cbnz	r4, 8003f44 <HAL_RCCEx_PeriphCLKConfig+0x134>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003eee:	4a5d      	ldr	r2, [pc, #372]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ef0:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 8003ef2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8003ef4:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	055b      	lsls	r3, r3, #21
 8003f00:	d531      	bpl.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4AClockSelection)
 8003f02:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 8003f06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f0a:	d049      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003f0c:	d81c      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d039      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8003f12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f16:	d03c      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003f18:	2601      	movs	r6, #1
 8003f1a:	4634      	mov	r4, r6
 8003f1c:	e023      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f1e:	4a51      	ldr	r2, [pc, #324]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f20:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f26:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8003f28:	e7e0      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	f105 0008 	add.w	r0, r5, #8
 8003f30:	f7ff fe7e 	bl	8003c30 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f34:	4604      	mov	r4, r0
        break;
 8003f36:	e7d9      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f38:	2100      	movs	r1, #0
 8003f3a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8003f3e:	f7ff feef 	bl	8003d20 <RCCEx_PLL3_Config>
 8003f42:	e7f7      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8003f44:	4626      	mov	r6, r4
 8003f46:	e7d9      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai4AClockSelection)
 8003f48:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003f4c:	d002      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8003f4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f52:	d1e1      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x108>
    if (ret == HAL_OK)
 8003f54:	bb54      	cbnz	r4, 8003fac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f56:	4a43      	ldr	r2, [pc, #268]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f58:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8003f5c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003f5e:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8003f62:	430b      	orrs	r3, r1
 8003f64:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f66:	682b      	ldr	r3, [r5, #0]
 8003f68:	051f      	lsls	r7, r3, #20
 8003f6a:	d530      	bpl.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->Sai4BClockSelection)
 8003f6c:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8003f70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f74:	d045      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8003f76:	d81b      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8003f78:	b3b3      	cbz	r3, 8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003f7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f7e:	d039      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003f80:	2601      	movs	r6, #1
 8003f82:	4634      	mov	r4, r6
 8003f84:	e023      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x1be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f86:	4a37      	ldr	r2, [pc, #220]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f88:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8003f90:	e7e0      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f92:	2100      	movs	r1, #0
 8003f94:	f105 0008 	add.w	r0, r5, #8
 8003f98:	f7ff fe4a 	bl	8003c30 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f9c:	4604      	mov	r4, r0
        break;
 8003f9e:	e7d9      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8003fa6:	f7ff febb 	bl	8003d20 <RCCEx_PLL3_Config>
 8003faa:	e7f7      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003fac:	4626      	mov	r6, r4
 8003fae:	e7da      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4BClockSelection)
 8003fb0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fb4:	d002      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8003fb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fba:	d1e1      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x170>
    if (ret == HAL_OK)
 8003fbc:	bb3c      	cbnz	r4, 800400e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003fbe:	4a29      	ldr	r2, [pc, #164]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fc0:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8003fc4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003fc6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003fce:	682b      	ldr	r3, [r5, #0]
 8003fd0:	0198      	lsls	r0, r3, #6
 8003fd2:	d528      	bpl.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch (PeriphClkInit->QspiClockSelection)
 8003fd4:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d03b      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003fda:	d81a      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003fdc:	b1db      	cbz	r3, 8004016 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003fde:	2b10      	cmp	r3, #16
 8003fe0:	d031      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003fe2:	2601      	movs	r6, #1
 8003fe4:	4634      	mov	r4, r6
 8003fe6:	e01e      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x216>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fea:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8003ff2:	e7e3      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	f105 0008 	add.w	r0, r5, #8
 8003ffa:	f7ff fe19 	bl	8003c30 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ffe:	4604      	mov	r4, r0
        break;
 8004000:	e7dc      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004002:	2100      	movs	r1, #0
 8004004:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004008:	f7ff fe8a 	bl	8003d20 <RCCEx_PLL3_Config>
 800400c:	e7f7      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800400e:	4626      	mov	r6, r4
 8004010:	e7dd      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->QspiClockSelection)
 8004012:	2b30      	cmp	r3, #48	@ 0x30
 8004014:	d1e5      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if (ret == HAL_OK)
 8004016:	bb1c      	cbnz	r4, 8004060 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004018:	4a12      	ldr	r2, [pc, #72]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800401a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800401c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800401e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004022:	430b      	orrs	r3, r1
 8004024:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004026:	682b      	ldr	r3, [r5, #0]
 8004028:	04d9      	lsls	r1, r3, #19
 800402a:	d52c      	bpl.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi123ClockSelection)
 800402c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800402e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004032:	d076      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004034:	d818      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d066      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800403a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800403e:	d069      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004040:	2601      	movs	r6, #1
 8004042:	4634      	mov	r4, r6
 8004044:	e01f      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004046:	4a07      	ldr	r2, [pc, #28]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004048:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800404a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800404e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004050:	e7e1      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004052:	2102      	movs	r1, #2
 8004054:	f105 0008 	add.w	r0, r5, #8
 8004058:	f7ff fdea 	bl	8003c30 <RCCEx_PLL2_Config>
 800405c:	4604      	mov	r4, r0
        break;
 800405e:	e7da      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004060:	4626      	mov	r6, r4
 8004062:	e7e0      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8004064:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 8004068:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800406c:	d002      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800406e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004072:	d1e5      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x230>
    if (ret == HAL_OK)
 8004074:	2c00      	cmp	r4, #0
 8004076:	d15a      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x31e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004078:	4a9e      	ldr	r2, [pc, #632]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800407a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800407c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800407e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004082:	430b      	orrs	r3, r1
 8004084:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004086:	682b      	ldr	r3, [r5, #0]
 8004088:	049a      	lsls	r2, r3, #18
 800408a:	d50b      	bpl.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi45ClockSelection)
 800408c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800408e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004092:	d066      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004094:	d84d      	bhi.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d053      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800409a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800409e:	d059      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80040a0:	2601      	movs	r6, #1
 80040a2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	045b      	lsls	r3, r3, #17
 80040a8:	d50c      	bpl.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    switch (PeriphClkInit->Spi6ClockSelection)
 80040aa:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 80040ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040b2:	d077      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x394>
 80040b4:	d85d      	bhi.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d063      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80040ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040be:	d06a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80040c0:	2601      	movs	r6, #1
 80040c2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	041f      	lsls	r7, r3, #16
 80040c8:	d511      	bpl.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch (PeriphClkInit->FdcanClockSelection)
 80040ca:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80040cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040d0:	d070      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80040d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040d6:	d073      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d178      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x3be>
    if (ret == HAL_OK)
 80040dc:	2c00      	cmp	r4, #0
 80040de:	d179      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040e0:	4a84      	ldr	r2, [pc, #528]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040e2:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80040e4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80040e6:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80040ea:	430b      	orrs	r3, r1
 80040ec:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040ee:	682b      	ldr	r3, [r5, #0]
 80040f0:	01d8      	lsls	r0, r3, #7
 80040f2:	d57f      	bpl.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    switch (PeriphClkInit->FmcClockSelection)
 80040f4:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	f200 80d8 	bhi.w	80042ac <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80040fc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004100:	006c0071 	.word	0x006c0071
 8004104:	007100cf 	.word	0x007100cf
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004108:	4a7a      	ldr	r2, [pc, #488]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800410a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800410c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004110:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004112:	e7af      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004114:	2100      	movs	r1, #0
 8004116:	f105 0008 	add.w	r0, r5, #8
 800411a:	f7ff fd89 	bl	8003c30 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800411e:	4604      	mov	r4, r0
        break;
 8004120:	e7a8      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004122:	2100      	movs	r1, #0
 8004124:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004128:	f7ff fdfa 	bl	8003d20 <RCCEx_PLL3_Config>
 800412c:	e7f7      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800412e:	4626      	mov	r6, r4
 8004130:	e7a9      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004132:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004136:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800413a:	d002      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800413c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004140:	d1ae      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x290>
    if (ret == HAL_OK)
 8004142:	b9a4      	cbnz	r4, 800416e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004144:	4a6b      	ldr	r2, [pc, #428]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004146:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 8004148:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800414a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800414e:	430b      	orrs	r3, r1
 8004150:	6513      	str	r3, [r2, #80]	@ 0x50
 8004152:	e7a7      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x294>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004154:	2101      	movs	r1, #1
 8004156:	f105 0008 	add.w	r0, r5, #8
 800415a:	f7ff fd69 	bl	8003c30 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800415e:	4604      	mov	r4, r0
        break;
 8004160:	e7ef      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x332>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004162:	2101      	movs	r1, #1
 8004164:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004168:	f7ff fdda 	bl	8003d20 <RCCEx_PLL3_Config>
 800416c:	e7f7      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800416e:	4626      	mov	r6, r4
 8004170:	e798      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004172:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004176:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800417a:	d002      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800417c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004180:	d19e      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    if (ret == HAL_OK)
 8004182:	b9ac      	cbnz	r4, 80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004184:	4a5b      	ldr	r2, [pc, #364]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004186:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800418a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800418c:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8004190:	430b      	orrs	r3, r1
 8004192:	6593      	str	r3, [r2, #88]	@ 0x58
 8004194:	e796      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004196:	2101      	movs	r1, #1
 8004198:	f105 0008 	add.w	r0, r5, #8
 800419c:	f7ff fd48 	bl	8003c30 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041a0:	4604      	mov	r4, r0
        break;
 80041a2:	e7ee      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x372>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041a4:	2101      	movs	r1, #1
 80041a6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80041aa:	f7ff fdb9 	bl	8003d20 <RCCEx_PLL3_Config>
 80041ae:	e7f7      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x390>
 80041b0:	4626      	mov	r6, r4
 80041b2:	e787      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b4:	4a4f      	ldr	r2, [pc, #316]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041b6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80041b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80041be:	e78d      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041c0:	2101      	movs	r1, #1
 80041c2:	f105 0008 	add.w	r0, r5, #8
 80041c6:	f7ff fd33 	bl	8003c30 <RCCEx_PLL2_Config>
 80041ca:	4604      	mov	r4, r0
        break;
 80041cc:	e786      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    switch (PeriphClkInit->FdcanClockSelection)
 80041ce:	2601      	movs	r6, #1
 80041d0:	4634      	mov	r4, r6
 80041d2:	e78c      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80041d4:	4626      	mov	r6, r4
 80041d6:	e78a      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041d8:	4a46      	ldr	r2, [pc, #280]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041da:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80041dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80041e2:	2c00      	cmp	r4, #0
 80041e4:	d165      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80041e6:	4a43      	ldr	r2, [pc, #268]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041e8:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 80041ea:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80041ec:	f023 0303 	bic.w	r3, r3, #3
 80041f0:	430b      	orrs	r3, r1
 80041f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041f4:	682b      	ldr	r3, [r5, #0]
 80041f6:	0259      	lsls	r1, r3, #9
 80041f8:	d539      	bpl.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041fa:	4f3f      	ldr	r7, [pc, #252]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004202:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004204:	f7fd ff9a 	bl	800213c <HAL_GetTick>
 8004208:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	05da      	lsls	r2, r3, #23
 800420e:	d552      	bpl.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    if (ret == HAL_OK)
 8004210:	2c00      	cmp	r4, #0
 8004212:	d175      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004214:	4b37      	ldr	r3, [pc, #220]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004216:	f8d5 00b4 	ldr.w	r0, [r5, #180]	@ 0xb4
 800421a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800421c:	4042      	eors	r2, r0
 800421e:	f412 7f40 	tst.w	r2, #768	@ 0x300
 8004222:	d00b      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x42c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004224:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8004226:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004228:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800422c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8004230:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004232:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004234:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8004238:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800423a:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800423c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004240:	d042      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004242:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8004246:	492b      	ldr	r1, [pc, #172]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004248:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800424c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8004250:	d14b      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004252:	6908      	ldr	r0, [r1, #16]
 8004254:	4a29      	ldr	r2, [pc, #164]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004256:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800425a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800425e:	4302      	orrs	r2, r0
 8004260:	610a      	str	r2, [r1, #16]
 8004262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004266:	4a23      	ldr	r2, [pc, #140]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004268:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800426a:	430b      	orrs	r3, r1
 800426c:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800426e:	682b      	ldr	r3, [r5, #0]
 8004270:	07d8      	lsls	r0, r3, #31
 8004272:	d509      	bpl.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004274:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8004276:	2b10      	cmp	r3, #16
 8004278:	d05a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800427a:	d843      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d047      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004280:	2b08      	cmp	r3, #8
 8004282:	d04e      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x512>
 8004284:	2601      	movs	r6, #1
 8004286:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004288:	682b      	ldr	r3, [r5, #0]
 800428a:	0799      	lsls	r1, r3, #30
 800428c:	d566      	bpl.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800428e:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8004290:	2b05      	cmp	r3, #5
 8004292:	d879      	bhi.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x578>
 8004294:	e8df f003 	tbb	[pc, r3]
 8004298:	5a72545a 	.word	0x5a72545a
 800429c:	5a5a      	.short	0x5a5a
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800429e:	2102      	movs	r1, #2
 80042a0:	f105 0008 	add.w	r0, r5, #8
 80042a4:	f7ff fcc4 	bl	8003c30 <RCCEx_PLL2_Config>
 80042a8:	4604      	mov	r4, r0
        break;
 80042aa:	e79a      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch (PeriphClkInit->FmcClockSelection)
 80042ac:	2601      	movs	r6, #1
 80042ae:	4634      	mov	r4, r6
 80042b0:	e7a0      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80042b2:	4626      	mov	r6, r4
 80042b4:	e79e      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b6:	f7fd ff41 	bl	800213c <HAL_GetTick>
 80042ba:	eba0 0008 	sub.w	r0, r0, r8
 80042be:	2864      	cmp	r0, #100	@ 0x64
 80042c0:	d9a3      	bls.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
        ret = HAL_TIMEOUT;
 80042c2:	2603      	movs	r6, #3
 80042c4:	4634      	mov	r4, r6
 80042c6:	e7d2      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        tickstart = HAL_GetTick();
 80042c8:	f7fd ff38 	bl	800213c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042cc:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        tickstart = HAL_GetTick();
 80042d0:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042d6:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80042da:	079b      	lsls	r3, r3, #30
 80042dc:	d4b1      	bmi.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x432>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042de:	f7fd ff2d 	bl	800213c <HAL_GetTick>
 80042e2:	1bc0      	subs	r0, r0, r7
 80042e4:	4548      	cmp	r0, r9
 80042e6:	d9f6      	bls.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80042e8:	e7eb      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ea:	690a      	ldr	r2, [r1, #16]
 80042ec:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 80042f0:	e7b6      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x450>
 80042f2:	bf00      	nop
 80042f4:	58024400 	.word	0x58024400
 80042f8:	58024800 	.word	0x58024800
 80042fc:	00ffffcf 	.word	0x00ffffcf
 8004300:	4626      	mov	r6, r4
 8004302:	e7b4      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004304:	f023 0208 	bic.w	r2, r3, #8
 8004308:	2a20      	cmp	r2, #32
 800430a:	d001      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800430c:	2b18      	cmp	r3, #24
 800430e:	d1b9      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x474>
    if (ret == HAL_OK)
 8004310:	b9a4      	cbnz	r4, 800433c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004312:	4a20      	ldr	r2, [pc, #128]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8004314:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 8004316:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004318:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800431c:	430b      	orrs	r3, r1
 800431e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004320:	e7b2      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x478>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004322:	2101      	movs	r1, #1
 8004324:	f105 0008 	add.w	r0, r5, #8
 8004328:	f7ff fc82 	bl	8003c30 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800432c:	4604      	mov	r4, r0
        break;
 800432e:	e7ef      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x500>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004330:	2101      	movs	r1, #1
 8004332:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004336:	f7ff fcf3 	bl	8003d20 <RCCEx_PLL3_Config>
 800433a:	e7f7      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x51c>
 800433c:	4626      	mov	r6, r4
 800433e:	e7a3      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x478>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004340:	2101      	movs	r1, #1
 8004342:	f105 0008 	add.w	r0, r5, #8
 8004346:	f7ff fc73 	bl	8003c30 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800434a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800434c:	b9fc      	cbnz	r4, 800438e <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800434e:	4a11      	ldr	r2, [pc, #68]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8004350:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
 8004352:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004354:	f023 0307 	bic.w	r3, r3, #7
 8004358:	430b      	orrs	r3, r1
 800435a:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	075a      	lsls	r2, r3, #29
 8004360:	d52b      	bpl.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004362:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004366:	2b05      	cmp	r3, #5
 8004368:	f200 816e 	bhi.w	8004648 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800436c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004370:	0014001a 	.word	0x0014001a
 8004374:	001a0166 	.word	0x001a0166
 8004378:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800437c:	2101      	movs	r1, #1
 800437e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004382:	f7ff fccd 	bl	8003d20 <RCCEx_PLL3_Config>
 8004386:	e7e0      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x53a>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004388:	2601      	movs	r6, #1
 800438a:	4634      	mov	r4, r6
 800438c:	e7e6      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x54c>
 800438e:	4626      	mov	r6, r4
 8004390:	e7e4      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8004392:	bf00      	nop
 8004394:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004398:	2101      	movs	r1, #1
 800439a:	f105 0008 	add.w	r0, r5, #8
 800439e:	f7ff fc47 	bl	8003c30 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043a2:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 80043a4:	2c00      	cmp	r4, #0
 80043a6:	f040 8152 	bne.w	800464e <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043aa:	4aaa      	ldr	r2, [pc, #680]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80043ac:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 80043b0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80043b2:	f023 0307 	bic.w	r3, r3, #7
 80043b6:	430b      	orrs	r3, r1
 80043b8:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043ba:	682b      	ldr	r3, [r5, #0]
 80043bc:	069b      	lsls	r3, r3, #26
 80043be:	d510      	bpl.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80043c0:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80043c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043c8:	f000 8160 	beq.w	800468c <HAL_RCCEx_PeriphCLKConfig+0x87c>
 80043cc:	f200 8144 	bhi.w	8004658 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 814a 	beq.w	800466a <HAL_RCCEx_PeriphCLKConfig+0x85a>
 80043d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043da:	f000 8150 	beq.w	800467e <HAL_RCCEx_PeriphCLKConfig+0x86e>
 80043de:	2601      	movs	r6, #1
 80043e0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80043e2:	682b      	ldr	r3, [r5, #0]
 80043e4:	065f      	lsls	r7, r3, #25
 80043e6:	d510      	bpl.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80043e8:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80043ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043f0:	f000 816e 	beq.w	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80043f4:	f200 8152 	bhi.w	800469c <HAL_RCCEx_PeriphCLKConfig+0x88c>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 8158 	beq.w	80046ae <HAL_RCCEx_PeriphCLKConfig+0x89e>
 80043fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004402:	f000 815e 	beq.w	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8004406:	2601      	movs	r6, #1
 8004408:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800440a:	682b      	ldr	r3, [r5, #0]
 800440c:	0618      	lsls	r0, r3, #24
 800440e:	d510      	bpl.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x622>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004410:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 8004414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004418:	f000 817c 	beq.w	8004714 <HAL_RCCEx_PeriphCLKConfig+0x904>
 800441c:	f200 8160 	bhi.w	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8166 	beq.w	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800442a:	f000 816c 	beq.w	8004706 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800442e:	2601      	movs	r6, #1
 8004430:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004432:	682b      	ldr	r3, [r5, #0]
 8004434:	0719      	lsls	r1, r3, #28
 8004436:	d514      	bpl.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x652>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004438:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004440:	d107      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x642>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004442:	2102      	movs	r1, #2
 8004444:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004448:	f7ff fc6a 	bl	8003d20 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800444c:	2800      	cmp	r0, #0
 800444e:	bf18      	it	ne
 8004450:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004452:	4a80      	ldr	r2, [pc, #512]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004454:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
 8004458:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800445a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800445e:	430b      	orrs	r3, r1
 8004460:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004462:	682b      	ldr	r3, [r5, #0]
 8004464:	06da      	lsls	r2, r3, #27
 8004466:	d514      	bpl.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x682>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004468:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800446c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004470:	d107      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x672>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004472:	2102      	movs	r1, #2
 8004474:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004478:	f7ff fc52 	bl	8003d20 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800447c:	2800      	cmp	r0, #0
 800447e:	bf18      	it	ne
 8004480:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004482:	4a74      	ldr	r2, [pc, #464]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004484:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 8004488:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800448a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800448e:	430b      	orrs	r3, r1
 8004490:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004492:	682b      	ldr	r3, [r5, #0]
 8004494:	031b      	lsls	r3, r3, #12
 8004496:	d51b      	bpl.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    switch (PeriphClkInit->AdcClockSelection)
 8004498:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800449c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80044a0:	f000 8140 	beq.w	8004724 <HAL_RCCEx_PeriphCLKConfig+0x914>
 80044a4:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80044a8:	d007      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 80044aa:	2900      	cmp	r1, #0
 80044ac:	f040 8140 	bne.w	8004730 <HAL_RCCEx_PeriphCLKConfig+0x920>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044b0:	f105 0008 	add.w	r0, r5, #8
 80044b4:	f7ff fbbc 	bl	8003c30 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044b8:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 80044ba:	2c00      	cmp	r4, #0
 80044bc:	f040 813b 	bne.w	8004736 <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044c0:	4a64      	ldr	r2, [pc, #400]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80044c2:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 80044c6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80044c8:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80044cc:	430b      	orrs	r3, r1
 80044ce:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	035f      	lsls	r7, r3, #13
 80044d4:	d50f      	bpl.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch (PeriphClkInit->UsbClockSelection)
 80044d6:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 80044da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044de:	f000 813b 	beq.w	8004758 <HAL_RCCEx_PeriphCLKConfig+0x948>
 80044e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044e6:	f000 812d 	beq.w	8004744 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80044ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044ee:	f000 8124 	beq.w	800473a <HAL_RCCEx_PeriphCLKConfig+0x92a>
 80044f2:	2601      	movs	r6, #1
 80044f4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044f6:	682b      	ldr	r3, [r5, #0]
 80044f8:	03d8      	lsls	r0, r3, #15
 80044fa:	d509      	bpl.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x700>
    switch (PeriphClkInit->SdmmcClockSelection)
 80044fc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 8133 	beq.w	800476a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004508:	f000 813d 	beq.w	8004786 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800450c:	2601      	movs	r6, #1
 800450e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004510:	682b      	ldr	r3, [r5, #0]
 8004512:	0099      	lsls	r1, r3, #2
 8004514:	d507      	bpl.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004516:	2102      	movs	r1, #2
 8004518:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800451c:	f7ff fc00 	bl	8003d20 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8004520:	2800      	cmp	r0, #0
 8004522:	bf18      	it	ne
 8004524:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004526:	e9d5 3100 	ldrd	r3, r1, [r5]
 800452a:	039a      	lsls	r2, r3, #14
 800452c:	f140 8143 	bpl.w	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    switch (PeriphClkInit->RngClockSelection)
 8004530:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 8004534:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004538:	f000 813f 	beq.w	80047ba <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 800453c:	f200 812c 	bhi.w	8004798 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004540:	2800      	cmp	r0, #0
 8004542:	f000 812f 	beq.w	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8004546:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004548:	02df      	lsls	r7, r3, #11
 800454a:	d506      	bpl.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x74a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800454c:	4841      	ldr	r0, [pc, #260]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800454e:	6f6e      	ldr	r6, [r5, #116]	@ 0x74
 8004550:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004552:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004556:	4332      	orrs	r2, r6
 8004558:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800455a:	00de      	lsls	r6, r3, #3
 800455c:	d507      	bpl.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x75e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800455e:	483d      	ldr	r0, [pc, #244]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004560:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 8004564:	6902      	ldr	r2, [r0, #16]
 8004566:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800456a:	4332      	orrs	r2, r6
 800456c:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800456e:	0298      	lsls	r0, r3, #10
 8004570:	d506      	bpl.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x770>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004572:	4838      	ldr	r0, [pc, #224]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004574:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
 8004576:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004578:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800457c:	4332      	orrs	r2, r6
 800457e:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004580:	005a      	lsls	r2, r3, #1
 8004582:	d509      	bpl.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x788>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004584:	4a33      	ldr	r2, [pc, #204]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004586:	6910      	ldr	r0, [r2, #16]
 8004588:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800458c:	6110      	str	r0, [r2, #16]
 800458e:	6910      	ldr	r0, [r2, #16]
 8004590:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 8004594:	4330      	orrs	r0, r6
 8004596:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004598:	2b00      	cmp	r3, #0
 800459a:	da06      	bge.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x79a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800459c:	482d      	ldr	r0, [pc, #180]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800459e:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
 80045a0:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80045a2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80045a6:	4332      	orrs	r2, r6
 80045a8:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045aa:	021f      	lsls	r7, r3, #8
 80045ac:	d507      	bpl.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045ae:	4a29      	ldr	r2, [pc, #164]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80045b0:	f8d5 008c 	ldr.w	r0, [r5, #140]	@ 0x8c
 80045b4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80045b6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80045ba:	4303      	orrs	r3, r0
 80045bc:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80045be:	07ce      	lsls	r6, r1, #31
 80045c0:	d506      	bpl.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045c2:	2100      	movs	r1, #0
 80045c4:	f105 0008 	add.w	r0, r5, #8
 80045c8:	f7ff fb32 	bl	8003c30 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 80045cc:	4607      	mov	r7, r0
 80045ce:	b900      	cbnz	r0, 80045d2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch (PeriphClkInit->RngClockSelection)
 80045d0:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045d2:	686b      	ldr	r3, [r5, #4]
 80045d4:	079c      	lsls	r4, r3, #30
 80045d6:	d506      	bpl.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045d8:	2101      	movs	r1, #1
 80045da:	f105 0008 	add.w	r0, r5, #8
 80045de:	f7ff fb27 	bl	8003c30 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 80045e2:	4606      	mov	r6, r0
 80045e4:	b900      	cbnz	r0, 80045e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    switch (PeriphClkInit->RngClockSelection)
 80045e6:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045e8:	686b      	ldr	r3, [r5, #4]
 80045ea:	0758      	lsls	r0, r3, #29
 80045ec:	d506      	bpl.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045ee:	2102      	movs	r1, #2
 80045f0:	f105 0008 	add.w	r0, r5, #8
 80045f4:	f7ff fb1c 	bl	8003c30 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 80045f8:	4604      	mov	r4, r0
 80045fa:	b900      	cbnz	r0, 80045fe <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    switch (PeriphClkInit->RngClockSelection)
 80045fc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80045fe:	686b      	ldr	r3, [r5, #4]
 8004600:	0719      	lsls	r1, r3, #28
 8004602:	d506      	bpl.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x802>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004604:	2100      	movs	r1, #0
 8004606:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800460a:	f7ff fb89 	bl	8003d20 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800460e:	4606      	mov	r6, r0
 8004610:	b900      	cbnz	r0, 8004614 <HAL_RCCEx_PeriphCLKConfig+0x804>
    switch (PeriphClkInit->RngClockSelection)
 8004612:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004614:	686b      	ldr	r3, [r5, #4]
 8004616:	06da      	lsls	r2, r3, #27
 8004618:	d506      	bpl.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x818>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800461a:	2101      	movs	r1, #1
 800461c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004620:	f7ff fb7e 	bl	8003d20 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004624:	4604      	mov	r4, r0
 8004626:	b900      	cbnz	r0, 800462a <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch (PeriphClkInit->RngClockSelection)
 8004628:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800462a:	686b      	ldr	r3, [r5, #4]
 800462c:	069b      	lsls	r3, r3, #26
 800462e:	f100 80ca 	bmi.w	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  if (status == HAL_OK)
 8004632:	1e20      	subs	r0, r4, #0
 8004634:	bf18      	it	ne
 8004636:	2001      	movne	r0, #1
}
 8004638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800463c:	2101      	movs	r1, #1
 800463e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004642:	f7ff fb6d 	bl	8003d20 <RCCEx_PLL3_Config>
 8004646:	e6ac      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004648:	2601      	movs	r6, #1
 800464a:	4634      	mov	r4, r6
 800464c:	e6b5      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800464e:	4626      	mov	r6, r4
 8004650:	e6b3      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004652:	bf00      	nop
 8004654:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004658:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800465c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004660:	d003      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x85a>
 8004662:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004666:	f47f aeba 	bne.w	80043de <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    if (ret == HAL_OK)
 800466a:	b9ac      	cbnz	r4, 8004698 <HAL_RCCEx_PeriphCLKConfig+0x888>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800466c:	4a5b      	ldr	r2, [pc, #364]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800466e:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 8004672:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004674:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8004678:	430b      	orrs	r3, r1
 800467a:	6553      	str	r3, [r2, #84]	@ 0x54
 800467c:	e6b1      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800467e:	2100      	movs	r1, #0
 8004680:	f105 0008 	add.w	r0, r5, #8
 8004684:	f7ff fad4 	bl	8003c30 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004688:	4604      	mov	r4, r0
        break;
 800468a:	e7ee      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x85a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800468c:	2102      	movs	r1, #2
 800468e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8004692:	f7ff fb45 	bl	8003d20 <RCCEx_PLL3_Config>
 8004696:	e7f7      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8004698:	4626      	mov	r6, r4
 800469a:	e6a2      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800469c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80046a0:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 80046a4:	d003      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x89e>
 80046a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046aa:	f47f aeac 	bne.w	8004406 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    if (ret == HAL_OK)
 80046ae:	b9ac      	cbnz	r4, 80046dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046b0:	4a4a      	ldr	r2, [pc, #296]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 80046b2:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 80046b6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80046b8:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80046bc:	430b      	orrs	r3, r1
 80046be:	6593      	str	r3, [r2, #88]	@ 0x58
 80046c0:	e6a3      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046c2:	2100      	movs	r1, #0
 80046c4:	f105 0008 	add.w	r0, r5, #8
 80046c8:	f7ff fab2 	bl	8003c30 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046cc:	4604      	mov	r4, r0
        break;
 80046ce:	e7ee      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x89e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046d0:	2102      	movs	r1, #2
 80046d2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80046d6:	f7ff fb23 	bl	8003d20 <RCCEx_PLL3_Config>
 80046da:	e7f7      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80046dc:	4626      	mov	r6, r4
 80046de:	e694      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80046e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80046e4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80046e8:	d003      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80046ea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80046ee:	f47f ae9e 	bne.w	800442e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    if (ret == HAL_OK)
 80046f2:	b9ac      	cbnz	r4, 8004720 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80046f4:	4a39      	ldr	r2, [pc, #228]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 80046f6:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 80046fa:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80046fc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004700:	430b      	orrs	r3, r1
 8004702:	6593      	str	r3, [r2, #88]	@ 0x58
 8004704:	e695      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x622>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004706:	2100      	movs	r1, #0
 8004708:	f105 0008 	add.w	r0, r5, #8
 800470c:	f7ff fa90 	bl	8003c30 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004710:	4604      	mov	r4, r0
        break;
 8004712:	e7ee      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004714:	2102      	movs	r1, #2
 8004716:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800471a:	f7ff fb01 	bl	8003d20 <RCCEx_PLL3_Config>
 800471e:	e7f7      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8004720:	4626      	mov	r6, r4
 8004722:	e686      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x622>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004724:	2102      	movs	r1, #2
 8004726:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800472a:	f7ff faf9 	bl	8003d20 <RCCEx_PLL3_Config>
 800472e:	e6c3      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
    switch (PeriphClkInit->AdcClockSelection)
 8004730:	2601      	movs	r6, #1
 8004732:	4634      	mov	r4, r6
 8004734:	e6cc      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8004736:	4626      	mov	r6, r4
 8004738:	e6ca      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800473a:	4a28      	ldr	r2, [pc, #160]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800473c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800473e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004742:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004744:	b97c      	cbnz	r4, 8004766 <HAL_RCCEx_PeriphCLKConfig+0x956>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004746:	4a25      	ldr	r2, [pc, #148]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004748:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800474c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800474e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004752:	430b      	orrs	r3, r1
 8004754:	6553      	str	r3, [r2, #84]	@ 0x54
 8004756:	e6ce      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004758:	2101      	movs	r1, #1
 800475a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800475e:	f7ff fadf 	bl	8003d20 <RCCEx_PLL3_Config>
 8004762:	4604      	mov	r4, r0
        break;
 8004764:	e7ee      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004766:	4626      	mov	r6, r4
 8004768:	e6c5      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800476a:	4a1c      	ldr	r2, [pc, #112]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800476c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800476e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004772:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004774:	b974      	cbnz	r4, 8004794 <HAL_RCCEx_PeriphCLKConfig+0x984>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004776:	4a19      	ldr	r2, [pc, #100]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004778:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800477a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800477c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004780:	430b      	orrs	r3, r1
 8004782:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004784:	e6c4      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x700>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004786:	2102      	movs	r1, #2
 8004788:	f105 0008 	add.w	r0, r5, #8
 800478c:	f7ff fa50 	bl	8003c30 <RCCEx_PLL2_Config>
 8004790:	4604      	mov	r4, r0
        break;
 8004792:	e7ef      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004794:	4626      	mov	r6, r4
 8004796:	e6bb      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x700>
    switch (PeriphClkInit->RngClockSelection)
 8004798:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800479c:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80047a0:	f47f aed1 	bne.w	8004546 <HAL_RCCEx_PeriphCLKConfig+0x736>
    if (ret == HAL_OK)
 80047a4:	2c00      	cmp	r4, #0
 80047a6:	f47f aecf 	bne.w	8004548 <HAL_RCCEx_PeriphCLKConfig+0x738>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047aa:	4c0c      	ldr	r4, [pc, #48]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 80047ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80047ae:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80047b2:	4302      	orrs	r2, r0
 80047b4:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 80047b6:	4634      	mov	r4, r6
 80047b8:	e6c6      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x738>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ba:	4f08      	ldr	r7, [pc, #32]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 80047bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047be:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80047c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 80047c4:	e7ee      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047c6:	2102      	movs	r1, #2
 80047c8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80047cc:	f7ff faa8 	bl	8003d20 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80047d0:	2800      	cmp	r0, #0
 80047d2:	f43f af2e 	beq.w	8004632 <HAL_RCCEx_PeriphCLKConfig+0x822>
  return HAL_ERROR;
 80047d6:	2001      	movs	r0, #1
 80047d8:	e72e      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x828>
 80047da:	bf00      	nop
 80047dc:	58024400 	.word	0x58024400

080047e0 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80047e0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047e2:	f7ff f9df 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
 80047e6:	4b05      	ldr	r3, [pc, #20]	@ (80047fc <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80047e8:	4a05      	ldr	r2, [pc, #20]	@ (8004800 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80047f0:	5cd3      	ldrb	r3, [r2, r3]
 80047f2:	f003 031f 	and.w	r3, r3, #31
}
 80047f6:	40d8      	lsrs	r0, r3
 80047f8:	bd08      	pop	{r3, pc}
 80047fa:	bf00      	nop
 80047fc:	58024400 	.word	0x58024400
 8004800:	0801d4d9 	.word	0x0801d4d9

08004804 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004804:	494f      	ldr	r1, [pc, #316]	@ (8004944 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8004806:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004808:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800480a:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800480c:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 800480e:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004812:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004816:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 8004818:	f000 8090 	beq.w	800493c <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800481c:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004820:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004824:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004828:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800482c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004830:	4353      	muls	r3, r2
    switch (pllsource)
 8004832:	2c01      	cmp	r4, #1
 8004834:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004838:	ee06 3a90 	vmov	s13, r3
 800483c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8004840:	d06e      	beq.n	8004920 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 8004842:	2c02      	cmp	r4, #2
 8004844:	d05e      	beq.n	8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8004846:	2c00      	cmp	r4, #0
 8004848:	d16a      	bne.n	8004920 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800484a:	680b      	ldr	r3, [r1, #0]
 800484c:	069b      	lsls	r3, r3, #26
 800484e:	d547      	bpl.n	80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004850:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004852:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004854:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8004858:	4a3b      	ldr	r2, [pc, #236]	@ (8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800485a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800485e:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004860:	ee07 2a90 	vmov	s15, r2
 8004864:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8004868:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800486c:	ee07 3a10 	vmov	s14, r3
 8004870:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004874:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004878:	ee37 7a06 	vadd.f32	s14, s14, s12
 800487c:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004880:	4a30      	ldr	r2, [pc, #192]	@ (8004944 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8004882:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004884:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004888:	ee07 3a10 	vmov	s14, r3
 800488c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004890:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004894:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004898:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800489c:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80048a0:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80048a2:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80048a6:	ee07 3a10 	vmov	s14, r3
 80048aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80048ae:	ee37 7a06 	vadd.f32	s14, s14, s12
 80048b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80048b6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80048ba:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80048be:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80048c0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80048c4:	ee06 3a90 	vmov	s13, r3
 80048c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80048cc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80048d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80048d4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80048d8:	ee17 3a90 	vmov	r3, s15
 80048dc:	6083      	str	r3, [r0, #8]
}
 80048de:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048e0:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80048e2:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800494c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80048e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048f6:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048fa:	eec5 6a87 	vdiv.f32	s13, s11, s14
 80048fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8004902:	e7bd      	b.n	8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004904:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8004906:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800490a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800491e:	e7ec      	b.n	80048fa <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004920:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8004922:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8004954 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8004926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004936:	ee77 7a86 	vadd.f32	s15, s15, s12
 800493a:	e7de      	b.n	80048fa <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800493c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004940:	e7cc      	b.n	80048dc <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8004942:	bf00      	nop
 8004944:	58024400 	.word	0x58024400
 8004948:	03d09000 	.word	0x03d09000
 800494c:	4c742400 	.word	0x4c742400
 8004950:	4bbebc20 	.word	0x4bbebc20
 8004954:	4a742400 	.word	0x4a742400

08004958 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004958:	494f      	ldr	r1, [pc, #316]	@ (8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800495a:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800495c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800495e:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004960:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 8004962:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004966:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800496a:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 800496c:	f000 8090 	beq.w	8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004970:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004974:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004978:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800497c:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004984:	4353      	muls	r3, r2
    switch (pllsource)
 8004986:	2c01      	cmp	r4, #1
 8004988:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800498c:	ee06 3a90 	vmov	s13, r3
 8004990:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8004994:	d06e      	beq.n	8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 8004996:	2c02      	cmp	r4, #2
 8004998:	d05e      	beq.n	8004a58 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800499a:	2c00      	cmp	r4, #0
 800499c:	d16a      	bne.n	8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800499e:	680b      	ldr	r3, [r1, #0]
 80049a0:	069b      	lsls	r3, r3, #26
 80049a2:	d547      	bpl.n	8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049a4:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049a8:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 80049ac:	4a3b      	ldr	r2, [pc, #236]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049b2:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049b4:	ee07 2a90 	vmov	s15, r2
 80049b8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80049bc:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80049c0:	ee07 3a10 	vmov	s14, r3
 80049c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80049c8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80049cc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80049d0:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80049d4:	4a30      	ldr	r2, [pc, #192]	@ (8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 80049d6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80049d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80049dc:	ee07 3a10 	vmov	s14, r3
 80049e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80049e4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80049e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80049ec:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80049f0:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80049f4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80049f6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80049fa:	ee07 3a10 	vmov	s14, r3
 80049fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004a02:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004a06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a0a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004a0e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004a12:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004a14:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004a18:	ee06 3a90 	vmov	s13, r3
 8004a1c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004a20:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004a24:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004a28:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004a2c:	ee17 3a90 	vmov	r3, s15
 8004a30:	6083      	str	r3, [r0, #8]
}
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a34:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a36:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8004a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a4a:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a4e:	eec5 6a87 	vdiv.f32	s13, s11, s14
 8004a52:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8004a56:	e7bd      	b.n	80049d4 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a58:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a5a:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8004aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8004a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a6e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004a72:	e7ec      	b.n	8004a4e <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a74:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a76:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8004a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004a8e:	e7de      	b.n	8004a4e <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a90:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a94:	e7cc      	b.n	8004a30 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8004a96:	bf00      	nop
 8004a98:	58024400 	.word	0x58024400
 8004a9c:	03d09000 	.word	0x03d09000
 8004aa0:	4c742400 	.word	0x4c742400
 8004aa4:	4bbebc20 	.word	0x4bbebc20
 8004aa8:	4a742400 	.word	0x4a742400

08004aac <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004aac:	494f      	ldr	r1, [pc, #316]	@ (8004bec <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8004aae:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ab0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8004ab2:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004ab4:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll1m != 0U)
 8004ab6:	f416 7f7c 	tst.w	r6, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8004aba:	f3c6 1305 	ubfx	r3, r6, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004abe:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  if (pll1m != 0U)
 8004ac0:	f000 8090 	beq.w	8004be4 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ac4:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004ac8:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004acc:	f005 0201 	and.w	r2, r5, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ad0:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ad4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004ad8:	4353      	muls	r3, r2
    switch (pllsource)
 8004ada:	2c01      	cmp	r4, #1
 8004adc:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ae0:	ee06 3a90 	vmov	s13, r3
 8004ae4:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8004ae8:	d04e      	beq.n	8004b88 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8004aea:	2c02      	cmp	r4, #2
 8004aec:	d05e      	beq.n	8004bac <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 8004aee:	2c00      	cmp	r4, #0
 8004af0:	d16a      	bne.n	8004bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004af2:	680b      	ldr	r3, [r1, #0]
 8004af4:	069b      	lsls	r3, r3, #26
 8004af6:	d567      	bpl.n	8004bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004af8:	680a      	ldr	r2, [r1, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004afa:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004afc:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8004b00:	4a3b      	ldr	r2, [pc, #236]	@ (8004bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b06:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b08:	ee07 2a90 	vmov	s15, r2
 8004b0c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8004b10:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8004b14:	ee07 3a10 	vmov	s14, r3
 8004b18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b1c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004b20:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004b24:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8004b28:	4a30      	ldr	r2, [pc, #192]	@ (8004bec <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8004b2a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004b2c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004b30:	ee07 3a10 	vmov	s14, r3
 8004b34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b38:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004b3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004b40:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004b44:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8004b48:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004b4a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004b4e:	ee07 3a10 	vmov	s14, r3
 8004b52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b56:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004b5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004b5e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004b62:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004b66:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004b68:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004b6c:	ee06 3a90 	vmov	s13, r3
 8004b70:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004b74:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004b78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004b7c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004b80:	ee17 3a90 	vmov	r3, s15
 8004b84:	6083      	str	r3, [r0, #8]
}
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b88:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8004b8a:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8004bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8004b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9e:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ba2:	eec5 6a87 	vdiv.f32	s13, s11, s14
 8004ba6:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8004baa:	e7bd      	b.n	8004b28 <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bac:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8004bae:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8004bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8004bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004bc6:	e7ec      	b.n	8004ba2 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bc8:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8004bca:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8004bfc <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8004bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bde:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004be2:	e7de      	b.n	8004ba2 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004be4:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004be8:	e7cc      	b.n	8004b84 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8004bea:	bf00      	nop
 8004bec:	58024400 	.word	0x58024400
 8004bf0:	03d09000 	.word	0x03d09000
 8004bf4:	4a742400 	.word	0x4a742400
 8004bf8:	4bbebc20 	.word	0x4bbebc20
 8004bfc:	4c742400 	.word	0x4c742400

08004c00 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8004c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004c02:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8004c06:	430b      	orrs	r3, r1
 8004c08:	d114      	bne.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004c0a:	4b9e      	ldr	r3, [pc, #632]	@ (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004c0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c0e:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
 8004c12:	2a04      	cmp	r2, #4
 8004c14:	d82f      	bhi.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8004c16:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004c1a:	0108      	.short	0x0108
 8004c1c:	0005001d 	.word	0x0005001d
 8004c20:	00490165 	.word	0x00490165
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8004c2a:	d01b      	beq.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c2c:	a801      	add	r0, sp, #4
 8004c2e:	f7ff fe93 	bl	8004958 <HAL_RCCEx_GetPLL3ClockFreq>
 8004c32:	e016      	b.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004c34:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	d11e      	bne.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004c3c:	4b91      	ldr	r3, [pc, #580]	@ (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004c3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c40:	f402 72e0 	and.w	r2, r2, #448	@ 0x1c0
    switch (saiclocksource)
 8004c44:	2a80      	cmp	r2, #128	@ 0x80
 8004c46:	d0ed      	beq.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8004c48:	d80f      	bhi.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004c4a:	2a00      	cmp	r2, #0
 8004c4c:	f000 80ed 	beq.w	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 8004c50:	2a40      	cmp	r2, #64	@ 0x40
    switch (srcclk)
 8004c52:	d110      	bne.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004c5a:	d003      	beq.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c5c:	a801      	add	r0, sp, #4
 8004c5e:	f7ff fdd1 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c62:	9801      	ldr	r0, [sp, #4]
}
 8004c64:	b005      	add	sp, #20
 8004c66:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8004c6a:	2ac0      	cmp	r2, #192	@ 0xc0
 8004c6c:	f000 813a 	beq.w	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8004c70:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
    switch (saiclocksource)
 8004c74:	d01a      	beq.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = 0;
 8004c76:	2000      	movs	r0, #0
  return frequency;
 8004c78:	e7f4      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004c7a:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	d133      	bne.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8004c82:	4b80      	ldr	r3, [pc, #512]	@ (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004c84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c86:	f402 0260 	and.w	r2, r2, #14680064	@ 0xe00000
    switch (saiclocksource)
 8004c8a:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8004c8e:	d0c9      	beq.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8004c90:	d805      	bhi.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8004c92:	2a00      	cmp	r2, #0
 8004c94:	f000 80c9 	beq.w	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 8004c98:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8004c9c:	e7d9      	b.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8004c9e:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 8004ca2:	f000 811f 	beq.w	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8004ca6:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8004caa:	e7e3      	b.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004cac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004cae:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004cb0:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004cb4:	0748      	lsls	r0, r1, #29
 8004cb6:	d506      	bpl.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8004cb8:	b92a      	cbnz	r2, 8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cba:	681b      	ldr	r3, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cbc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004cc0:	4871      	ldr	r0, [pc, #452]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004cc2:	40d8      	lsrs	r0, r3
 8004cc4:	e7ce      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004cc6:	4b6f      	ldr	r3, [pc, #444]	@ (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004cc8:	6819      	ldr	r1, [r3, #0]
 8004cca:	05c9      	lsls	r1, r1, #23
 8004ccc:	d503      	bpl.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004cce:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8004cd2:	f000 8109 	beq.w	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8004cdc:	d0c2      	beq.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = HSE_VALUE;
 8004cde:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8004ce2:	486a      	ldr	r0, [pc, #424]	@ (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004ce4:	bf18      	it	ne
 8004ce6:	2000      	movne	r0, #0
 8004ce8:	e7bc      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004cea:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	d125      	bne.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004cf2:	4b64      	ldr	r3, [pc, #400]	@ (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004cf4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004cf6:	f002 62e0 	and.w	r2, r2, #117440512	@ 0x7000000
    switch (saiclocksource)
 8004cfa:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 8004cfe:	d091      	beq.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8004d00:	d805      	bhi.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004d02:	2a00      	cmp	r2, #0
 8004d04:	f000 8091 	beq.w	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 8004d08:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8004d0c:	e7a1      	b.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8004d0e:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 8004d12:	f000 80e7 	beq.w	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8004d16:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
    switch (srcclk)
 8004d1a:	d1ac      	bne.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d1e:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d20:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d24:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d26:	0748      	lsls	r0, r1, #29
 8004d28:	d501      	bpl.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8004d2a:	2a00      	cmp	r2, #0
 8004d2c:	d0c6      	beq.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d2e:	05d9      	lsls	r1, r3, #23
 8004d30:	d503      	bpl.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8004d32:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8004d36:	f000 80d7 	beq.w	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d3a:	4b52      	ldr	r3, [pc, #328]	@ (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004d3c:	e7cb      	b.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004d3e:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 8004d42:	430b      	orrs	r3, r1
 8004d44:	d114      	bne.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004d46:	4b4f      	ldr	r3, [pc, #316]	@ (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004d48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d4a:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
    switch (srcclk)
 8004d4e:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004d52:	f43f af67 	beq.w	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8004d56:	d804      	bhi.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8004d58:	2a00      	cmp	r2, #0
 8004d5a:	d066      	beq.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 8004d5c:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8004d60:	e777      	b.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8004d62:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8004d66:	f000 80bd 	beq.w	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8004d6a:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8004d6e:	e7d4      	b.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004d70:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8004d74:	430b      	orrs	r3, r1
 8004d76:	d134      	bne.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004d78:	4a42      	ldr	r2, [pc, #264]	@ (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004d7a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004d7c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8004d80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d84:	f000 808a 	beq.w	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8004d88:	d80d      	bhi.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8004d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d8e:	d016      	beq.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004d90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d94:	d01c      	beq.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f47f af6d 	bne.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
 8004d9c:	b005      	add	sp, #20
 8004d9e:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8004da2:	f7fe bf21 	b.w	8003be8 <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
 8004da6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004daa:	d07e      	beq.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 8004dac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
    switch (srcclk)
 8004db0:	f47f af61 	bne.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004db4:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
 8004db6:	4b35      	ldr	r3, [pc, #212]	@ (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004db8:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8004dbc:	e079      	b.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004dbe:	6810      	ldr	r0, [r2, #0]
 8004dc0:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004dc4:	f43f af4e 	beq.w	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dc8:	a801      	add	r0, sp, #4
 8004dca:	f7ff fd1b 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
 8004dce:	e034      	b.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004dd0:	6810      	ldr	r0, [r2, #0]
 8004dd2:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8004dd6:	f43f af45 	beq.w	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dda:	a801      	add	r0, sp, #4
 8004ddc:	f7ff fdbc 	bl	8004958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004de0:	e02b      	b.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004de2:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8004de6:	430b      	orrs	r3, r1
 8004de8:	d117      	bne.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004dea:	4b26      	ldr	r3, [pc, #152]	@ (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004dec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004dee:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
    switch (srcclk)
 8004df2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8004df6:	d006      	beq.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8004df8:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8004dfc:	d08e      	beq.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8004dfe:	2a00      	cmp	r2, #0
 8004e00:	f47f af39 	bne.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8004e04:	e726      	b.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8004e0c:	f43f af2a 	beq.w	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e10:	a801      	add	r0, sp, #4
 8004e12:	f7ff fda1 	bl	8004958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004e16:	9803      	ldr	r0, [sp, #12]
 8004e18:	e724      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004e1a:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	d116      	bne.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004e22:	4b18      	ldr	r3, [pc, #96]	@ (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004e24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 8004e26:	03d2      	lsls	r2, r2, #15
 8004e28:	d409      	bmi.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8004e30:	f43f af18 	beq.w	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e34:	a801      	add	r0, sp, #4
 8004e36:	f7ff fe39 	bl	8004aac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e3a:	9802      	ldr	r0, [sp, #8]
 8004e3c:	e712      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004e44:	f43f af0e 	beq.w	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e48:	a801      	add	r0, sp, #4
 8004e4a:	f7ff fcdb 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
 8004e4e:	e7e2      	b.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004e50:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8004e54:	430b      	orrs	r3, r1
 8004e56:	d12f      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004e58:	4a0a      	ldr	r2, [pc, #40]	@ (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004e5a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004e5c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 8004e60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e64:	d01a      	beq.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8004e66:	d813      	bhi.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
 8004e68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e6c:	d0a7      	beq.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004e6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e72:	d0ad      	beq.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f47f aefe 	bne.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
 8004e7a:	b005      	add	sp, #20
 8004e7c:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004e80:	f7ff bcae 	b.w	80047e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e84:	58024400 	.word	0x58024400
 8004e88:	03d09000 	.word	0x03d09000
 8004e8c:	017d7840 	.word	0x017d7840
    switch (srcclk)
 8004e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e94:	d009      	beq.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 8004e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e9a:	e789      	b.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e9c:	6810      	ldr	r0, [r2, #0]
 8004e9e:	f010 0004 	ands.w	r0, r0, #4
 8004ea2:	f43f aedf 	beq.w	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ea6:	6813      	ldr	r3, [r2, #0]
 8004ea8:	e708      	b.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004eaa:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 8004eac:	4b0f      	ldr	r3, [pc, #60]	@ (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004eae:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
          frequency = HSE_VALUE;
 8004eb2:	bf18      	it	ne
 8004eb4:	4618      	movne	r0, r3
 8004eb6:	e6d5      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004eb8:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 8004ebc:	4308      	orrs	r0, r1
 8004ebe:	f47f aeda 	bne.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004ec2:	4a0b      	ldr	r2, [pc, #44]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004ec4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004ec6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8004eca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ece:	d007      	beq.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8004ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ed4:	f43f af73 	beq.w	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f47f aecc 	bne.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8004ede:	e769      	b.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ee0:	6810      	ldr	r0, [r2, #0]
 8004ee2:	e7a3      	b.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004ee4:	4803      	ldr	r0, [pc, #12]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004ee6:	e6bd      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = CSI_VALUE;
 8004ee8:	4800      	ldr	r0, [pc, #0]	@ (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004eea:	e6bb      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004eec:	003d0900 	.word	0x003d0900
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	00bb8000 	.word	0x00bb8000

08004ef8 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8004ef8:	4770      	bx	lr
	...

08004efc <HAL_SDRAM_Init>:
{
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	460d      	mov	r5, r1
  if (hsdram == NULL)
 8004f00:	4604      	mov	r4, r0
 8004f02:	b1f0      	cbz	r0, 8004f42 <HAL_SDRAM_Init+0x46>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004f04:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8004f08:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004f0c:	b91b      	cbnz	r3, 8004f16 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8004f0e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004f12:	f7ff fff1 	bl	8004ef8 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004f16:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004f18:	1d21      	adds	r1, r4, #4
 8004f1a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004f1c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004f20:	f000 fc09 	bl	8005736 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004f24:	6862      	ldr	r2, [r4, #4]
 8004f26:	4629      	mov	r1, r5
 8004f28:	6820      	ldr	r0, [r4, #0]
 8004f2a:	f000 fc3c 	bl	80057a6 <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 8004f2e:	4a06      	ldr	r2, [pc, #24]	@ (8004f48 <HAL_SDRAM_Init+0x4c>)
  return HAL_OK;
 8004f30:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8004f32:	6813      	ldr	r3, [r2, #0]
 8004f34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f38:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 8004f40:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004f42:	2001      	movs	r0, #1
 8004f44:	e7fc      	b.n	8004f40 <HAL_SDRAM_Init+0x44>
 8004f46:	bf00      	nop
 8004f48:	52004000 	.word	0x52004000

08004f4c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004f4c:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004f4e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 8004f52:	4605      	mov	r5, r0
 8004f54:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004f56:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004f58:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8004f5a:	d010      	beq.n	8004f7e <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8004f5c:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 8004f60:	2c01      	cmp	r4, #1
 8004f62:	d110      	bne.n	8004f86 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004f64:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004f66:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004f68:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004f6c:	f000 fc51 	bl	8005812 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004f70:	6833      	ldr	r3, [r6, #0]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d104      	bne.n	8004f80 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004f76:	2305      	movs	r3, #5
 8004f78:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004f7c:	2000      	movs	r0, #0
}
 8004f7e:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8004f80:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 8004f84:	e7fa      	b.n	8004f7c <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8004f86:	2001      	movs	r0, #1
 8004f88:	e7f9      	b.n	8004f7e <HAL_SDRAM_SendCommand+0x32>

08004f8a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004f8a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004f8c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 8004f90:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	b2d8      	uxtb	r0, r3
 8004f96:	d00d      	beq.n	8004fb4 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8004f98:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	b2dd      	uxtb	r5, r3
 8004fa0:	d109      	bne.n	8004fb6 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004fa2:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004fa4:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004fa6:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004faa:	f000 fc44 	bl	8005836 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004fae:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004fb0:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 8004fb4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004fb6:	2001      	movs	r0, #1
 8004fb8:	e7fc      	b.n	8004fb4 <HAL_SDRAM_ProgramRefreshRate+0x2a>
	...

08004fbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fbc:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fbe:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	e852 3f00 	ldrex	r3, [r2]
 8004fc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004fcc:	6802      	ldr	r2, [r0, #0]
 8004fce:	2900      	cmp	r1, #0
 8004fd0:	d1f5      	bne.n	8004fbe <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fd2:	4c0f      	ldr	r4, [pc, #60]	@ (8005010 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	f102 0308 	add.w	r3, r2, #8
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fde:	f102 0c08 	add.w	ip, r2, #8
 8004fe2:	e84c 3100 	strex	r1, r3, [ip]
 8004fe6:	2900      	cmp	r1, #0
 8004fe8:	d1f4      	bne.n	8004fd4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fea:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d107      	bne.n	8005000 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	e842 3100 	strex	r1, r3, [r2]
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	d1f7      	bne.n	8004ff0 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005000:	2320      	movs	r3, #32
 8005002:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005006:	2300      	movs	r3, #0
 8005008:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800500a:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800500c:	bd10      	pop	{r4, pc}
 800500e:	bf00      	nop
 8005010:	effffffe 	.word	0xeffffffe

08005014 <UART_SetConfig>:
{
 8005014:	b530      	push	{r4, r5, lr}
 8005016:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005018:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800501a:	69c0      	ldr	r0, [r0, #28]
{
 800501c:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800501e:	6921      	ldr	r1, [r4, #16]
 8005020:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005022:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005024:	430a      	orrs	r2, r1
 8005026:	6961      	ldr	r1, [r4, #20]
 8005028:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800502a:	499c      	ldr	r1, [pc, #624]	@ (800529c <UART_SetConfig+0x288>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800502c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800502e:	4029      	ands	r1, r5
 8005030:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005032:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005034:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800503c:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800503e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005040:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005042:	4a97      	ldr	r2, [pc, #604]	@ (80052a0 <UART_SetConfig+0x28c>)
 8005044:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8005046:	bf1c      	itt	ne
 8005048:	6a22      	ldrne	r2, [r4, #32]
 800504a:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 8005052:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 8005056:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005058:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800505a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800505c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800505e:	f022 020f 	bic.w	r2, r2, #15
 8005062:	430a      	orrs	r2, r1
 8005064:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005066:	4a8f      	ldr	r2, [pc, #572]	@ (80052a4 <UART_SetConfig+0x290>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d128      	bne.n	80050be <UART_SetConfig+0xaa>
 800506c:	4b8e      	ldr	r3, [pc, #568]	@ (80052a8 <UART_SetConfig+0x294>)
 800506e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005070:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005074:	2b18      	cmp	r3, #24
 8005076:	f000 812f 	beq.w	80052d8 <UART_SetConfig+0x2c4>
 800507a:	d814      	bhi.n	80050a6 <UART_SetConfig+0x92>
 800507c:	2b08      	cmp	r3, #8
 800507e:	f000 8154 	beq.w	800532a <UART_SetConfig+0x316>
 8005082:	2b10      	cmp	r3, #16
 8005084:	f000 8102 	beq.w	800528c <UART_SetConfig+0x278>
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 80f9 	beq.w	8005280 <UART_SetConfig+0x26c>
 800508e:	2380      	movs	r3, #128	@ 0x80
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005090:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005094:	f040 80b4 	bne.w	8005200 <UART_SetConfig+0x1ec>
    switch (clocksource)
 8005098:	2b08      	cmp	r3, #8
 800509a:	d846      	bhi.n	800512a <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800509c:	4668      	mov	r0, sp
 800509e:	f7ff fbb1 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050a2:	9801      	ldr	r0, [sp, #4]
        break;
 80050a4:	e0e9      	b.n	800527a <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	f000 80dd 	beq.w	8005266 <UART_SetConfig+0x252>
 80050ac:	2b28      	cmp	r3, #40	@ 0x28
 80050ae:	d1ee      	bne.n	800508e <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80050b4:	f000 811d 	beq.w	80052f2 <UART_SetConfig+0x2de>
        pclk = (uint32_t) LSE_VALUE;
 80050b8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80050bc:	e0be      	b.n	800523c <UART_SetConfig+0x228>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050be:	4a7b      	ldr	r2, [pc, #492]	@ (80052ac <UART_SetConfig+0x298>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d115      	bne.n	80050f0 <UART_SetConfig+0xdc>
 80050c4:	4b78      	ldr	r3, [pc, #480]	@ (80052a8 <UART_SetConfig+0x294>)
 80050c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	2b05      	cmp	r3, #5
 80050ce:	d82c      	bhi.n	800512a <UART_SetConfig+0x116>
 80050d0:	a201      	add	r2, pc, #4	@ (adr r2, 80050d8 <UART_SetConfig+0xc4>)
 80050d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d6:	bf00      	nop
 80050d8:	08005271 	.word	0x08005271
 80050dc:	080051fd 	.word	0x080051fd
 80050e0:	0800528d 	.word	0x0800528d
 80050e4:	080052d9 	.word	0x080052d9
 80050e8:	08005267 	.word	0x08005267
 80050ec:	080050b1 	.word	0x080050b1
 80050f0:	4a6f      	ldr	r2, [pc, #444]	@ (80052b0 <UART_SetConfig+0x29c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d0e6      	beq.n	80050c4 <UART_SetConfig+0xb0>
 80050f6:	4a6f      	ldr	r2, [pc, #444]	@ (80052b4 <UART_SetConfig+0x2a0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d0e3      	beq.n	80050c4 <UART_SetConfig+0xb0>
 80050fc:	4a6e      	ldr	r2, [pc, #440]	@ (80052b8 <UART_SetConfig+0x2a4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d0e0      	beq.n	80050c4 <UART_SetConfig+0xb0>
 8005102:	4a6e      	ldr	r2, [pc, #440]	@ (80052bc <UART_SetConfig+0x2a8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d118      	bne.n	800513a <UART_SetConfig+0x126>
 8005108:	4b67      	ldr	r3, [pc, #412]	@ (80052a8 <UART_SetConfig+0x294>)
 800510a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005110:	2b18      	cmp	r3, #24
 8005112:	f000 80e1 	beq.w	80052d8 <UART_SetConfig+0x2c4>
 8005116:	d80a      	bhi.n	800512e <UART_SetConfig+0x11a>
 8005118:	2b08      	cmp	r3, #8
 800511a:	f000 8106 	beq.w	800532a <UART_SetConfig+0x316>
 800511e:	2b10      	cmp	r3, #16
 8005120:	f000 80b4 	beq.w	800528c <UART_SetConfig+0x278>
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 80ab 	beq.w	8005280 <UART_SetConfig+0x26c>
        pclk = (uint32_t) CSI_VALUE;
 800512a:	2001      	movs	r0, #1
 800512c:	e049      	b.n	80051c2 <UART_SetConfig+0x1ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800512e:	2b20      	cmp	r3, #32
 8005130:	f000 8099 	beq.w	8005266 <UART_SetConfig+0x252>
 8005134:	2b28      	cmp	r3, #40	@ 0x28
 8005136:	d0bb      	beq.n	80050b0 <UART_SetConfig+0x9c>
 8005138:	e7f7      	b.n	800512a <UART_SetConfig+0x116>
 800513a:	4a61      	ldr	r2, [pc, #388]	@ (80052c0 <UART_SetConfig+0x2ac>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d0c1      	beq.n	80050c4 <UART_SetConfig+0xb0>
 8005140:	4a60      	ldr	r2, [pc, #384]	@ (80052c4 <UART_SetConfig+0x2b0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d0be      	beq.n	80050c4 <UART_SetConfig+0xb0>
 8005146:	4a56      	ldr	r2, [pc, #344]	@ (80052a0 <UART_SetConfig+0x28c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d1ee      	bne.n	800512a <UART_SetConfig+0x116>
 800514c:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 8005150:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	2b05      	cmp	r3, #5
 8005158:	d8e7      	bhi.n	800512a <UART_SetConfig+0x116>
 800515a:	e8df f003 	tbb	[pc, r3]
 800515e:	2b49      	.short	0x2b49
 8005160:	4c033f3a 	.word	0x4c033f3a
        pclk = (uint32_t) CSI_VALUE;
 8005164:	4858      	ldr	r0, [pc, #352]	@ (80052c8 <UART_SetConfig+0x2b4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005166:	4b59      	ldr	r3, [pc, #356]	@ (80052cc <UART_SetConfig+0x2b8>)
 8005168:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800516a:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800516c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005170:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005174:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005178:	4299      	cmp	r1, r3
 800517a:	d8d6      	bhi.n	800512a <UART_SetConfig+0x116>
 800517c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005180:	d8d3      	bhi.n	800512a <UART_SetConfig+0x116>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005182:	2300      	movs	r3, #0
 8005184:	4619      	mov	r1, r3
 8005186:	f7fb f903 	bl	8000390 <__aeabi_uldivmod>
 800518a:	462a      	mov	r2, r5
 800518c:	0209      	lsls	r1, r1, #8
 800518e:	086b      	lsrs	r3, r5, #1
 8005190:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8005194:	0200      	lsls	r0, r0, #8
 8005196:	18c0      	adds	r0, r0, r3
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	f141 0100 	adc.w	r1, r1, #0
 80051a0:	f7fb f8f6 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051a4:	4b4a      	ldr	r3, [pc, #296]	@ (80052d0 <UART_SetConfig+0x2bc>)
 80051a6:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d8bd      	bhi.n	800512a <UART_SetConfig+0x116>
          huart->Instance->BRR = usartdiv;
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	60d8      	str	r0, [r3, #12]
 80051b2:	e005      	b.n	80051c0 <UART_SetConfig+0x1ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051b4:	4668      	mov	r0, sp
 80051b6:	f7ff fb25 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80051ba:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 80051bc:	2800      	cmp	r0, #0
 80051be:	d1d2      	bne.n	8005166 <UART_SetConfig+0x152>
        pclk = (uint32_t) CSI_VALUE;
 80051c0:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 80051c2:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80051c6:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80051c8:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80051ca:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 80051ce:	b007      	add	sp, #28
 80051d0:	bd30      	pop	{r4, r5, pc}
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051d2:	a803      	add	r0, sp, #12
 80051d4:	f7ff fbc0 	bl	8004958 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80051d8:	9804      	ldr	r0, [sp, #16]
        break;
 80051da:	e7ef      	b.n	80051bc <UART_SetConfig+0x1a8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051dc:	6813      	ldr	r3, [r2, #0]
 80051de:	483d      	ldr	r0, [pc, #244]	@ (80052d4 <UART_SetConfig+0x2c0>)
 80051e0:	f013 0f20 	tst.w	r3, #32
 80051e4:	d0bf      	beq.n	8005166 <UART_SetConfig+0x152>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80051e6:	6813      	ldr	r3, [r2, #0]
 80051e8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80051ec:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80051ee:	e7ba      	b.n	8005166 <UART_SetConfig+0x152>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80051f0:	f7ff faf6 	bl	80047e0 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 80051f4:	e7e2      	b.n	80051bc <UART_SetConfig+0x1a8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051f6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80051fa:	e7b4      	b.n	8005166 <UART_SetConfig+0x152>
 80051fc:	2304      	movs	r3, #4
 80051fe:	e747      	b.n	8005090 <UART_SetConfig+0x7c>
    switch (clocksource)
 8005200:	2b08      	cmp	r3, #8
 8005202:	d892      	bhi.n	800512a <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005204:	4668      	mov	r0, sp
 8005206:	f7ff fafd 	bl	8004804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800520a:	9801      	ldr	r0, [sp, #4]
        break;
 800520c:	e001      	b.n	8005212 <UART_SetConfig+0x1fe>
        pclk = HAL_RCC_GetPCLK1Freq();
 800520e:	f7fe fceb 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005212:	2800      	cmp	r0, #0
 8005214:	d0d4      	beq.n	80051c0 <UART_SetConfig+0x1ac>
 8005216:	e011      	b.n	800523c <UART_SetConfig+0x228>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005218:	f7fe fcf8 	bl	8003c0c <HAL_RCC_GetPCLK2Freq>
        break;
 800521c:	e7f9      	b.n	8005212 <UART_SetConfig+0x1fe>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800521e:	a803      	add	r0, sp, #12
 8005220:	f7ff fb9a 	bl	8004958 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005224:	9804      	ldr	r0, [sp, #16]
        break;
 8005226:	e7f4      	b.n	8005212 <UART_SetConfig+0x1fe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005228:	4b1f      	ldr	r3, [pc, #124]	@ (80052a8 <UART_SetConfig+0x294>)
 800522a:	482a      	ldr	r0, [pc, #168]	@ (80052d4 <UART_SetConfig+0x2c0>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	f012 0f20 	tst.w	r2, #32
 8005232:	d003      	beq.n	800523c <UART_SetConfig+0x228>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800523a:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800523c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800523e:	4b23      	ldr	r3, [pc, #140]	@ (80052cc <UART_SetConfig+0x2b8>)
 8005240:	6862      	ldr	r2, [r4, #4]
 8005242:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005246:	fbb0 f3f3 	udiv	r3, r0, r3
 800524a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800524e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005252:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005256:	f1a3 0110 	sub.w	r1, r3, #16
 800525a:	4291      	cmp	r1, r2
 800525c:	f63f af65 	bhi.w	800512a <UART_SetConfig+0x116>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005260:	6822      	ldr	r2, [r4, #0]
 8005262:	60d3      	str	r3, [r2, #12]
 8005264:	e7ac      	b.n	80051c0 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005266:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800526a:	4817      	ldr	r0, [pc, #92]	@ (80052c8 <UART_SetConfig+0x2b4>)
 800526c:	d1e6      	bne.n	800523c <UART_SetConfig+0x228>
 800526e:	e040      	b.n	80052f2 <UART_SetConfig+0x2de>
 8005270:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005274:	d1cb      	bne.n	800520e <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005276:	f7fe fcb7 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800527a:	2800      	cmp	r0, #0
 800527c:	d0a0      	beq.n	80051c0 <UART_SetConfig+0x1ac>
 800527e:	e038      	b.n	80052f2 <UART_SetConfig+0x2de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005280:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005284:	d1c8      	bne.n	8005218 <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005286:	f7fe fcc1 	bl	8003c0c <HAL_RCC_GetPCLK2Freq>
        break;
 800528a:	e7f6      	b.n	800527a <UART_SetConfig+0x266>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800528c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005290:	d1c5      	bne.n	800521e <UART_SetConfig+0x20a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005292:	a803      	add	r0, sp, #12
 8005294:	f7ff fb60 	bl	8004958 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005298:	9804      	ldr	r0, [sp, #16]
        break;
 800529a:	e7ee      	b.n	800527a <UART_SetConfig+0x266>
 800529c:	cfff69f3 	.word	0xcfff69f3
 80052a0:	58000c00 	.word	0x58000c00
 80052a4:	40011000 	.word	0x40011000
 80052a8:	58024400 	.word	0x58024400
 80052ac:	40004400 	.word	0x40004400
 80052b0:	40004800 	.word	0x40004800
 80052b4:	40004c00 	.word	0x40004c00
 80052b8:	40005000 	.word	0x40005000
 80052bc:	40011400 	.word	0x40011400
 80052c0:	40007800 	.word	0x40007800
 80052c4:	40007c00 	.word	0x40007c00
 80052c8:	003d0900 	.word	0x003d0900
 80052cc:	0801d4f4 	.word	0x0801d4f4
 80052d0:	000ffcff 	.word	0x000ffcff
 80052d4:	03d09000 	.word	0x03d09000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80052dc:	d1a4      	bne.n	8005228 <UART_SetConfig+0x214>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052de:	4b15      	ldr	r3, [pc, #84]	@ (8005334 <UART_SetConfig+0x320>)
 80052e0:	4815      	ldr	r0, [pc, #84]	@ (8005338 <UART_SetConfig+0x324>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	f012 0f20 	tst.w	r2, #32
 80052e8:	d003      	beq.n	80052f2 <UART_SetConfig+0x2de>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80052f0:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052f2:	4b12      	ldr	r3, [pc, #72]	@ (800533c <UART_SetConfig+0x328>)
 80052f4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80052f6:	6861      	ldr	r1, [r4, #4]
 80052f8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80052fc:	084b      	lsrs	r3, r1, #1
 80052fe:	fbb0 f2f2 	udiv	r2, r0, r2
 8005302:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005306:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800530a:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800530e:	f1a3 0110 	sub.w	r1, r3, #16
 8005312:	4291      	cmp	r1, r2
 8005314:	f63f af09 	bhi.w	800512a <UART_SetConfig+0x116>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005318:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800531c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8005320:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005322:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8005324:	4313      	orrs	r3, r2
 8005326:	60cb      	str	r3, [r1, #12]
 8005328:	e74a      	b.n	80051c0 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800532a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800532e:	f47f af69 	bne.w	8005204 <UART_SetConfig+0x1f0>
 8005332:	e6b3      	b.n	800509c <UART_SetConfig+0x88>
 8005334:	58024400 	.word	0x58024400
 8005338:	03d09000 	.word	0x03d09000
 800533c:	0801d4f4 	.word	0x0801d4f4

08005340 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005340:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005342:	071a      	lsls	r2, r3, #28
{
 8005344:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005346:	d506      	bpl.n	8005356 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005348:	6801      	ldr	r1, [r0, #0]
 800534a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800534c:	684a      	ldr	r2, [r1, #4]
 800534e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005352:	4322      	orrs	r2, r4
 8005354:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005356:	07dc      	lsls	r4, r3, #31
 8005358:	d506      	bpl.n	8005368 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800535a:	6801      	ldr	r1, [r0, #0]
 800535c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800535e:	684a      	ldr	r2, [r1, #4]
 8005360:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005364:	4322      	orrs	r2, r4
 8005366:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005368:	0799      	lsls	r1, r3, #30
 800536a:	d506      	bpl.n	800537a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800536c:	6801      	ldr	r1, [r0, #0]
 800536e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005370:	684a      	ldr	r2, [r1, #4]
 8005372:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005376:	4322      	orrs	r2, r4
 8005378:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800537a:	075a      	lsls	r2, r3, #29
 800537c:	d506      	bpl.n	800538c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800537e:	6801      	ldr	r1, [r0, #0]
 8005380:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8005382:	684a      	ldr	r2, [r1, #4]
 8005384:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005388:	4322      	orrs	r2, r4
 800538a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800538c:	06dc      	lsls	r4, r3, #27
 800538e:	d506      	bpl.n	800539e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005390:	6801      	ldr	r1, [r0, #0]
 8005392:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005394:	688a      	ldr	r2, [r1, #8]
 8005396:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800539a:	4322      	orrs	r2, r4
 800539c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800539e:	0699      	lsls	r1, r3, #26
 80053a0:	d506      	bpl.n	80053b0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053a2:	6801      	ldr	r1, [r0, #0]
 80053a4:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80053a6:	688a      	ldr	r2, [r1, #8]
 80053a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053ac:	4322      	orrs	r2, r4
 80053ae:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053b0:	065a      	lsls	r2, r3, #25
 80053b2:	d510      	bpl.n	80053d6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053b4:	6801      	ldr	r1, [r0, #0]
 80053b6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80053b8:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053ba:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053be:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80053c2:	ea42 0204 	orr.w	r2, r2, r4
 80053c6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053c8:	d105      	bne.n	80053d6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053ca:	684a      	ldr	r2, [r1, #4]
 80053cc:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80053ce:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80053d2:	4322      	orrs	r2, r4
 80053d4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053d6:	061b      	lsls	r3, r3, #24
 80053d8:	d506      	bpl.n	80053e8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053da:	6802      	ldr	r2, [r0, #0]
 80053dc:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80053de:	6853      	ldr	r3, [r2, #4]
 80053e0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80053e4:	430b      	orrs	r3, r1
 80053e6:	6053      	str	r3, [r2, #4]
}
 80053e8:	bd10      	pop	{r4, pc}

080053ea <UART_WaitOnFlagUntilTimeout>:
{
 80053ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053ee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053f2:	4604      	mov	r4, r0
 80053f4:	460d      	mov	r5, r1
 80053f6:	4617      	mov	r7, r2
 80053f8:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053fa:	6822      	ldr	r2, [r4, #0]
 80053fc:	69d3      	ldr	r3, [r2, #28]
 80053fe:	ea35 0303 	bics.w	r3, r5, r3
 8005402:	bf0c      	ite	eq
 8005404:	2301      	moveq	r3, #1
 8005406:	2300      	movne	r3, #0
 8005408:	42bb      	cmp	r3, r7
 800540a:	d001      	beq.n	8005410 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800540c:	2000      	movs	r0, #0
 800540e:	e022      	b.n	8005456 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8005410:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8005414:	d0f2      	beq.n	80053fc <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005416:	f7fc fe91 	bl	800213c <HAL_GetTick>
 800541a:	eba0 0008 	sub.w	r0, r0, r8
 800541e:	4548      	cmp	r0, r9
 8005420:	d829      	bhi.n	8005476 <UART_WaitOnFlagUntilTimeout+0x8c>
 8005422:	f1b9 0f00 	cmp.w	r9, #0
 8005426:	d026      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005428:	6821      	ldr	r1, [r4, #0]
 800542a:	680b      	ldr	r3, [r1, #0]
 800542c:	075a      	lsls	r2, r3, #29
 800542e:	d5e4      	bpl.n	80053fa <UART_WaitOnFlagUntilTimeout+0x10>
 8005430:	2d80      	cmp	r5, #128	@ 0x80
 8005432:	d0e2      	beq.n	80053fa <UART_WaitOnFlagUntilTimeout+0x10>
 8005434:	2d40      	cmp	r5, #64	@ 0x40
 8005436:	d0e0      	beq.n	80053fa <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005438:	69ce      	ldr	r6, [r1, #28]
 800543a:	f016 0608 	ands.w	r6, r6, #8
 800543e:	d00c      	beq.n	800545a <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005440:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8005442:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005444:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8005446:	f7ff fdb9 	bl	8004fbc <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 800544a:	2300      	movs	r3, #0
          return HAL_ERROR;
 800544c:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800544e:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8005452:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8005456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800545a:	69cb      	ldr	r3, [r1, #28]
 800545c:	051b      	lsls	r3, r3, #20
 800545e:	d5cc      	bpl.n	80053fa <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005460:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 8005464:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005466:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8005468:	f7ff fda8 	bl	8004fbc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800546c:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 800546e:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005472:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
 8005476:	2003      	movs	r0, #3
 8005478:	e7ed      	b.n	8005456 <UART_WaitOnFlagUntilTimeout+0x6c>

0800547a <HAL_UART_Transmit>:
{
 800547a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800547e:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005480:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8005484:	4604      	mov	r4, r0
 8005486:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8005488:	2b20      	cmp	r3, #32
{
 800548a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800548c:	d146      	bne.n	800551c <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 800548e:	2900      	cmp	r1, #0
 8005490:	d046      	beq.n	8005520 <HAL_UART_Transmit+0xa6>
 8005492:	2a00      	cmp	r2, #0
 8005494:	d044      	beq.n	8005520 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005496:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005498:	2500      	movs	r5, #0
 800549a:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800549e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 80054a2:	f7fc fe4b 	bl	800213c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a6:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80054a8:	4681      	mov	r9, r0
    huart->TxXferSize  = Size;
 80054aa:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 80054b2:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054b6:	d103      	bne.n	80054c0 <HAL_UART_Transmit+0x46>
 80054b8:	6923      	ldr	r3, [r4, #16]
 80054ba:	b90b      	cbnz	r3, 80054c0 <HAL_UART_Transmit+0x46>
 80054bc:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80054be:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80054c0:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054c4:	464b      	mov	r3, r9
 80054c6:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80054ca:	b292      	uxth	r2, r2
 80054cc:	b942      	cbnz	r2, 80054e0 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054ce:	2140      	movs	r1, #64	@ 0x40
 80054d0:	4620      	mov	r0, r4
 80054d2:	f7ff ff8a 	bl	80053ea <UART_WaitOnFlagUntilTimeout>
 80054d6:	2320      	movs	r3, #32
 80054d8:	b948      	cbnz	r0, 80054ee <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 80054da:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 80054de:	e009      	b.n	80054f4 <HAL_UART_Transmit+0x7a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054e0:	2200      	movs	r2, #0
 80054e2:	2180      	movs	r1, #128	@ 0x80
 80054e4:	4620      	mov	r0, r4
 80054e6:	f7ff ff80 	bl	80053ea <UART_WaitOnFlagUntilTimeout>
 80054ea:	b130      	cbz	r0, 80054fa <HAL_UART_Transmit+0x80>
        huart->gState = HAL_UART_STATE_READY;
 80054ec:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80054ee:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80054f0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 80054f4:	b003      	add	sp, #12
 80054f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054fa:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80054fc:	b95e      	cbnz	r6, 8005516 <HAL_UART_Transmit+0x9c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054fe:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005502:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005506:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8005508:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 800550c:	3a01      	subs	r2, #1
 800550e:	b292      	uxth	r2, r2
 8005510:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 8005514:	e7d4      	b.n	80054c0 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005516:	f816 3b01 	ldrb.w	r3, [r6], #1
 800551a:	e7f4      	b.n	8005506 <HAL_UART_Transmit+0x8c>
    return HAL_BUSY;
 800551c:	2002      	movs	r0, #2
 800551e:	e7e9      	b.n	80054f4 <HAL_UART_Transmit+0x7a>
      return  HAL_ERROR;
 8005520:	2001      	movs	r0, #1
 8005522:	e7e7      	b.n	80054f4 <HAL_UART_Transmit+0x7a>

08005524 <UART_CheckIdleState>:
{
 8005524:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005526:	2600      	movs	r6, #0
{
 8005528:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552a:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800552e:	f7fc fe05 	bl	800213c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005532:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005534:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	071a      	lsls	r2, r3, #28
 800553a:	d51c      	bpl.n	8005576 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800553c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005540:	4632      	mov	r2, r6
 8005542:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	4603      	mov	r3, r0
 800554a:	4620      	mov	r0, r4
 800554c:	f7ff ff4d 	bl	80053ea <UART_WaitOnFlagUntilTimeout>
 8005550:	b188      	cbz	r0, 8005576 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005552:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005554:	e852 3f00 	ldrex	r3, [r2]
 8005558:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	e842 3100 	strex	r1, r3, [r2]
 8005560:	2900      	cmp	r1, #0
 8005562:	d1f6      	bne.n	8005552 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8005564:	2320      	movs	r3, #32
 8005566:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800556a:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800556c:	2300      	movs	r3, #0
 800556e:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8005572:	b002      	add	sp, #8
 8005574:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	075b      	lsls	r3, r3, #29
 800557c:	d524      	bpl.n	80055c8 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800557e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005582:	2200      	movs	r2, #0
 8005584:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005588:	4620      	mov	r0, r4
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	462b      	mov	r3, r5
 800558e:	f7ff ff2c 	bl	80053ea <UART_WaitOnFlagUntilTimeout>
 8005592:	b1c8      	cbz	r0, 80055c8 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005594:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	e852 3f00 	ldrex	r3, [r2]
 800559a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80055a2:	6822      	ldr	r2, [r4, #0]
 80055a4:	2900      	cmp	r1, #0
 80055a6:	d1f5      	bne.n	8005594 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	f102 0308 	add.w	r3, r2, #8
 80055ac:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	f102 0008 	add.w	r0, r2, #8
 80055b8:	e840 3100 	strex	r1, r3, [r0]
 80055bc:	2900      	cmp	r1, #0
 80055be:	d1f3      	bne.n	80055a8 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 80055c0:	2320      	movs	r3, #32
 80055c2:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 80055c6:	e7d0      	b.n	800556a <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 80055c8:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ca:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80055cc:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80055d0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d4:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055d6:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 80055d8:	e7c8      	b.n	800556c <UART_CheckIdleState+0x48>

080055da <HAL_UART_Init>:
{
 80055da:	b510      	push	{r4, lr}
  if (huart == NULL)
 80055dc:	4604      	mov	r4, r0
 80055de:	b350      	cbz	r0, 8005636 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80055e0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80055e4:	b91b      	cbnz	r3, 80055ee <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80055e6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80055ea:	f7fb fe8d 	bl	8001308 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80055ee:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80055f0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80055f2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80055f6:	6813      	ldr	r3, [r2, #0]
 80055f8:	f023 0301 	bic.w	r3, r3, #1
 80055fc:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055fe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005600:	b113      	cbz	r3, 8005608 <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 8005602:	4620      	mov	r0, r4
 8005604:	f7ff fe9c 	bl	8005340 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005608:	4620      	mov	r0, r4
 800560a:	f7ff fd03 	bl	8005014 <UART_SetConfig>
 800560e:	2801      	cmp	r0, #1
 8005610:	d011      	beq.n	8005636 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005612:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8005614:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800561c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005624:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	f042 0201 	orr.w	r2, r2, #1
}
 800562c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8005630:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005632:	f7ff bf77 	b.w	8005524 <UART_CheckIdleState>
}
 8005636:	2001      	movs	r0, #1
 8005638:	bd10      	pop	{r4, pc}
	...

0800563c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800563c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 800563e:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005640:	b92b      	cbnz	r3, 800564e <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 8005642:	2301      	movs	r3, #1
 8005644:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005648:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800564c:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800564e:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005650:	4d09      	ldr	r5, [pc, #36]	@ (8005678 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005652:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005654:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005656:	4c09      	ldr	r4, [pc, #36]	@ (800567c <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005658:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800565c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800565e:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005660:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	fbb3 f3f1 	udiv	r3, r3, r1
 8005668:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800566c:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 800566e:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8005676:	e7e7      	b.n	8005648 <UARTEx_SetNbDataToProcess+0xc>
 8005678:	0801d514 	.word	0x0801d514
 800567c:	0801d50c 	.word	0x0801d50c

08005680 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8005680:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8005684:	2b01      	cmp	r3, #1
 8005686:	d014      	beq.n	80056b2 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005688:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800568a:	2324      	movs	r3, #36	@ 0x24
 800568c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005690:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005692:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005694:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8005698:	f023 0301 	bic.w	r3, r3, #1
 800569c:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800569e:	2300      	movs	r3, #0
 80056a0:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056a2:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80056a4:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80056a6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 80056aa:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  return HAL_OK;
 80056ae:	4618      	mov	r0, r3
 80056b0:	4770      	bx	lr
  __HAL_LOCK(huart);
 80056b2:	2002      	movs	r0, #2
}
 80056b4:	4770      	bx	lr

080056b6 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80056b6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80056b8:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 80056bc:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d017      	beq.n	80056f2 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056c2:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80056c4:	2324      	movs	r3, #36	@ 0x24
 80056c6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056ca:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	f023 0301 	bic.w	r3, r3, #1
 80056d2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056d4:	68ab      	ldr	r3, [r5, #8]
 80056d6:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80056da:	4319      	orrs	r1, r3
 80056dc:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 80056de:	f7ff ffad 	bl	800563c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80056e2:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056e4:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80056e6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80056ea:	2000      	movs	r0, #0
 80056ec:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80056f0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80056f2:	2002      	movs	r0, #2
 80056f4:	e7fc      	b.n	80056f0 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

080056f6 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80056f6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80056f8:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 80056fc:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d017      	beq.n	8005732 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005702:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005704:	2324      	movs	r3, #36	@ 0x24
 8005706:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800570a:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005714:	68ab      	ldr	r3, [r5, #8]
 8005716:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800571a:	4319      	orrs	r1, r3
 800571c:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800571e:	f7ff ff8d 	bl	800563c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8005722:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005724:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005726:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800572a:	2000      	movs	r0, #0
 800572c:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8005730:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8005732:	2002      	movs	r0, #2
 8005734:	e7fc      	b.n	8005730 <HAL_UARTEx_SetRxFifoThreshold+0x3a>

08005736 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800573a:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800573e:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8005742:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 8005746:	ea43 0308 	orr.w	r3, r3, r8
 800574a:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800574e:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005752:	6809      	ldr	r1, [r1, #0]
 8005754:	b991      	cbnz	r1, 800577c <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005756:	ea43 030e 	orr.w	r3, r3, lr
 800575a:	6801      	ldr	r1, [r0, #0]
 800575c:	4313      	orrs	r3, r2
 800575e:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 8005762:	ea43 030c 	orr.w	r3, r3, ip
 8005766:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800576a:	433b      	orrs	r3, r7
 800576c:	4333      	orrs	r3, r6
 800576e:	432b      	orrs	r3, r5
 8005770:	4323      	orrs	r3, r4
 8005772:	430b      	orrs	r3, r1
 8005774:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8005776:	2000      	movs	r0, #0
 8005778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800577c:	6801      	ldr	r1, [r0, #0]
 800577e:	ea43 030e 	orr.w	r3, r3, lr
 8005782:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8005786:	430b      	orrs	r3, r1
 8005788:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800578a:	ea42 030c 	orr.w	r3, r2, ip
 800578e:	6841      	ldr	r1, [r0, #4]
 8005790:	433b      	orrs	r3, r7
 8005792:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8005796:	4333      	orrs	r3, r6
 8005798:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800579c:	432b      	orrs	r3, r5
 800579e:	4323      	orrs	r3, r4
 80057a0:	4313      	orrs	r3, r2
 80057a2:	6043      	str	r3, [r0, #4]
 80057a4:	e7e7      	b.n	8005776 <FMC_SDRAM_Init+0x40>

080057a6 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80057a6:	68cb      	ldr	r3, [r1, #12]
 80057a8:	f103 3cff 	add.w	ip, r3, #4294967295	@ 0xffffffff
 80057ac:	694b      	ldr	r3, [r1, #20]
{
 80057ae:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80057b0:	3b01      	subs	r3, #1
 80057b2:	680f      	ldr	r7, [r1, #0]
 80057b4:	684c      	ldr	r4, [r1, #4]
 80057b6:	688e      	ldr	r6, [r1, #8]
 80057b8:	051b      	lsls	r3, r3, #20
 80057ba:	690d      	ldr	r5, [r1, #16]
 80057bc:	3c01      	subs	r4, #1
 80057be:	6989      	ldr	r1, [r1, #24]
 80057c0:	3e01      	subs	r6, #1
 80057c2:	3d01      	subs	r5, #1
 80057c4:	3f01      	subs	r7, #1
 80057c6:	3901      	subs	r1, #1
 80057c8:	0124      	lsls	r4, r4, #4
 80057ca:	0236      	lsls	r6, r6, #8
 80057cc:	042d      	lsls	r5, r5, #16
 80057ce:	0609      	lsls	r1, r1, #24
 80057d0:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 80057d4:	b95a      	cbnz	r2, 80057ee <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80057d6:	433b      	orrs	r3, r7
 80057d8:	6882      	ldr	r2, [r0, #8]
 80057da:	4323      	orrs	r3, r4
 80057dc:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80057e0:	4333      	orrs	r3, r6
 80057e2:	432b      	orrs	r3, r5
 80057e4:	430b      	orrs	r3, r1
 80057e6:	4313      	orrs	r3, r2
 80057e8:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 80057ea:	2000      	movs	r0, #0
 80057ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80057ee:	6882      	ldr	r2, [r0, #8]
 80057f0:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80057f4:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 80057f8:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80057fa:	ea44 0306 	orr.w	r3, r4, r6
 80057fe:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005800:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005802:	68c2      	ldr	r2, [r0, #12]
 8005804:	432b      	orrs	r3, r5
 8005806:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800580a:	430b      	orrs	r3, r1
 800580c:	4313      	orrs	r3, r2
 800580e:	60c3      	str	r3, [r0, #12]
 8005810:	e7eb      	b.n	80057ea <FMC_SDRAM_Timing_Init+0x44>

08005812 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005812:	6902      	ldr	r2, [r0, #16]
{
 8005814:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005816:	e9d1 3400 	ldrd	r3, r4, [r1]
 800581a:	0d92      	lsrs	r2, r2, #22
 800581c:	4323      	orrs	r3, r4
 800581e:	68cc      	ldr	r4, [r1, #12]
 8005820:	0592      	lsls	r2, r2, #22
 8005822:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8005826:	4313      	orrs	r3, r2
 8005828:	688a      	ldr	r2, [r1, #8]
 800582a:	3a01      	subs	r2, #1
 800582c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8005830:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8005832:	2000      	movs	r0, #0
 8005834:	bd10      	pop	{r4, pc}

08005836 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8005836:	6943      	ldr	r3, [r0, #20]
 8005838:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800583c:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8005840:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8005844:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8005846:	2000      	movs	r0, #0
 8005848:	4770      	bx	lr
	...

0800584c <_write>:
#if defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 800584c:	b510      	push	{r4, lr}
  bool status = true;

  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 800584e:	1e14      	subs	r4, r2, #0
 8005850:	da0a      	bge.n	8005868 <_write+0x1c>
 8005852:	3801      	subs	r0, #1
 8005854:	2801      	cmp	r0, #1
 8005856:	d907      	bls.n	8005868 <_write+0x1c>
    errno = EBADF;
 8005858:	f002 fd0a 	bl	8008270 <__errno>
    return -1;
 800585c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
    errno = EBADF;
 8005860:	2309      	movs	r3, #9
 8005862:	6003      	str	r3, [r0, #0]
#endif /* SWO_OUTPUT */
  status = port_io_write((uint8_t *)buff, count);
#endif /* !HAS_DEDICATED_PRINT_PORT */

  return (status ? count : 0);
}
 8005864:	4620      	mov	r0, r4
 8005866:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8005868:	4b06      	ldr	r3, [pc, #24]	@ (8005884 <_write+0x38>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0f9      	beq.n	8005864 <_write+0x18>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8005870:	b2a2      	uxth	r2, r4
 8005872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005876:	4804      	ldr	r0, [pc, #16]	@ (8005888 <_write+0x3c>)
 8005878:	f7ff fdff 	bl	800547a <HAL_UART_Transmit>
  return (status ? count : 0);
 800587c:	2800      	cmp	r0, #0
 800587e:	bf18      	it	ne
 8005880:	2400      	movne	r4, #0
 8005882:	e7ef      	b.n	8005864 <_write+0x18>
 8005884:	24000018 	.word	0x24000018
 8005888:	24000cb4 	.word	0x24000cb4

0800588c <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 800588c:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 800588e:	4d11      	ldr	r5, [pc, #68]	@ (80058d4 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8005890:	1cc4      	adds	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8005892:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8005894:	f024 0403 	bic.w	r4, r4, #3
  io_malloc.cfg |= 1 << 1;
 8005898:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 800589c:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 80058a0:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 80058a2:	f002 f8b7 	bl	8007a14 <malloc>

  /* remember size */
  if (ptr) {
 80058a6:	b1a0      	cbz	r0, 80058d2 <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 80058a8:	1903      	adds	r3, r0, r4
 80058aa:	4a0b      	ldr	r2, [pc, #44]	@ (80058d8 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 80058ac:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 80058ae:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	07db      	lsls	r3, r3, #31
 80058b4:	d50c      	bpl.n	80058d0 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 80058b6:	68eb      	ldr	r3, [r5, #12]
 80058b8:	3301      	adds	r3, #1
 80058ba:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 80058bc:	686b      	ldr	r3, [r5, #4]
 80058be:	4423      	add	r3, r4
 80058c0:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 80058c2:	69ab      	ldr	r3, [r5, #24]
 80058c4:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 80058c6:	696b      	ldr	r3, [r5, #20]
 80058c8:	429c      	cmp	r4, r3
    io_malloc.used += bytes;
 80058ca:	61ac      	str	r4, [r5, #24]
      io_malloc.max = io_malloc.used;
 80058cc:	bf88      	it	hi
 80058ce:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 80058d0:	3004      	adds	r0, #4
}
 80058d2:	bd38      	pop	{r3, r4, r5, pc}
 80058d4:	24000edc 	.word	0x24000edc
 80058d8:	efdcba98 	.word	0xefdcba98

080058dc <ai_network_get_info>:

AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	460d      	mov	r5, r1
 80058e0:	b0a2      	sub	sp, #136	@ 0x88
 80058e2:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 80058e4:	f000 fa5a 	bl	8005d9c <ai_platform_context_acquire>
 80058e8:	4604      	mov	r4, r0

  if (report && net_ctx)
 80058ea:	2d00      	cmp	r5, #0
 80058ec:	d033      	beq.n	8005956 <ai_network_get_info+0x7a>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d02e      	beq.n	8005950 <ai_network_get_info+0x74>
  {
    ai_network_report r = {
 80058f2:	2278      	movs	r2, #120	@ 0x78
 80058f4:	2100      	movs	r1, #0
 80058f6:	a804      	add	r0, sp, #16
 80058f8:	f002 fc9e 	bl	8008238 <memset>
 80058fc:	4b17      	ldr	r3, [pc, #92]	@ (800595c <ai_network_get_info+0x80>)
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	4b17      	ldr	r3, [pc, #92]	@ (8005960 <ai_network_get_info+0x84>)
 8005902:	9301      	str	r3, [sp, #4]
 8005904:	4b17      	ldr	r3, [pc, #92]	@ (8005964 <ai_network_get_info+0x88>)
 8005906:	9302      	str	r3, [sp, #8]
 8005908:	4b17      	ldr	r3, [pc, #92]	@ (8005968 <ai_network_get_info+0x8c>)
 800590a:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800590c:	f000 f9fa 	bl	8005d04 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8005910:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 8005912:	f000 f9fb 	bl	8005d0c <ai_platform_runtime_get_version>
    ai_network_report r = {
 8005916:	4b15      	ldr	r3, [pc, #84]	@ (800596c <ai_network_get_info+0x90>)
      .runtime_version   = ai_platform_runtime_get_version(),
 8005918:	9005      	str	r0, [sp, #20]
    ai_network_report r = {
 800591a:	9306      	str	r3, [sp, #24]
 800591c:	2301      	movs	r3, #1
 800591e:	f88d 301c 	strb.w	r3, [sp, #28]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8005922:	f000 fa0b 	bl	8005d3c <ai_platform_api_get_version>
 8005926:	9009      	str	r0, [sp, #36]	@ 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8005928:	f000 fa20 	bl	8005d6c <ai_platform_interface_api_get_version>
    ai_network_report r = {
 800592c:	4a10      	ldr	r2, [pc, #64]	@ (8005970 <ai_network_get_info+0x94>)
 800592e:	2300      	movs	r3, #0
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8005930:	900a      	str	r0, [sp, #40]	@ 0x28
      .activations       = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0xdd8c5ad8,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005932:	4669      	mov	r1, sp
 8005934:	4630      	mov	r0, r6
    ai_network_report r = {
 8005936:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800593a:	4b0e      	ldr	r3, [pc, #56]	@ (8005974 <ai_network_get_info+0x98>)
 800593c:	9320      	str	r3, [sp, #128]	@ 0x80
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800593e:	f000 fa47 	bl	8005dd0 <ai_platform_api_get_network_report>
 8005942:	4604      	mov	r4, r0
 8005944:	b120      	cbz	r0, 8005950 <ai_network_get_info+0x74>

    *report = r;
 8005946:	2288      	movs	r2, #136	@ 0x88
 8005948:	4669      	mov	r1, sp
 800594a:	4628      	mov	r0, r5
 800594c:	f002 fcbd 	bl	80082ca <memcpy>
    return true;
  }
  return false;
}
 8005950:	4620      	mov	r0, r4
 8005952:	b022      	add	sp, #136	@ 0x88
 8005954:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8005956:	462c      	mov	r4, r5
 8005958:	e7fa      	b.n	8005950 <ai_network_get_info+0x74>
 800595a:	bf00      	nop
 800595c:	0801d51c 	.word	0x0801d51c
 8005960:	0801d524 	.word	0x0801d524
 8005964:	0801d547 	.word	0x0801d547
 8005968:	0801d560 	.word	0x0801d560
 800596c:	0800a1c8 	.word	0x0800a1c8
 8005970:	0001ab4a 	.word	0x0001ab4a
 8005974:	dd8c5ad8 	.word	0xdd8c5ad8

08005978 <ai_network_get_error>:


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8005978:	f000 ba18 	b.w	8005dac <ai_platform_network_get_error>

0800597c <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800597c:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 800597e:	2305      	movs	r3, #5
 8005980:	2200      	movs	r2, #0
 8005982:	e9cd 3200 	strd	r3, r2, [sp]
 8005986:	2301      	movs	r3, #1
 8005988:	4a02      	ldr	r2, [pc, #8]	@ (8005994 <ai_network_create+0x18>)
 800598a:	f000 fbeb 	bl	8006164 <ai_platform_network_create>
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800598e:	b003      	add	sp, #12
 8005990:	f85d fb04 	ldr.w	pc, [sp], #4
 8005994:	24000020 	.word	0x24000020

08005998 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800599c:	4607      	mov	r7, r0
 800599e:	4688      	mov	r8, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 80059a0:	f000 fc22 	bl	80061e8 <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 80059a4:	4604      	mov	r4, r0
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d064      	beq.n	8005a74 <ai_network_init+0xdc>
  if (ai_platform_get_weights_map(g_network_weights_map, 6, params)) {
 80059aa:	4d39      	ldr	r5, [pc, #228]	@ (8005a90 <ai_network_init+0xf8>)
 80059ac:	4642      	mov	r2, r8
 80059ae:	2106      	movs	r1, #6
 80059b0:	4628      	mov	r0, r5
 80059b2:	f000 f8f7 	bl	8005ba4 <ai_platform_get_weights_map>
 80059b6:	4606      	mov	r6, r0
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d05d      	beq.n	8005a78 <ai_network_init+0xe0>
    _Relu_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80059bc:	4b35      	ldr	r3, [pc, #212]	@ (8005a94 <ai_network_init+0xfc>)
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80059c4:	601a      	str	r2, [r3, #0]
    _Relu_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80059c6:	682a      	ldr	r2, [r5, #0]
    _Relu_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80059c8:	e9c3 2202 	strd	r2, r2, [r3, #8]
    _Relu_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80059cc:	4b32      	ldr	r3, [pc, #200]	@ (8005a98 <ai_network_init+0x100>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80059d4:	601a      	str	r2, [r3, #0]
    _Relu_output_0_bias_array.data = AI_PTR(g_network_weights_map[1] + 0);
 80059d6:	686a      	ldr	r2, [r5, #4]
    _Relu_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[1] + 0);
 80059d8:	e9c3 2202 	strd	r2, r2, [r3, #8]
    _Relu_1_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80059dc:	4b2f      	ldr	r3, [pc, #188]	@ (8005a9c <ai_network_init+0x104>)
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80059e4:	601a      	str	r2, [r3, #0]
    _Relu_1_output_0_weights_array.data = AI_PTR(g_network_weights_map[2] + 0);
 80059e6:	68aa      	ldr	r2, [r5, #8]
    _Relu_1_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[2] + 0);
 80059e8:	e9c3 2202 	strd	r2, r2, [r3, #8]
    _Relu_1_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80059ec:	4b2c      	ldr	r3, [pc, #176]	@ (8005aa0 <ai_network_init+0x108>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80059f4:	601a      	str	r2, [r3, #0]
    _Relu_1_output_0_bias_array.data = AI_PTR(g_network_weights_map[3] + 0);
 80059f6:	68ea      	ldr	r2, [r5, #12]
    _Relu_1_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[3] + 0);
 80059f8:	e9c3 2202 	strd	r2, r2, [r3, #8]
    output_QuantizeLinear_Input_weights_array.format |= AI_FMT_FLAG_CONST;
 80059fc:	4b29      	ldr	r3, [pc, #164]	@ (8005aa4 <ai_network_init+0x10c>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005a04:	601a      	str	r2, [r3, #0]
    output_QuantizeLinear_Input_weights_array.data = AI_PTR(g_network_weights_map[4] + 0);
 8005a06:	692a      	ldr	r2, [r5, #16]
    output_QuantizeLinear_Input_weights_array.data_start = AI_PTR(g_network_weights_map[4] + 0);
 8005a08:	e9c3 2202 	strd	r2, r2, [r3, #8]
    output_QuantizeLinear_Input_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a0c:	4b26      	ldr	r3, [pc, #152]	@ (8005aa8 <ai_network_init+0x110>)
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005a14:	601a      	str	r2, [r3, #0]
    output_QuantizeLinear_Input_bias_array.data = AI_PTR(g_network_weights_map[5] + 0);
 8005a16:	696a      	ldr	r2, [r5, #20]
    output_QuantizeLinear_Input_bias_array.data_start = AI_PTR(g_network_weights_map[5] + 0);
 8005a18:	e9c3 2202 	strd	r2, r2, [r3, #8]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8005a1c:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8005ac8 <ai_network_init+0x130>
 8005a20:	4642      	mov	r2, r8
 8005a22:	2101      	movs	r1, #1
 8005a24:	4648      	mov	r0, r9
 8005a26:	f000 f915 	bl	8005c54 <ai_platform_get_activations_map>
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	b350      	cbz	r0, 8005a84 <ai_network_init+0xec>
    _Relu_output_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a2e:	f8d9 3000 	ldr.w	r3, [r9]
 8005a32:	4a1e      	ldr	r2, [pc, #120]	@ (8005aac <ai_network_init+0x114>)
    input_output_array.data = AI_PTR(g_network_activations_map[0] + 2848);
 8005a34:	491e      	ldr	r1, [pc, #120]	@ (8005ab0 <ai_network_init+0x118>)
    _Relu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 3632);
 8005a36:	f503 6063 	add.w	r0, r3, #3632	@ 0xe30
    _Relu_output_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a3a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    _Relu_1_output_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab4 <ai_network_init+0x11c>)
    _Relu_1_output_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a40:	e9c2 3302 	strd	r3, r3, [r2, #8]
    output_QuantizeLinear_Input_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a44:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab8 <ai_network_init+0x120>)
    output_QuantizeLinear_Input_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a46:	e9c2 3302 	strd	r3, r3, [r2, #8]
    input_output_array.data = AI_PTR(g_network_activations_map[0] + 2848);
 8005a4a:	f503 6232 	add.w	r2, r3, #2848	@ 0xb20
    output_QuantizeLinear_Input_output_array.data = AI_PTR(g_network_activations_map[0] + 2912);
 8005a4e:	f503 6336 	add.w	r3, r3, #2912	@ 0xb60
    input_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2848);
 8005a52:	e9c1 2202 	strd	r2, r2, [r1, #8]
    _Relu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 3632);
 8005a56:	4919      	ldr	r1, [pc, #100]	@ (8005abc <ai_network_init+0x124>)
    _Relu_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3632);
 8005a58:	e9c1 0002 	strd	r0, r0, [r1, #8]
    _Relu_1_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 2848);
 8005a5c:	4918      	ldr	r1, [pc, #96]	@ (8005ac0 <ai_network_init+0x128>)
    _Relu_1_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2848);
 8005a5e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    output_QuantizeLinear_Input_output_array.data = AI_PTR(g_network_activations_map[0] + 2912);
 8005a62:	4a18      	ldr	r2, [pc, #96]	@ (8005ac4 <ai_network_init+0x12c>)
    output_QuantizeLinear_Input_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2912);
 8005a64:	e9c2 3302 	strd	r3, r3, [r2, #8]
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8005a68:	4638      	mov	r0, r7
 8005a6a:	f000 fc7d 	bl	8006368 <ai_platform_network_post_init>
 8005a6e:	4028      	ands	r0, r5
 8005a70:	4006      	ands	r6, r0
 8005a72:	b2f0      	uxtb	r0, r6

  return ok;
}
 8005a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8005a78:	2212      	movs	r2, #18
 8005a7a:	2130      	movs	r1, #48	@ 0x30
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f000 f9a1 	bl	8005dc4 <ai_platform_network_set_error>
  return false;
 8005a82:	e7cb      	b.n	8005a1c <ai_network_init+0x84>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8005a84:	2213      	movs	r2, #19
 8005a86:	2130      	movs	r1, #48	@ 0x30
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f000 f99b 	bl	8005dc4 <ai_platform_network_set_error>
  return false;
 8005a8e:	e7eb      	b.n	8005a68 <ai_network_init+0xd0>
 8005a90:	24000f60 	.word	0x24000f60
 8005a94:	240005e4 	.word	0x240005e4
 8005a98:	240005d4 	.word	0x240005d4
 8005a9c:	240005c4 	.word	0x240005c4
 8005aa0:	240005b4 	.word	0x240005b4
 8005aa4:	240005a4 	.word	0x240005a4
 8005aa8:	24000594 	.word	0x24000594
 8005aac:	24000584 	.word	0x24000584
 8005ab0:	24000624 	.word	0x24000624
 8005ab4:	24000574 	.word	0x24000574
 8005ab8:	24000564 	.word	0x24000564
 8005abc:	24000614 	.word	0x24000614
 8005ac0:	24000604 	.word	0x24000604
 8005ac4:	240005f4 	.word	0x240005f4
 8005ac8:	24000f78 	.word	0x24000f78

08005acc <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8005acc:	f000 bc7c 	b.w	80063c8 <ai_platform_network_process>

08005ad0 <ai_network_data_activations_buffer_get>:
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8005ad0:	4a08      	ldr	r2, [pc, #32]	@ (8005af4 <ai_network_data_activations_buffer_get+0x24>)
{
 8005ad2:	b084      	sub	sp, #16
  return buf;
 8005ad4:	e9c0 2100 	strd	r2, r1, [r0]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f44f 616b 	mov.w	r1, #3760	@ 0xeb0
 8005ade:	f8c0 d018 	str.w	sp, [r0, #24]
 8005ae2:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8005ae6:	f240 4201 	movw	r2, #1025	@ 0x401
 8005aea:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
 8005aee:	b004      	add	sp, #16
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	00040440 	.word	0x00040440

08005af8 <ai_network_data_weights_buffer_get>:
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8005af8:	4a07      	ldr	r2, [pc, #28]	@ (8005b18 <ai_network_data_weights_buffer_get+0x20>)
{
 8005afa:	b084      	sub	sp, #16
  return buf;
 8005afc:	e9c0 2100 	strd	r2, r1, [r0]
 8005b00:	2200      	movs	r2, #0
 8005b02:	4906      	ldr	r1, [pc, #24]	@ (8005b1c <ai_network_data_weights_buffer_get+0x24>)
 8005b04:	f8c0 d018 	str.w	sp, [r0, #24]
 8005b08:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8005b0c:	f240 4201 	movw	r2, #1025	@ 0x401
 8005b10:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
 8005b14:	b004      	add	sp, #16
 8005b16:	4770      	bx	lr
 8005b18:	40040440 	.word	0x40040440
 8005b1c:	0001ada8 	.word	0x0001ada8

08005b20 <ai_network_data_weights_get>:
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
  return AI_HANDLE_PTR(g_network_weights_table);

}
 8005b20:	4800      	ldr	r0, [pc, #0]	@ (8005b24 <ai_network_data_weights_get+0x4>)
 8005b22:	4770      	bx	lr
 8005b24:	24000634 	.word	0x24000634

08005b28 <ai_buffer_get_size>:
 8005b28:	b368      	cbz	r0, 8005b86 <ai_buffer_get_size+0x5e>
 8005b2a:	4b17      	ldr	r3, [pc, #92]	@ (8005b88 <ai_buffer_get_size+0x60>)
 8005b2c:	4a17      	ldr	r2, [pc, #92]	@ (8005b8c <ai_buffer_get_size+0x64>)
 8005b2e:	b410      	push	{r4}
 8005b30:	6804      	ldr	r4, [r0, #0]
 8005b32:	4023      	ands	r3, r4
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d123      	bne.n	8005b80 <ai_buffer_get_size+0x58>
 8005b38:	b311      	cbz	r1, 8005b80 <ai_buffer_get_size+0x58>
 8005b3a:	6984      	ldr	r4, [r0, #24]
 8005b3c:	6862      	ldr	r2, [r4, #4]
 8005b3e:	321f      	adds	r2, #31
 8005b40:	f022 021f 	bic.w	r2, r2, #31
 8005b44:	7d03      	ldrb	r3, [r0, #20]
 8005b46:	6941      	ldr	r1, [r0, #20]
 8005b48:	f1a3 0301 	sub.w	r3, r3, #1
 8005b4c:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8005b50:	fab3 f383 	clz	r3, r3
 8005b54:	095b      	lsrs	r3, r3, #5
 8005b56:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8005b5a:	da0c      	bge.n	8005b76 <ai_buffer_get_size+0x4e>
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d103      	bne.n	8005b68 <ai_buffer_get_size+0x40>
 8005b60:	2802      	cmp	r0, #2
 8005b62:	f04f 0302 	mov.w	r3, #2
 8005b66:	d006      	beq.n	8005b76 <ai_buffer_get_size+0x4e>
 8005b68:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	4298      	cmp	r0, r3
 8005b70:	fb01 f202 	mul.w	r2, r1, r2
 8005b74:	d1f2      	bne.n	8005b5c <ai_buffer_get_size+0x34>
 8005b76:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8005b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	6984      	ldr	r4, [r0, #24]
 8005b82:	6862      	ldr	r2, [r4, #4]
 8005b84:	e7de      	b.n	8005b44 <ai_buffer_get_size+0x1c>
 8005b86:	4770      	bx	lr
 8005b88:	017fffff 	.word	0x017fffff
 8005b8c:	000400c0 	.word	0x000400c0

08005b90 <ai_buffer_array_sane>:
 8005b90:	b138      	cbz	r0, 8005ba2 <ai_buffer_array_sane+0x12>
 8005b92:	6843      	ldr	r3, [r0, #4]
 8005b94:	b123      	cbz	r3, 8005ba0 <ai_buffer_array_sane+0x10>
 8005b96:	8840      	ldrh	r0, [r0, #2]
 8005b98:	3800      	subs	r0, #0
 8005b9a:	bf18      	it	ne
 8005b9c:	2001      	movne	r0, #1
 8005b9e:	4770      	bx	lr
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	4770      	bx	lr

08005ba4 <ai_platform_get_weights_map>:
 8005ba4:	2900      	cmp	r1, #0
 8005ba6:	bf18      	it	ne
 8005ba8:	2800      	cmpne	r0, #0
 8005baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bac:	bf0c      	ite	eq
 8005bae:	2401      	moveq	r4, #1
 8005bb0:	2400      	movne	r4, #0
 8005bb2:	2a00      	cmp	r2, #0
 8005bb4:	bf08      	it	eq
 8005bb6:	f044 0401 	orreq.w	r4, r4, #1
 8005bba:	b114      	cbz	r4, 8005bc2 <ai_platform_get_weights_map+0x1e>
 8005bbc:	2400      	movs	r4, #0
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bc2:	4616      	mov	r6, r2
 8005bc4:	4b22      	ldr	r3, [pc, #136]	@ (8005c50 <ai_platform_get_weights_map+0xac>)
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	4605      	mov	r5, r0
 8005bca:	460f      	mov	r7, r1
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d022      	beq.n	8005c16 <ai_platform_get_weights_map+0x72>
 8005bd0:	6870      	ldr	r0, [r6, #4]
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	d0f2      	beq.n	8005bbc <ai_platform_get_weights_map+0x18>
 8005bd6:	6806      	ldr	r6, [r0, #0]
 8005bd8:	429e      	cmp	r6, r3
 8005bda:	d006      	beq.n	8005bea <ai_platform_get_weights_map+0x46>
 8005bdc:	f1a1 0401 	sub.w	r4, r1, #1
 8005be0:	6028      	str	r0, [r5, #0]
 8005be2:	fab4 f484 	clz	r4, r4
 8005be6:	0964      	lsrs	r4, r4, #5
 8005be8:	e7e9      	b.n	8005bbe <ai_platform_get_weights_map+0x1a>
 8005bea:	3d04      	subs	r5, #4
 8005bec:	4602      	mov	r2, r0
 8005bee:	4621      	mov	r1, r4
 8005bf0:	e000      	b.n	8005bf4 <ai_platform_get_weights_map+0x50>
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005bf8:	42b3      	cmp	r3, r6
 8005bfa:	d025      	beq.n	8005c48 <ai_platform_get_weights_map+0xa4>
 8005bfc:	f845 3f04 	str.w	r3, [r5, #4]!
 8005c00:	1c4b      	adds	r3, r1, #1
 8005c02:	429f      	cmp	r7, r3
 8005c04:	d8f5      	bhi.n	8005bf2 <ai_platform_get_weights_map+0x4e>
 8005c06:	d1da      	bne.n	8005bbe <ai_platform_get_weights_map+0x1a>
 8005c08:	3102      	adds	r1, #2
 8005c0a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8005c0e:	42b3      	cmp	r3, r6
 8005c10:	d1d5      	bne.n	8005bbe <ai_platform_get_weights_map+0x1a>
 8005c12:	2401      	movs	r4, #1
 8005c14:	e7d3      	b.n	8005bbe <ai_platform_get_weights_map+0x1a>
 8005c16:	1d30      	adds	r0, r6, #4
 8005c18:	f7ff ffba 	bl	8005b90 <ai_buffer_array_sane>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	d0cd      	beq.n	8005bbc <ai_platform_get_weights_map+0x18>
 8005c20:	88f3      	ldrh	r3, [r6, #6]
 8005c22:	429f      	cmp	r7, r3
 8005c24:	d1ca      	bne.n	8005bbc <ai_platform_get_weights_map+0x18>
 8005c26:	3d04      	subs	r5, #4
 8005c28:	4622      	mov	r2, r4
 8005c2a:	68b3      	ldr	r3, [r6, #8]
 8005c2c:	4423      	add	r3, r4
 8005c2e:	341c      	adds	r4, #28
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	b123      	cbz	r3, 8005c3e <ai_platform_get_weights_map+0x9a>
 8005c34:	3201      	adds	r2, #1
 8005c36:	f845 3f04 	str.w	r3, [r5, #4]!
 8005c3a:	4297      	cmp	r7, r2
 8005c3c:	d8f5      	bhi.n	8005c2a <ai_platform_get_weights_map+0x86>
 8005c3e:	1abc      	subs	r4, r7, r2
 8005c40:	fab4 f484 	clz	r4, r4
 8005c44:	0964      	lsrs	r4, r4, #5
 8005c46:	e7ba      	b.n	8005bbe <ai_platform_get_weights_map+0x1a>
 8005c48:	428f      	cmp	r7, r1
 8005c4a:	d1b8      	bne.n	8005bbe <ai_platform_get_weights_map+0x1a>
 8005c4c:	e7e1      	b.n	8005c12 <ai_platform_get_weights_map+0x6e>
 8005c4e:	bf00      	nop
 8005c50:	a1facade 	.word	0xa1facade

08005c54 <ai_platform_get_activations_map>:
 8005c54:	2900      	cmp	r1, #0
 8005c56:	bf18      	it	ne
 8005c58:	2800      	cmpne	r0, #0
 8005c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5c:	bf0c      	ite	eq
 8005c5e:	2401      	moveq	r4, #1
 8005c60:	2400      	movne	r4, #0
 8005c62:	2a00      	cmp	r2, #0
 8005c64:	bf08      	it	eq
 8005c66:	f044 0401 	orreq.w	r4, r4, #1
 8005c6a:	b114      	cbz	r4, 8005c72 <ai_platform_get_activations_map+0x1e>
 8005c6c:	2400      	movs	r4, #0
 8005c6e:	4620      	mov	r0, r4
 8005c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c72:	4616      	mov	r6, r2
 8005c74:	4b22      	ldr	r3, [pc, #136]	@ (8005d00 <ai_platform_get_activations_map+0xac>)
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	4605      	mov	r5, r0
 8005c7a:	460f      	mov	r7, r1
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d022      	beq.n	8005cc6 <ai_platform_get_activations_map+0x72>
 8005c80:	6a30      	ldr	r0, [r6, #32]
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d0f2      	beq.n	8005c6c <ai_platform_get_activations_map+0x18>
 8005c86:	6806      	ldr	r6, [r0, #0]
 8005c88:	429e      	cmp	r6, r3
 8005c8a:	d006      	beq.n	8005c9a <ai_platform_get_activations_map+0x46>
 8005c8c:	f1a1 0401 	sub.w	r4, r1, #1
 8005c90:	6028      	str	r0, [r5, #0]
 8005c92:	fab4 f484 	clz	r4, r4
 8005c96:	0964      	lsrs	r4, r4, #5
 8005c98:	e7e9      	b.n	8005c6e <ai_platform_get_activations_map+0x1a>
 8005c9a:	3d04      	subs	r5, #4
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	e000      	b.n	8005ca4 <ai_platform_get_activations_map+0x50>
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005ca8:	42b3      	cmp	r3, r6
 8005caa:	d026      	beq.n	8005cfa <ai_platform_get_activations_map+0xa6>
 8005cac:	f845 3f04 	str.w	r3, [r5, #4]!
 8005cb0:	1c4b      	adds	r3, r1, #1
 8005cb2:	429f      	cmp	r7, r3
 8005cb4:	d8f5      	bhi.n	8005ca2 <ai_platform_get_activations_map+0x4e>
 8005cb6:	d1da      	bne.n	8005c6e <ai_platform_get_activations_map+0x1a>
 8005cb8:	3102      	adds	r1, #2
 8005cba:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8005cbe:	42b3      	cmp	r3, r6
 8005cc0:	d1d5      	bne.n	8005c6e <ai_platform_get_activations_map+0x1a>
 8005cc2:	2401      	movs	r4, #1
 8005cc4:	e7d3      	b.n	8005c6e <ai_platform_get_activations_map+0x1a>
 8005cc6:	f106 000c 	add.w	r0, r6, #12
 8005cca:	f7ff ff61 	bl	8005b90 <ai_buffer_array_sane>
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d0cc      	beq.n	8005c6c <ai_platform_get_activations_map+0x18>
 8005cd2:	89f3      	ldrh	r3, [r6, #14]
 8005cd4:	429f      	cmp	r7, r3
 8005cd6:	d1c9      	bne.n	8005c6c <ai_platform_get_activations_map+0x18>
 8005cd8:	3d04      	subs	r5, #4
 8005cda:	4622      	mov	r2, r4
 8005cdc:	6933      	ldr	r3, [r6, #16]
 8005cde:	4423      	add	r3, r4
 8005ce0:	341c      	adds	r4, #28
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	b123      	cbz	r3, 8005cf0 <ai_platform_get_activations_map+0x9c>
 8005ce6:	3201      	adds	r2, #1
 8005ce8:	f845 3f04 	str.w	r3, [r5, #4]!
 8005cec:	4297      	cmp	r7, r2
 8005cee:	d8f5      	bhi.n	8005cdc <ai_platform_get_activations_map+0x88>
 8005cf0:	1abc      	subs	r4, r7, r2
 8005cf2:	fab4 f484 	clz	r4, r4
 8005cf6:	0964      	lsrs	r4, r4, #5
 8005cf8:	e7b9      	b.n	8005c6e <ai_platform_get_activations_map+0x1a>
 8005cfa:	428f      	cmp	r7, r1
 8005cfc:	d1b7      	bne.n	8005c6e <ai_platform_get_activations_map+0x1a>
 8005cfe:	e7e0      	b.n	8005cc2 <ai_platform_get_activations_map+0x6e>
 8005d00:	a1facade 	.word	0xa1facade

08005d04 <ai_platform_runtime_get_revision>:
 8005d04:	4800      	ldr	r0, [pc, #0]	@ (8005d08 <ai_platform_runtime_get_revision+0x4>)
 8005d06:	4770      	bx	lr
 8005d08:	0801da14 	.word	0x0801da14

08005d0c <ai_platform_runtime_get_version>:
 8005d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d38 <ai_platform_runtime_get_version+0x2c>)
 8005d0e:	2000      	movs	r0, #0
 8005d10:	b082      	sub	sp, #8
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	fa5f fc83 	uxtb.w	ip, r3
 8005d18:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8005d1c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005d20:	0e1b      	lsrs	r3, r3, #24
 8005d22:	f36c 0007 	bfi	r0, ip, #0, #8
 8005d26:	f361 200f 	bfi	r0, r1, #8, #8
 8005d2a:	f362 4017 	bfi	r0, r2, #16, #8
 8005d2e:	f363 601f 	bfi	r0, r3, #24, #8
 8005d32:	b002      	add	sp, #8
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	0801da18 	.word	0x0801da18

08005d3c <ai_platform_api_get_version>:
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d68 <ai_platform_api_get_version+0x2c>)
 8005d3e:	2000      	movs	r0, #0
 8005d40:	b082      	sub	sp, #8
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	fa5f fc83 	uxtb.w	ip, r3
 8005d48:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8005d4c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005d50:	0e1b      	lsrs	r3, r3, #24
 8005d52:	f36c 0007 	bfi	r0, ip, #0, #8
 8005d56:	f361 200f 	bfi	r0, r1, #8, #8
 8005d5a:	f362 4017 	bfi	r0, r2, #16, #8
 8005d5e:	f363 601f 	bfi	r0, r3, #24, #8
 8005d62:	b002      	add	sp, #8
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	0801da1c 	.word	0x0801da1c

08005d6c <ai_platform_interface_api_get_version>:
 8005d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d98 <ai_platform_interface_api_get_version+0x2c>)
 8005d6e:	2000      	movs	r0, #0
 8005d70:	b082      	sub	sp, #8
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	fa5f fc83 	uxtb.w	ip, r3
 8005d78:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8005d7c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005d80:	0e1b      	lsrs	r3, r3, #24
 8005d82:	f36c 0007 	bfi	r0, ip, #0, #8
 8005d86:	f361 200f 	bfi	r0, r1, #8, #8
 8005d8a:	f362 4017 	bfi	r0, r2, #16, #8
 8005d8e:	f363 601f 	bfi	r0, r3, #24, #8
 8005d92:	b002      	add	sp, #8
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	0801da20 	.word	0x0801da20

08005d9c <ai_platform_context_acquire>:
 8005d9c:	6802      	ldr	r2, [r0, #0]
 8005d9e:	4b02      	ldr	r3, [pc, #8]	@ (8005da8 <ai_platform_context_acquire+0xc>)
 8005da0:	4393      	bics	r3, r2
 8005da2:	bf18      	it	ne
 8005da4:	2000      	movne	r0, #0
 8005da6:	4770      	bx	lr
 8005da8:	a1c00100 	.word	0xa1c00100

08005dac <ai_platform_network_get_error>:
 8005dac:	4b04      	ldr	r3, [pc, #16]	@ (8005dc0 <ai_platform_network_get_error+0x14>)
 8005dae:	6802      	ldr	r2, [r0, #0]
 8005db0:	4393      	bics	r3, r2
 8005db2:	d102      	bne.n	8005dba <ai_platform_network_get_error+0xe>
 8005db4:	300c      	adds	r0, #12
 8005db6:	f000 bd4f 	b.w	8006858 <core_get_error>
 8005dba:	f241 0010 	movw	r0, #4112	@ 0x1010
 8005dbe:	4770      	bx	lr
 8005dc0:	a1c00100 	.word	0xa1c00100

08005dc4 <ai_platform_network_set_error>:
 8005dc4:	b110      	cbz	r0, 8005dcc <ai_platform_network_set_error+0x8>
 8005dc6:	300c      	adds	r0, #12
 8005dc8:	f000 bd4c 	b.w	8006864 <core_set_error>
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop

08005dd0 <ai_platform_api_get_network_report>:
 8005dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd4:	4ba3      	ldr	r3, [pc, #652]	@ (8006064 <ai_platform_api_get_network_report+0x294>)
 8005dd6:	b089      	sub	sp, #36	@ 0x24
 8005dd8:	6802      	ldr	r2, [r0, #0]
 8005dda:	9002      	str	r0, [sp, #8]
 8005ddc:	4393      	bics	r3, r2
 8005dde:	d177      	bne.n	8005ed0 <ai_platform_api_get_network_report+0x100>
 8005de0:	4688      	mov	r8, r1
 8005de2:	2900      	cmp	r1, #0
 8005de4:	d074      	beq.n	8005ed0 <ai_platform_api_get_network_report+0x100>
 8005de6:	2400      	movs	r4, #0
 8005de8:	67cc      	str	r4, [r1, #124]	@ 0x7c
 8005dea:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005dec:	b14b      	cbz	r3, 8005e02 <ai_platform_api_get_network_report+0x32>
 8005dee:	3401      	adds	r4, #1
 8005df0:	f8c8 407c 	str.w	r4, [r8, #124]	@ 0x7c
 8005df4:	691a      	ldr	r2, [r3, #16]
 8005df6:	b122      	cbz	r2, 8005e02 <ai_platform_api_get_network_report+0x32>
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d002      	beq.n	8005e02 <ai_platform_api_get_network_report+0x32>
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1f5      	bne.n	8005dee <ai_platform_api_get_network_report+0x1e>
 8005e02:	2c00      	cmp	r4, #0
 8005e04:	f000 8161 	beq.w	80060ca <ai_platform_api_get_network_report+0x2fa>
 8005e08:	9a02      	ldr	r2, [sp, #8]
 8005e0a:	8e13      	ldrh	r3, [r2, #48]	@ 0x30
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d050      	beq.n	8005eb2 <ai_platform_api_get_network_report+0xe2>
 8005e10:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8005e14:	f1ba 0f00 	cmp.w	sl, #0
 8005e18:	d04b      	beq.n	8005eb2 <ai_platform_api_get_network_report+0xe2>
 8005e1a:	f04f 0b00 	mov.w	fp, #0
 8005e1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e22:	465d      	mov	r5, fp
 8005e24:	e015      	b.n	8005e52 <ai_platform_api_get_network_report+0x82>
 8005e26:	00ea      	lsls	r2, r5, #3
 8005e28:	2101      	movs	r1, #1
 8005e2a:	50b9      	str	r1, [r7, r2]
 8005e2c:	69b2      	ldr	r2, [r6, #24]
 8005e2e:	6856      	ldr	r6, [r2, #4]
 8005e30:	f04f 0201 	mov.w	r2, #1
 8005e34:	60a3      	str	r3, [r4, #8]
 8005e36:	3501      	adds	r5, #1
 8005e38:	7522      	strb	r2, [r4, #20]
 8005e3a:	f10b 0b1c 	add.w	fp, fp, #28
 8005e3e:	6963      	ldr	r3, [r4, #20]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f368 231f 	bfi	r3, r8, #8, #24
 8005e46:	e9c4 0c00 	strd	r0, ip, [r4]
 8005e4a:	e9c4 2603 	strd	r2, r6, [r4, #12]
 8005e4e:	e9c4 3905 	strd	r3, r9, [r4, #20]
 8005e52:	f8ba 3000 	ldrh.w	r3, [sl]
 8005e56:	b2aa      	uxth	r2, r5
 8005e58:	429d      	cmp	r5, r3
 8005e5a:	d23e      	bcs.n	8005eda <ai_platform_api_get_network_report+0x10a>
 8005e5c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d03a      	beq.n	8005eda <ai_platform_api_get_network_report+0x10a>
 8005e64:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005e68:	2e00      	cmp	r6, #0
 8005e6a:	d036      	beq.n	8005eda <ai_platform_api_get_network_report+0x10a>
 8005e6c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005e70:	00ea      	lsls	r2, r5, #3
 8005e72:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8005e76:	9201      	str	r2, [sp, #4]
 8005e78:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005e7c:	69b3      	ldr	r3, [r6, #24]
 8005e7e:	445c      	add	r4, fp
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	68b3      	ldr	r3, [r6, #8]
 8005e84:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8005e88:	f001 fa6a 	bl	8007360 <ai_array_to_buffer_fmt>
 8005e8c:	69b2      	ldr	r2, [r6, #24]
 8005e8e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8005e92:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0c9      	beq.n	8005e2e <ai_platform_api_get_network_report+0x5e>
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 8005ea0:	6832      	ldr	r2, [r6, #0]
 8005ea2:	605a      	str	r2, [r3, #4]
 8005ea4:	b112      	cbz	r2, 8005eac <ai_platform_api_get_network_report+0xdc>
 8005ea6:	8852      	ldrh	r2, [r2, #2]
 8005ea8:	2a00      	cmp	r2, #0
 8005eaa:	d1bc      	bne.n	8005e26 <ai_platform_api_get_network_report+0x56>
 8005eac:	69b2      	ldr	r2, [r6, #24]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e7bd      	b.n	8005e2e <ai_platform_api_get_network_report+0x5e>
 8005eb2:	2400      	movs	r4, #0
 8005eb4:	9802      	ldr	r0, [sp, #8]
 8005eb6:	2218      	movs	r2, #24
 8005eb8:	2112      	movs	r1, #18
 8005eba:	300c      	adds	r0, #12
 8005ebc:	f8c8 403c 	str.w	r4, [r8, #60]	@ 0x3c
 8005ec0:	f8a8 4038 	strh.w	r4, [r8, #56]	@ 0x38
 8005ec4:	f000 fcce 	bl	8006864 <core_set_error>
 8005ec8:	4620      	mov	r0, r4
 8005eca:	b009      	add	sp, #36	@ 0x24
 8005ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed0:	2400      	movs	r4, #0
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	b009      	add	sp, #36	@ 0x24
 8005ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eda:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005ede:	2a00      	cmp	r2, #0
 8005ee0:	d0e7      	beq.n	8005eb2 <ai_platform_api_get_network_report+0xe2>
 8005ee2:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f8a8 2038 	strh.w	r2, [r8, #56]	@ 0x38
 8005eec:	f8c8 303c 	str.w	r3, [r8, #60]	@ 0x3c
 8005ef0:	9b02      	ldr	r3, [sp, #8]
 8005ef2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	f240 80a5 	bls.w	8006044 <ai_platform_api_get_network_report+0x274>
 8005efa:	f04f 0a00 	mov.w	sl, #0
 8005efe:	9b02      	ldr	r3, [sp, #8]
 8005f00:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f04:	f8d3 9034 	ldr.w	r9, [r3, #52]	@ 0x34
 8005f08:	4655      	mov	r5, sl
 8005f0a:	e016      	b.n	8005f3a <ai_platform_api_get_network_report+0x16a>
 8005f0c:	00e9      	lsls	r1, r5, #3
 8005f0e:	2301      	movs	r3, #1
 8005f10:	507b      	str	r3, [r7, r1]
 8005f12:	69b1      	ldr	r1, [r6, #24]
 8005f14:	f04f 0301 	mov.w	r3, #1
 8005f18:	6849      	ldr	r1, [r1, #4]
 8005f1a:	3501      	adds	r5, #1
 8005f1c:	f10a 0a1c 	add.w	sl, sl, #28
 8005f20:	7523      	strb	r3, [r4, #20]
 8005f22:	2300      	movs	r3, #0
 8005f24:	60a0      	str	r0, [r4, #8]
 8005f26:	f8c4 b018 	str.w	fp, [r4, #24]
 8005f2a:	e9c4 3103 	strd	r3, r1, [r4, #12]
 8005f2e:	6961      	ldr	r1, [r4, #20]
 8005f30:	f368 211f 	bfi	r1, r8, #8, #24
 8005f34:	e9c4 c200 	strd	ip, r2, [r4]
 8005f38:	6161      	str	r1, [r4, #20]
 8005f3a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005f3e:	b2aa      	uxth	r2, r5
 8005f40:	42ab      	cmp	r3, r5
 8005f42:	d928      	bls.n	8005f96 <ai_platform_api_get_network_report+0x1c6>
 8005f44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f48:	b32b      	cbz	r3, 8005f96 <ai_platform_api_get_network_report+0x1c6>
 8005f4a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005f4e:	b316      	cbz	r6, 8005f96 <ai_platform_api_get_network_report+0x1c6>
 8005f50:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005f54:	00ea      	lsls	r2, r5, #3
 8005f56:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8005f5a:	9201      	str	r2, [sp, #4]
 8005f5c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005f60:	69b3      	ldr	r3, [r6, #24]
 8005f62:	4454      	add	r4, sl
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	68b3      	ldr	r3, [r6, #8]
 8005f68:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8005f6c:	f001 f9f8 	bl	8007360 <ai_array_to_buffer_fmt>
 8005f70:	69b1      	ldr	r1, [r6, #24]
 8005f72:	4684      	mov	ip, r0
 8005f74:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8005f78:	688a      	ldr	r2, [r1, #8]
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d0ca      	beq.n	8005f14 <ai_platform_api_get_network_report+0x144>
 8005f7e:	2100      	movs	r1, #0
 8005f80:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005f84:	6831      	ldr	r1, [r6, #0]
 8005f86:	6041      	str	r1, [r0, #4]
 8005f88:	b111      	cbz	r1, 8005f90 <ai_platform_api_get_network_report+0x1c0>
 8005f8a:	8849      	ldrh	r1, [r1, #2]
 8005f8c:	2900      	cmp	r1, #0
 8005f8e:	d1bd      	bne.n	8005f0c <ai_platform_api_get_network_report+0x13c>
 8005f90:	69b1      	ldr	r1, [r6, #24]
 8005f92:	2000      	movs	r0, #0
 8005f94:	e7be      	b.n	8005f14 <ai_platform_api_get_network_report+0x144>
 8005f96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005f9a:	2a00      	cmp	r2, #0
 8005f9c:	d052      	beq.n	8006044 <ai_platform_api_get_network_report+0x274>
 8005f9e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005fa2:	9902      	ldr	r1, [sp, #8]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f101 0628 	add.w	r6, r1, #40	@ 0x28
 8005faa:	f8a8 203a 	strh.w	r2, [r8, #58]	@ 0x3a
 8005fae:	f8c8 3040 	str.w	r3, [r8, #64]	@ 0x40
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f7ff fdec 	bl	8005b90 <ai_buffer_array_sane>
 8005fb8:	4604      	mov	r4, r0
 8005fba:	b940      	cbnz	r0, 8005fce <ai_platform_api_get_network_report+0x1fe>
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	f7ff fde7 	bl	8005b90 <ai_buffer_array_sane>
 8005fc2:	b120      	cbz	r0, 8005fce <ai_platform_api_get_network_report+0x1fe>
 8005fc4:	9b02      	ldr	r3, [sp, #8]
 8005fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f040 8088 	bne.w	80060de <ai_platform_api_get_network_report+0x30e>
 8005fce:	9d02      	ldr	r5, [sp, #8]
 8005fd0:	f105 0720 	add.w	r7, r5, #32
 8005fd4:	4638      	mov	r0, r7
 8005fd6:	f7ff fddb 	bl	8005b90 <ai_buffer_array_sane>
 8005fda:	4604      	mov	r4, r0
 8005fdc:	b930      	cbnz	r0, 8005fec <ai_platform_api_get_network_report+0x21c>
 8005fde:	4638      	mov	r0, r7
 8005fe0:	f7ff fdd6 	bl	8005b90 <ai_buffer_array_sane>
 8005fe4:	b110      	cbz	r0, 8005fec <ai_platform_api_get_network_report+0x21c>
 8005fe6:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d17f      	bne.n	80060ec <ai_platform_api_get_network_report+0x31c>
 8005fec:	9a02      	ldr	r2, [sp, #8]
 8005fee:	f240 2401 	movw	r4, #513	@ 0x201
 8005ff2:	6853      	ldr	r3, [r2, #4]
 8005ff4:	f8c8 3080 	str.w	r3, [r8, #128]	@ 0x80
 8005ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8006068 <ai_platform_api_get_network_report+0x298>)
 8005ffa:	f8c8 3010 	str.w	r3, [r8, #16]
 8005ffe:	f240 1309 	movw	r3, #265	@ 0x109
 8006002:	f8c8 3014 	str.w	r3, [r8, #20]
 8006006:	f240 5301 	movw	r3, #1281	@ 0x501
 800600a:	e9c8 4309 	strd	r4, r3, [r8, #36]	@ 0x24
 800600e:	6890      	ldr	r0, [r2, #8]
 8006010:	f001 fa2e 	bl	8007470 <ai_platform_version_get>
 8006014:	4b15      	ldr	r3, [pc, #84]	@ (800606c <ai_platform_api_get_network_report+0x29c>)
 8006016:	f8d8 2044 	ldr.w	r2, [r8, #68]	@ 0x44
 800601a:	f8c8 0020 	str.w	r0, [r8, #32]
 800601e:	429a      	cmp	r2, r3
 8006020:	d126      	bne.n	8006070 <ai_platform_api_get_network_report+0x2a0>
 8006022:	f108 0250 	add.w	r2, r8, #80	@ 0x50
 8006026:	f108 0348 	add.w	r3, r8, #72	@ 0x48
 800602a:	2401      	movs	r4, #1
 800602c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006030:	e882 0003 	stmia.w	r2, {r0, r1}
 8006034:	e897 0003 	ldmia.w	r7, {r0, r1}
 8006038:	e883 0003 	stmia.w	r3, {r0, r1}
 800603c:	4620      	mov	r0, r4
 800603e:	b009      	add	sp, #36	@ 0x24
 8006040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006044:	2400      	movs	r4, #0
 8006046:	9802      	ldr	r0, [sp, #8]
 8006048:	2218      	movs	r2, #24
 800604a:	2113      	movs	r1, #19
 800604c:	f8c8 4040 	str.w	r4, [r8, #64]	@ 0x40
 8006050:	300c      	adds	r0, #12
 8006052:	f8a8 403a 	strh.w	r4, [r8, #58]	@ 0x3a
 8006056:	f000 fc05 	bl	8006864 <core_set_error>
 800605a:	4620      	mov	r0, r4
 800605c:	b009      	add	sp, #36	@ 0x24
 800605e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006062:	bf00      	nop
 8006064:	a1c00100 	.word	0xa1c00100
 8006068:	0801da14 	.word	0x0801da14
 800606c:	a1facade 	.word	0xa1facade
 8006070:	2200      	movs	r2, #0
 8006072:	4b3a      	ldr	r3, [pc, #232]	@ (800615c <ai_platform_api_get_network_report+0x38c>)
 8006074:	f108 0a44 	add.w	sl, r8, #68	@ 0x44
 8006078:	f10d 0c10 	add.w	ip, sp, #16
 800607c:	f108 0960 	add.w	r9, r8, #96	@ 0x60
 8006080:	4655      	mov	r5, sl
 8006082:	f8c8 c05c 	str.w	ip, [r8, #92]	@ 0x5c
 8006086:	464c      	mov	r4, r9
 8006088:	e9c8 2212 	strd	r2, r2, [r8, #72]	@ 0x48
 800608c:	e9c8 2214 	strd	r2, r2, [r8, #80]	@ 0x50
 8006090:	4a33      	ldr	r2, [pc, #204]	@ (8006160 <ai_platform_api_get_network_report+0x390>)
 8006092:	f8c8 2044 	str.w	r2, [r8, #68]	@ 0x44
 8006096:	f240 4201 	movw	r2, #1025	@ 0x401
 800609a:	f8c8 2058 	str.w	r2, [r8, #88]	@ 0x58
 800609e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80060a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80060ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80060b0:	4630      	mov	r0, r6
 80060b2:	f7ff fd6d 	bl	8005b90 <ai_buffer_array_sane>
 80060b6:	bb78      	cbnz	r0, 8006118 <ai_platform_api_get_network_report+0x348>
 80060b8:	4638      	mov	r0, r7
 80060ba:	f7ff fd69 	bl	8005b90 <ai_buffer_array_sane>
 80060be:	b9e0      	cbnz	r0, 80060fa <ai_platform_api_get_network_report+0x32a>
 80060c0:	2401      	movs	r4, #1
 80060c2:	4620      	mov	r0, r4
 80060c4:	b009      	add	sp, #36	@ 0x24
 80060c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ca:	9802      	ldr	r0, [sp, #8]
 80060cc:	2218      	movs	r2, #24
 80060ce:	2111      	movs	r1, #17
 80060d0:	300c      	adds	r0, #12
 80060d2:	f000 fbc7 	bl	8006864 <core_set_error>
 80060d6:	4620      	mov	r0, r4
 80060d8:	b009      	add	sp, #36	@ 0x24
 80060da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060de:	9802      	ldr	r0, [sp, #8]
 80060e0:	2213      	movs	r2, #19
 80060e2:	2111      	movs	r1, #17
 80060e4:	300c      	adds	r0, #12
 80060e6:	f000 fbbd 	bl	8006864 <core_set_error>
 80060ea:	e6ed      	b.n	8005ec8 <ai_platform_api_get_network_report+0xf8>
 80060ec:	9802      	ldr	r0, [sp, #8]
 80060ee:	2212      	movs	r2, #18
 80060f0:	2111      	movs	r1, #17
 80060f2:	300c      	adds	r0, #12
 80060f4:	f000 fbb6 	bl	8006864 <core_set_error>
 80060f8:	e6e6      	b.n	8005ec8 <ai_platform_api_get_network_report+0xf8>
 80060fa:	4638      	mov	r0, r7
 80060fc:	f7ff fd48 	bl	8005b90 <ai_buffer_array_sane>
 8006100:	b1c0      	cbz	r0, 8006134 <ai_platform_api_get_network_report+0x364>
 8006102:	9b02      	ldr	r3, [sp, #8]
 8006104:	46d0      	mov	r8, sl
 8006106:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800610a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800610e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006112:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8006116:	e7d3      	b.n	80060c0 <ai_platform_api_get_network_report+0x2f0>
 8006118:	4630      	mov	r0, r6
 800611a:	f7ff fd39 	bl	8005b90 <ai_buffer_array_sane>
 800611e:	b198      	cbz	r0, 8006148 <ai_platform_api_get_network_report+0x378>
 8006120:	9b02      	ldr	r3, [sp, #8]
 8006122:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8006124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006126:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800612a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800612e:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8006132:	e7c1      	b.n	80060b8 <ai_platform_api_get_network_report+0x2e8>
 8006134:	4604      	mov	r4, r0
 8006136:	46d0      	mov	r8, sl
 8006138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800613a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800613e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006142:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8006146:	deff      	udf	#255	@ 0xff
 8006148:	4604      	mov	r4, r0
 800614a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800614c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8006150:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006154:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8006158:	deff      	udf	#255	@ 0xff
 800615a:	bf00      	nop
 800615c:	0800a090 	.word	0x0800a090
 8006160:	00040440 	.word	0x00040440

08006164 <ai_platform_network_create>:
 8006164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006168:	b083      	sub	sp, #12
 800616a:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800616e:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8006172:	b320      	cbz	r0, 80061be <ai_platform_network_create+0x5a>
 8006174:	6002      	str	r2, [r0, #0]
 8006176:	4616      	mov	r6, r2
 8006178:	461f      	mov	r7, r3
 800617a:	4604      	mov	r4, r0
 800617c:	f000 fb6a 	bl	8006854 <core_init>
 8006180:	b970      	cbnz	r0, 80061a0 <ai_platform_network_create+0x3c>
 8006182:	2530      	movs	r5, #48	@ 0x30
 8006184:	2300      	movs	r3, #0
 8006186:	6023      	str	r3, [r4, #0]
 8006188:	2410      	movs	r4, #16
 800618a:	464a      	mov	r2, r9
 800618c:	4641      	mov	r1, r8
 800618e:	4638      	mov	r0, r7
 8006190:	f001 f968 	bl	8007464 <ai_version_get>
 8006194:	60b0      	str	r0, [r6, #8]
 8006196:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800619a:	b003      	add	sp, #12
 800619c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061a0:	2200      	movs	r2, #0
 80061a2:	4641      	mov	r1, r8
 80061a4:	4638      	mov	r0, r7
 80061a6:	f001 f95d 	bl	8007464 <ai_version_get>
 80061aa:	4605      	mov	r5, r0
 80061ac:	2200      	movs	r2, #0
 80061ae:	2105      	movs	r1, #5
 80061b0:	2001      	movs	r0, #1
 80061b2:	f001 f957 	bl	8007464 <ai_version_get>
 80061b6:	4285      	cmp	r5, r0
 80061b8:	d008      	beq.n	80061cc <ai_platform_network_create+0x68>
 80061ba:	2501      	movs	r5, #1
 80061bc:	e7e2      	b.n	8006184 <ai_platform_network_create+0x20>
 80061be:	2510      	movs	r5, #16
 80061c0:	462c      	mov	r4, r5
 80061c2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80061c6:	b003      	add	sp, #12
 80061c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061cc:	4b05      	ldr	r3, [pc, #20]	@ (80061e4 <ai_platform_network_create+0x80>)
 80061ce:	a801      	add	r0, sp, #4
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	f000 fb53 	bl	800687c <ai_check_custom_types>
 80061d6:	b110      	cbz	r0, 80061de <ai_platform_network_create+0x7a>
 80061d8:	2400      	movs	r4, #0
 80061da:	4625      	mov	r5, r4
 80061dc:	e7d5      	b.n	800618a <ai_platform_network_create+0x26>
 80061de:	2502      	movs	r5, #2
 80061e0:	e7d0      	b.n	8006184 <ai_platform_network_create+0x20>
 80061e2:	bf00      	nop
 80061e4:	84048403 	.word	0x84048403

080061e8 <ai_platform_network_init>:
 80061e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	4a5c      	ldr	r2, [pc, #368]	@ (8006360 <ai_platform_network_init+0x178>)
 80061ee:	460c      	mov	r4, r1
 80061f0:	6801      	ldr	r1, [r0, #0]
 80061f2:	438a      	bics	r2, r1
 80061f4:	d133      	bne.n	800625e <ai_platform_network_init+0x76>
 80061f6:	4605      	mov	r5, r0
 80061f8:	2c00      	cmp	r4, #0
 80061fa:	f000 8093 	beq.w	8006324 <ai_platform_network_init+0x13c>
 80061fe:	f8d4 b000 	ldr.w	fp, [r4]
 8006202:	4a58      	ldr	r2, [pc, #352]	@ (8006364 <ai_platform_network_init+0x17c>)
 8006204:	4593      	cmp	fp, r2
 8006206:	d10f      	bne.n	8006228 <ai_platform_network_init+0x40>
 8006208:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 800620c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8006210:	4b53      	ldr	r3, [pc, #332]	@ (8006360 <ai_platform_network_init+0x178>)
 8006212:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 8006216:	0c32      	lsrs	r2, r6, #16
 8006218:	4299      	cmp	r1, r3
 800621a:	d02c      	beq.n	8006276 <ai_platform_network_init+0x8e>
 800621c:	2303      	movs	r3, #3
 800621e:	462c      	mov	r4, r5
 8006220:	612b      	str	r3, [r5, #16]
 8006222:	4620      	mov	r0, r4
 8006224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006228:	4627      	mov	r7, r4
 800622a:	2101      	movs	r1, #1
 800622c:	6864      	ldr	r4, [r4, #4]
 800622e:	4638      	mov	r0, r7
 8006230:	f107 081c 	add.w	r8, r7, #28
 8006234:	f7ff fc78 	bl	8005b28 <ai_buffer_get_size>
 8006238:	4606      	mov	r6, r0
 800623a:	2101      	movs	r1, #1
 800623c:	4640      	mov	r0, r8
 800623e:	f8d7 9020 	ldr.w	r9, [r7, #32]
 8006242:	f7ff fc71 	bl	8005b28 <ai_buffer_get_size>
 8006246:	b976      	cbnz	r6, 8006266 <ai_platform_network_init+0x7e>
 8006248:	2800      	cmp	r0, #0
 800624a:	d150      	bne.n	80062ee <ai_platform_network_init+0x106>
 800624c:	4680      	mov	r8, r0
 800624e:	4686      	mov	lr, r0
 8006250:	4606      	mov	r6, r0
 8006252:	4607      	mov	r7, r0
 8006254:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8006258:	6829      	ldr	r1, [r5, #0]
 800625a:	0436      	lsls	r6, r6, #16
 800625c:	e7d8      	b.n	8006210 <ai_platform_network_init+0x28>
 800625e:	2400      	movs	r4, #0
 8006260:	4620      	mov	r0, r4
 8006262:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006266:	2800      	cmp	r0, #0
 8006268:	d13b      	bne.n	80062e2 <ai_platform_network_init+0xfa>
 800626a:	4680      	mov	r8, r0
 800626c:	4686      	mov	lr, r0
 800626e:	2c00      	cmp	r4, #0
 8006270:	d05e      	beq.n	8006330 <ai_platform_network_init+0x148>
 8006272:	2601      	movs	r6, #1
 8006274:	e7ee      	b.n	8006254 <ai_platform_network_init+0x6c>
 8006276:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 8006278:	4293      	cmp	r3, r2
 800627a:	4b3a      	ldr	r3, [pc, #232]	@ (8006364 <ai_platform_network_init+0x17c>)
 800627c:	d33e      	bcc.n	80062fc <ai_platform_network_init+0x114>
 800627e:	459b      	cmp	fp, r3
 8006280:	d03e      	beq.n	8006300 <ai_platform_network_init+0x118>
 8006282:	b1a2      	cbz	r2, 80062ae <ai_platform_network_init+0xc6>
 8006284:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8006288:	f04f 0c00 	mov.w	ip, #0
 800628c:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8006290:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8006292:	eb07 0b0c 	add.w	fp, r7, ip
 8006296:	4464      	add	r4, ip
 8006298:	f10c 0c1c 	add.w	ip, ip, #28
 800629c:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80062a0:	45cc      	cmp	ip, r9
 80062a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062a4:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 80062a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80062ac:	d1f0      	bne.n	8006290 <ai_platform_network_init+0xa8>
 80062ae:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 80062b0:	622e      	str	r6, [r5, #32]
 80062b2:	4553      	cmp	r3, sl
 80062b4:	d34b      	bcc.n	800634e <ai_platform_network_init+0x166>
 80062b6:	f1ba 0f00 	cmp.w	sl, #0
 80062ba:	d025      	beq.n	8006308 <ai_platform_network_init+0x120>
 80062bc:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 80062c0:	2700      	movs	r7, #0
 80062c2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80062c6:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 80062c8:	eb08 0607 	add.w	r6, r8, r7
 80062cc:	443c      	add	r4, r7
 80062ce:	371c      	adds	r7, #28
 80062d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80062d2:	4557      	cmp	r7, sl
 80062d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80062da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80062de:	d1f2      	bne.n	80062c6 <ai_platform_network_init+0xde>
 80062e0:	e012      	b.n	8006308 <ai_platform_network_init+0x120>
 80062e2:	f1b9 0f00 	cmp.w	r9, #0
 80062e6:	d015      	beq.n	8006314 <ai_platform_network_init+0x12c>
 80062e8:	f04f 0e01 	mov.w	lr, #1
 80062ec:	e7bf      	b.n	800626e <ai_platform_network_init+0x86>
 80062ee:	f1b9 0f00 	cmp.w	r9, #0
 80062f2:	d00f      	beq.n	8006314 <ai_platform_network_init+0x12c>
 80062f4:	f04f 0e01 	mov.w	lr, #1
 80062f8:	4637      	mov	r7, r6
 80062fa:	e7ab      	b.n	8006254 <ai_platform_network_init+0x6c>
 80062fc:	459b      	cmp	fp, r3
 80062fe:	d11e      	bne.n	800633e <ai_platform_network_init+0x156>
 8006300:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 8006304:	e9c5 6708 	strd	r6, r7, [r5, #32]
 8006308:	4628      	mov	r0, r5
 800630a:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 800630e:	f000 fadd 	bl	80068cc <ai_layers_init_all>
 8006312:	e783      	b.n	800621c <ai_platform_network_init+0x34>
 8006314:	2213      	movs	r2, #19
 8006316:	2110      	movs	r1, #16
 8006318:	f105 000c 	add.w	r0, r5, #12
 800631c:	2400      	movs	r4, #0
 800631e:	f000 faa1 	bl	8006864 <core_set_error>
 8006322:	e77e      	b.n	8006222 <ai_platform_network_init+0x3a>
 8006324:	2211      	movs	r2, #17
 8006326:	2110      	movs	r1, #16
 8006328:	300c      	adds	r0, #12
 800632a:	f000 fa9b 	bl	8006864 <core_set_error>
 800632e:	e778      	b.n	8006222 <ai_platform_network_init+0x3a>
 8006330:	2212      	movs	r2, #18
 8006332:	2110      	movs	r1, #16
 8006334:	f105 000c 	add.w	r0, r5, #12
 8006338:	f000 fa94 	bl	8006864 <core_set_error>
 800633c:	e771      	b.n	8006222 <ai_platform_network_init+0x3a>
 800633e:	2212      	movs	r2, #18
 8006340:	2116      	movs	r1, #22
 8006342:	f105 000c 	add.w	r0, r5, #12
 8006346:	2400      	movs	r4, #0
 8006348:	f000 fa8c 	bl	8006864 <core_set_error>
 800634c:	e769      	b.n	8006222 <ai_platform_network_init+0x3a>
 800634e:	2213      	movs	r2, #19
 8006350:	2116      	movs	r1, #22
 8006352:	f105 000c 	add.w	r0, r5, #12
 8006356:	2400      	movs	r4, #0
 8006358:	f000 fa84 	bl	8006864 <core_set_error>
 800635c:	e761      	b.n	8006222 <ai_platform_network_init+0x3a>
 800635e:	bf00      	nop
 8006360:	a1c00100 	.word	0xa1c00100
 8006364:	a1facade 	.word	0xa1facade

08006368 <ai_platform_network_post_init>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	4b16      	ldr	r3, [pc, #88]	@ (80063c4 <ai_platform_network_post_init+0x5c>)
 800636c:	6802      	ldr	r2, [r0, #0]
 800636e:	ea02 0103 	and.w	r1, r2, r3
 8006372:	4393      	bics	r3, r2
 8006374:	d108      	bne.n	8006388 <ai_platform_network_post_init+0x20>
 8006376:	6903      	ldr	r3, [r0, #16]
 8006378:	4604      	mov	r4, r0
 800637a:	f013 0502 	ands.w	r5, r3, #2
 800637e:	d005      	beq.n	800638c <ai_platform_network_post_init+0x24>
 8006380:	428a      	cmp	r2, r1
 8006382:	d00a      	beq.n	800639a <ai_platform_network_post_init+0x32>
 8006384:	2001      	movs	r0, #1
 8006386:	bd38      	pop	{r3, r4, r5, pc}
 8006388:	2000      	movs	r0, #0
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	2210      	movs	r2, #16
 800638e:	2111      	movs	r1, #17
 8006390:	300c      	adds	r0, #12
 8006392:	f000 fa67 	bl	8006864 <core_set_error>
 8006396:	4628      	mov	r0, r5
 8006398:	bd38      	pop	{r3, r4, r5, pc}
 800639a:	f000 faa5 	bl	80068e8 <ai_layers_post_init_all>
 800639e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0ef      	beq.n	8006384 <ai_platform_network_post_init+0x1c>
 80063a4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80063a6:	e008      	b.n	80063ba <ai_platform_network_post_init+0x52>
 80063a8:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 80063ac:	4798      	blx	r3
 80063ae:	692b      	ldr	r3, [r5, #16]
 80063b0:	42ab      	cmp	r3, r5
 80063b2:	461d      	mov	r5, r3
 80063b4:	d0e6      	beq.n	8006384 <ai_platform_network_post_init+0x1c>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0e4      	beq.n	8006384 <ai_platform_network_post_init+0x1c>
 80063ba:	4629      	mov	r1, r5
 80063bc:	2000      	movs	r0, #0
 80063be:	2d00      	cmp	r5, #0
 80063c0:	d1f2      	bne.n	80063a8 <ai_platform_network_post_init+0x40>
 80063c2:	e7df      	b.n	8006384 <ai_platform_network_post_init+0x1c>
 80063c4:	a1c00100 	.word	0xa1c00100

080063c8 <ai_platform_network_process>:
 80063c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063cc:	b085      	sub	sp, #20
 80063ce:	4bb7      	ldr	r3, [pc, #732]	@ (80066ac <ai_platform_network_process+0x2e4>)
 80063d0:	9202      	str	r2, [sp, #8]
 80063d2:	6802      	ldr	r2, [r0, #0]
 80063d4:	4393      	bics	r3, r2
 80063d6:	f040 8142 	bne.w	800665e <ai_platform_network_process+0x296>
 80063da:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80063dc:	4605      	mov	r5, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 8126 	beq.w	8006630 <ai_platform_network_process+0x268>
 80063e4:	6903      	ldr	r3, [r0, #16]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 80063ec:	f003 0303 	and.w	r3, r3, #3
 80063f0:	6182      	str	r2, [r0, #24]
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	f040 8122 	bne.w	800663c <ai_platform_network_process+0x274>
 80063f8:	2900      	cmp	r1, #0
 80063fa:	f000 8136 	beq.w	800666a <ai_platform_network_process+0x2a2>
 80063fe:	fab8 f788 	clz	r7, r8
 8006402:	097f      	lsrs	r7, r7, #5
 8006404:	f1b8 0f00 	cmp.w	r8, #0
 8006408:	f000 812f 	beq.w	800666a <ai_platform_network_process+0x2a2>
 800640c:	f8b8 3000 	ldrh.w	r3, [r8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 812a 	beq.w	800666a <ai_platform_network_process+0x2a2>
 8006416:	698b      	ldr	r3, [r1, #24]
 8006418:	460e      	mov	r6, r1
 800641a:	9003      	str	r0, [sp, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	9301      	str	r3, [sp, #4]
 8006420:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d072      	beq.n	800650e <ai_platform_network_process+0x146>
 8006428:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800642c:	2c00      	cmp	r4, #0
 800642e:	d06e      	beq.n	800650e <ai_platform_network_process+0x146>
 8006430:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006434:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006438:	f8d3 a000 	ldr.w	sl, [r3]
 800643c:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8006440:	f000 8112 	beq.w	8006668 <ai_platform_network_process+0x2a0>
 8006444:	69a3      	ldr	r3, [r4, #24]
 8006446:	2101      	movs	r1, #1
 8006448:	4630      	mov	r0, r6
 800644a:	685d      	ldr	r5, [r3, #4]
 800644c:	f7ff fb6c 	bl	8005b28 <ai_buffer_get_size>
 8006450:	4285      	cmp	r5, r0
 8006452:	f0c0 8115 	bcc.w	8006680 <ai_platform_network_process+0x2b8>
 8006456:	68e0      	ldr	r0, [r4, #12]
 8006458:	69b1      	ldr	r1, [r6, #24]
 800645a:	68c2      	ldr	r2, [r0, #12]
 800645c:	68cb      	ldr	r3, [r1, #12]
 800645e:	429a      	cmp	r2, r3
 8006460:	f040 810e 	bne.w	8006680 <ai_platform_network_process+0x2b8>
 8006464:	6882      	ldr	r2, [r0, #8]
 8006466:	688b      	ldr	r3, [r1, #8]
 8006468:	429a      	cmp	r2, r3
 800646a:	f040 8109 	bne.w	8006680 <ai_platform_network_process+0x2b8>
 800646e:	6842      	ldr	r2, [r0, #4]
 8006470:	684b      	ldr	r3, [r1, #4]
 8006472:	429a      	cmp	r2, r3
 8006474:	f040 8104 	bne.w	8006680 <ai_platform_network_process+0x2b8>
 8006478:	69a3      	ldr	r3, [r4, #24]
 800647a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800647e:	f000 ffdf 	bl	8007440 <ai_array_get_data_byte_size>
 8006482:	4605      	mov	r5, r0
 8006484:	4620      	mov	r0, r4
 8006486:	f001 f805 	bl	8007494 <get_tensor_byte_size>
 800648a:	4285      	cmp	r5, r0
 800648c:	f0c0 80f8 	bcc.w	8006680 <ai_platform_network_process+0x2b8>
 8006490:	69a3      	ldr	r3, [r4, #24]
 8006492:	6818      	ldr	r0, [r3, #0]
 8006494:	f000 ff64 	bl	8007360 <ai_array_to_buffer_fmt>
 8006498:	6833      	ldr	r3, [r6, #0]
 800649a:	4058      	eors	r0, r3
 800649c:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80064a0:	f040 81a4 	bne.w	80067ec <ai_platform_network_process+0x424>
 80064a4:	6873      	ldr	r3, [r6, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 80de 	beq.w	8006668 <ai_platform_network_process+0x2a0>
 80064ac:	69b3      	ldr	r3, [r6, #24]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 81a4 	beq.w	80067fe <ai_platform_network_process+0x436>
 80064b6:	9a01      	ldr	r2, [sp, #4]
 80064b8:	4620      	mov	r0, r4
 80064ba:	3701      	adds	r7, #1
 80064bc:	361c      	adds	r6, #28
 80064be:	429a      	cmp	r2, r3
 80064c0:	bf38      	it	cc
 80064c2:	461a      	movcc	r2, r3
 80064c4:	9201      	str	r2, [sp, #4]
 80064c6:	f000 ffe5 	bl	8007494 <get_tensor_byte_size>
 80064ca:	f8c9 0008 	str.w	r0, [r9, #8]
 80064ce:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	fb00 f303 	mul.w	r3, r0, r3
 80064d8:	f8c9 300c 	str.w	r3, [r9, #12]
 80064dc:	f856 1c18 	ldr.w	r1, [r6, #-24]
 80064e0:	440b      	add	r3, r1
 80064e2:	f8c9 1004 	str.w	r1, [r9, #4]
 80064e6:	f84a 300b 	str.w	r3, [sl, fp]
 80064ea:	69a0      	ldr	r0, [r4, #24]
 80064ec:	6803      	ldr	r3, [r0, #0]
 80064ee:	009a      	lsls	r2, r3, #2
 80064f0:	f100 80af 	bmi.w	8006652 <ai_platform_network_process+0x28a>
 80064f4:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80064f8:	1a9b      	subs	r3, r3, r2
 80064fa:	4419      	add	r1, r3
 80064fc:	6081      	str	r1, [r0, #8]
 80064fe:	69a3      	ldr	r3, [r4, #24]
 8006500:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006504:	60da      	str	r2, [r3, #12]
 8006506:	f8b8 3000 	ldrh.w	r3, [r8]
 800650a:	42bb      	cmp	r3, r7
 800650c:	d888      	bhi.n	8006420 <ai_platform_network_process+0x58>
 800650e:	9d03      	ldr	r5, [sp, #12]
 8006510:	9b02      	ldr	r3, [sp, #8]
 8006512:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 817b 	beq.w	8006810 <ai_platform_network_process+0x448>
 800651a:	2a01      	cmp	r2, #1
 800651c:	f240 80bd 	bls.w	800669a <ai_platform_network_process+0x2d2>
 8006520:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 8006524:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 80b6 	beq.w	800669a <ai_platform_network_process+0x2d2>
 800652e:	2700      	movs	r7, #0
 8006530:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006534:	9502      	str	r5, [sp, #8]
 8006536:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 80bd 	beq.w	80066ba <ai_platform_network_process+0x2f2>
 8006540:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8006544:	2e00      	cmp	r6, #0
 8006546:	f000 80b8 	beq.w	80066ba <ai_platform_network_process+0x2f2>
 800654a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800654e:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8006552:	681c      	ldr	r4, [r3, #0]
 8006554:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 8006558:	f000 8170 	beq.w	800683c <ai_platform_network_process+0x474>
 800655c:	69b3      	ldr	r3, [r6, #24]
 800655e:	2101      	movs	r1, #1
 8006560:	4658      	mov	r0, fp
 8006562:	685d      	ldr	r5, [r3, #4]
 8006564:	f7ff fae0 	bl	8005b28 <ai_buffer_get_size>
 8006568:	4285      	cmp	r5, r0
 800656a:	f0c0 8095 	bcc.w	8006698 <ai_platform_network_process+0x2d0>
 800656e:	68f0      	ldr	r0, [r6, #12]
 8006570:	f8db 1018 	ldr.w	r1, [fp, #24]
 8006574:	68c2      	ldr	r2, [r0, #12]
 8006576:	68cb      	ldr	r3, [r1, #12]
 8006578:	429a      	cmp	r2, r3
 800657a:	f040 808d 	bne.w	8006698 <ai_platform_network_process+0x2d0>
 800657e:	6882      	ldr	r2, [r0, #8]
 8006580:	688b      	ldr	r3, [r1, #8]
 8006582:	429a      	cmp	r2, r3
 8006584:	f040 8088 	bne.w	8006698 <ai_platform_network_process+0x2d0>
 8006588:	6842      	ldr	r2, [r0, #4]
 800658a:	684b      	ldr	r3, [r1, #4]
 800658c:	429a      	cmp	r2, r3
 800658e:	f040 8083 	bne.w	8006698 <ai_platform_network_process+0x2d0>
 8006592:	69b3      	ldr	r3, [r6, #24]
 8006594:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006598:	f000 ff52 	bl	8007440 <ai_array_get_data_byte_size>
 800659c:	9003      	str	r0, [sp, #12]
 800659e:	4630      	mov	r0, r6
 80065a0:	f000 ff78 	bl	8007494 <get_tensor_byte_size>
 80065a4:	9b03      	ldr	r3, [sp, #12]
 80065a6:	4283      	cmp	r3, r0
 80065a8:	d376      	bcc.n	8006698 <ai_platform_network_process+0x2d0>
 80065aa:	69b3      	ldr	r3, [r6, #24]
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	f000 fed7 	bl	8007360 <ai_array_to_buffer_fmt>
 80065b2:	f8db 3000 	ldr.w	r3, [fp]
 80065b6:	4058      	eors	r0, r3
 80065b8:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80065bc:	f040 812c 	bne.w	8006818 <ai_platform_network_process+0x450>
 80065c0:	f8db 3004 	ldr.w	r3, [fp, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 8139 	beq.w	800683c <ai_platform_network_process+0x474>
 80065ca:	f8db 3018 	ldr.w	r3, [fp, #24]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 812a 	beq.w	800682a <ai_platform_network_process+0x462>
 80065d6:	9a01      	ldr	r2, [sp, #4]
 80065d8:	4630      	mov	r0, r6
 80065da:	3701      	adds	r7, #1
 80065dc:	f10b 0b1c 	add.w	fp, fp, #28
 80065e0:	429a      	cmp	r2, r3
 80065e2:	bf38      	it	cc
 80065e4:	461a      	movcc	r2, r3
 80065e6:	9201      	str	r2, [sp, #4]
 80065e8:	f000 ff54 	bl	8007494 <get_tensor_byte_size>
 80065ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80065f0:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	fb00 f303 	mul.w	r3, r0, r3
 80065fa:	f8c8 300c 	str.w	r3, [r8, #12]
 80065fe:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 8006602:	440b      	add	r3, r1
 8006604:	f8c8 1004 	str.w	r1, [r8, #4]
 8006608:	f844 300a 	str.w	r3, [r4, sl]
 800660c:	69b0      	ldr	r0, [r6, #24]
 800660e:	6803      	ldr	r3, [r0, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	d44d      	bmi.n	80066b0 <ai_platform_network_process+0x2e8>
 8006614:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006618:	1a9b      	subs	r3, r3, r2
 800661a:	4419      	add	r1, r3
 800661c:	6081      	str	r1, [r0, #8]
 800661e:	69b3      	ldr	r3, [r6, #24]
 8006620:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006624:	60da      	str	r2, [r3, #12]
 8006626:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800662a:	42bb      	cmp	r3, r7
 800662c:	d883      	bhi.n	8006536 <ai_platform_network_process+0x16e>
 800662e:	e044      	b.n	80066ba <ai_platform_network_process+0x2f2>
 8006630:	6902      	ldr	r2, [r0, #16]
 8006632:	6183      	str	r3, [r0, #24]
 8006634:	f002 0203 	and.w	r2, r2, #3
 8006638:	2a03      	cmp	r2, #3
 800663a:	d016      	beq.n	800666a <ai_platform_network_process+0x2a2>
 800663c:	2230      	movs	r2, #48	@ 0x30
 800663e:	2111      	movs	r1, #17
 8006640:	f105 000c 	add.w	r0, r5, #12
 8006644:	2400      	movs	r4, #0
 8006646:	f000 f90d 	bl	8006864 <core_set_error>
 800664a:	4620      	mov	r0, r4
 800664c:	b005      	add	sp, #20
 800664e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006652:	f8b8 3000 	ldrh.w	r3, [r8]
 8006656:	429f      	cmp	r7, r3
 8006658:	f4ff aee2 	bcc.w	8006420 <ai_platform_network_process+0x58>
 800665c:	e757      	b.n	800650e <ai_platform_network_process+0x146>
 800665e:	2400      	movs	r4, #0
 8006660:	4620      	mov	r0, r4
 8006662:	b005      	add	sp, #20
 8006664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006668:	9d03      	ldr	r5, [sp, #12]
 800666a:	2400      	movs	r4, #0
 800666c:	2217      	movs	r2, #23
 800666e:	2112      	movs	r1, #18
 8006670:	f105 000c 	add.w	r0, r5, #12
 8006674:	f000 f8f6 	bl	8006864 <core_set_error>
 8006678:	4620      	mov	r0, r4
 800667a:	b005      	add	sp, #20
 800667c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006680:	9d03      	ldr	r5, [sp, #12]
 8006682:	2400      	movs	r4, #0
 8006684:	2218      	movs	r2, #24
 8006686:	2112      	movs	r1, #18
 8006688:	f105 000c 	add.w	r0, r5, #12
 800668c:	f000 f8ea 	bl	8006864 <core_set_error>
 8006690:	4620      	mov	r0, r4
 8006692:	b005      	add	sp, #20
 8006694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006698:	9d02      	ldr	r5, [sp, #8]
 800669a:	2218      	movs	r2, #24
 800669c:	2113      	movs	r1, #19
 800669e:	f105 000c 	add.w	r0, r5, #12
 80066a2:	2400      	movs	r4, #0
 80066a4:	f000 f8de 	bl	8006864 <core_set_error>
 80066a8:	e7cf      	b.n	800664a <ai_platform_network_process+0x282>
 80066aa:	bf00      	nop
 80066ac:	a1c00100 	.word	0xa1c00100
 80066b0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80066b4:	429f      	cmp	r7, r3
 80066b6:	f4ff af3e 	bcc.w	8006536 <ai_platform_network_process+0x16e>
 80066ba:	9d02      	ldr	r5, [sp, #8]
 80066bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80066c0:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80066c2:	832b      	strh	r3, [r5, #24]
 80066c4:	2a00      	cmp	r2, #0
 80066c6:	f040 808b 	bne.w	80067e0 <ai_platform_network_process+0x418>
 80066ca:	4616      	mov	r6, r2
 80066cc:	4617      	mov	r7, r2
 80066ce:	8b6c      	ldrh	r4, [r5, #26]
 80066d0:	429c      	cmp	r4, r3
 80066d2:	d2ba      	bcs.n	800664a <ai_platform_network_process+0x282>
 80066d4:	46ab      	mov	fp, r5
 80066d6:	2e00      	cmp	r6, #0
 80066d8:	d030      	beq.n	800673c <ai_platform_network_process+0x374>
 80066da:	f04f 0800 	mov.w	r8, #0
 80066de:	e014      	b.n	800670a <ai_platform_network_process+0x342>
 80066e0:	6882      	ldr	r2, [r0, #8]
 80066e2:	68c5      	ldr	r5, [r0, #12]
 80066e4:	6863      	ldr	r3, [r4, #4]
 80066e6:	1b52      	subs	r2, r2, r5
 80066e8:	4413      	add	r3, r2
 80066ea:	6083      	str	r3, [r0, #8]
 80066ec:	698b      	ldr	r3, [r1, #24]
 80066ee:	6862      	ldr	r2, [r4, #4]
 80066f0:	60da      	str	r2, [r3, #12]
 80066f2:	f859 200a 	ldr.w	r2, [r9, sl]
 80066f6:	f108 0801 	add.w	r8, r8, #1
 80066fa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80066fe:	440b      	add	r3, r1
 8006700:	4293      	cmp	r3, r2
 8006702:	d301      	bcc.n	8006708 <ai_platform_network_process+0x340>
 8006704:	68e3      	ldr	r3, [r4, #12]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	6063      	str	r3, [r4, #4]
 800670a:	8833      	ldrh	r3, [r6, #0]
 800670c:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8006710:	4543      	cmp	r3, r8
 8006712:	d913      	bls.n	800673c <ai_platform_network_process+0x374>
 8006714:	6873      	ldr	r3, [r6, #4]
 8006716:	b18b      	cbz	r3, 800673c <ai_platform_network_process+0x374>
 8006718:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800671c:	b171      	cbz	r1, 800673c <ai_platform_network_process+0x374>
 800671e:	6988      	ldr	r0, [r1, #24]
 8006720:	68b2      	ldr	r2, [r6, #8]
 8006722:	6803      	ldr	r3, [r0, #0]
 8006724:	f8d2 9000 	ldr.w	r9, [r2]
 8006728:	009d      	lsls	r5, r3, #2
 800672a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800672e:	d5d7      	bpl.n	80066e0 <ai_platform_network_process+0x318>
 8006730:	6881      	ldr	r1, [r0, #8]
 8006732:	68a2      	ldr	r2, [r4, #8]
 8006734:	6860      	ldr	r0, [r4, #4]
 8006736:	f000 fd55 	bl	80071e4 <st_int8_copy>
 800673a:	e7da      	b.n	80066f2 <ai_platform_network_process+0x32a>
 800673c:	4658      	mov	r0, fp
 800673e:	f000 f8e7 	bl	8006910 <ai_layers_forward_all>
 8006742:	2f00      	cmp	r7, #0
 8006744:	d03d      	beq.n	80067c2 <ai_platform_network_process+0x3fa>
 8006746:	2400      	movs	r4, #0
 8006748:	e016      	b.n	8006778 <ai_platform_network_process+0x3b0>
 800674a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800674e:	f859 100a 	ldr.w	r1, [r9, sl]
 8006752:	4413      	add	r3, r2
 8006754:	428b      	cmp	r3, r1
 8006756:	d302      	bcc.n	800675e <ai_platform_network_process+0x396>
 8006758:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800675c:	1acb      	subs	r3, r1, r3
 800675e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006762:	6981      	ldr	r1, [r0, #24]
 8006764:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006768:	1b52      	subs	r2, r2, r5
 800676a:	4413      	add	r3, r2
 800676c:	608b      	str	r3, [r1, #8]
 800676e:	6983      	ldr	r3, [r0, #24]
 8006770:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006774:	60da      	str	r2, [r3, #12]
 8006776:	3401      	adds	r4, #1
 8006778:	883b      	ldrh	r3, [r7, #0]
 800677a:	42a3      	cmp	r3, r4
 800677c:	d921      	bls.n	80067c2 <ai_platform_network_process+0x3fa>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	b1fb      	cbz	r3, 80067c2 <ai_platform_network_process+0x3fa>
 8006782:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006786:	b1e0      	cbz	r0, 80067c2 <ai_platform_network_process+0x3fa>
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800678e:	6983      	ldr	r3, [r0, #24]
 8006790:	f8d2 9000 	ldr.w	r9, [r2]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800679a:	0092      	lsls	r2, r2, #2
 800679c:	d5d5      	bpl.n	800674a <ai_platform_network_process+0x382>
 800679e:	6898      	ldr	r0, [r3, #8]
 80067a0:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80067a4:	f000 fd1e 	bl	80071e4 <st_int8_copy>
 80067a8:	f859 200a 	ldr.w	r2, [r9, sl]
 80067ac:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80067b0:	440b      	add	r3, r1
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d302      	bcc.n	80067bc <ai_platform_network_process+0x3f4>
 80067b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	f8c8 3004 	str.w	r3, [r8, #4]
 80067c0:	e7d9      	b.n	8006776 <ai_platform_network_process+0x3ae>
 80067c2:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 80067c6:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80067ca:	3401      	adds	r4, #1
 80067cc:	b2a4      	uxth	r4, r4
 80067ce:	42a3      	cmp	r3, r4
 80067d0:	f8ab 401a 	strh.w	r4, [fp, #26]
 80067d4:	f63f af7f 	bhi.w	80066d6 <ai_platform_network_process+0x30e>
 80067d8:	4620      	mov	r0, r4
 80067da:	b005      	add	sp, #20
 80067dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e0:	2a01      	cmp	r2, #1
 80067e2:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 80067e4:	d033      	beq.n	800684e <ai_platform_network_process+0x486>
 80067e6:	f106 070c 	add.w	r7, r6, #12
 80067ea:	e770      	b.n	80066ce <ai_platform_network_process+0x306>
 80067ec:	9d03      	ldr	r5, [sp, #12]
 80067ee:	2219      	movs	r2, #25
 80067f0:	2112      	movs	r1, #18
 80067f2:	2400      	movs	r4, #0
 80067f4:	f105 000c 	add.w	r0, r5, #12
 80067f8:	f000 f834 	bl	8006864 <core_set_error>
 80067fc:	e725      	b.n	800664a <ai_platform_network_process+0x282>
 80067fe:	9d03      	ldr	r5, [sp, #12]
 8006800:	4604      	mov	r4, r0
 8006802:	2221      	movs	r2, #33	@ 0x21
 8006804:	2112      	movs	r1, #18
 8006806:	f105 000c 	add.w	r0, r5, #12
 800680a:	f000 f82b 	bl	8006864 <core_set_error>
 800680e:	e71c      	b.n	800664a <ai_platform_network_process+0x282>
 8006810:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006814:	832b      	strh	r3, [r5, #24]
 8006816:	e755      	b.n	80066c4 <ai_platform_network_process+0x2fc>
 8006818:	9d02      	ldr	r5, [sp, #8]
 800681a:	2219      	movs	r2, #25
 800681c:	2113      	movs	r1, #19
 800681e:	2400      	movs	r4, #0
 8006820:	f105 000c 	add.w	r0, r5, #12
 8006824:	f000 f81e 	bl	8006864 <core_set_error>
 8006828:	e70f      	b.n	800664a <ai_platform_network_process+0x282>
 800682a:	9d02      	ldr	r5, [sp, #8]
 800682c:	4604      	mov	r4, r0
 800682e:	2221      	movs	r2, #33	@ 0x21
 8006830:	2113      	movs	r1, #19
 8006832:	f105 000c 	add.w	r0, r5, #12
 8006836:	f000 f815 	bl	8006864 <core_set_error>
 800683a:	e706      	b.n	800664a <ai_platform_network_process+0x282>
 800683c:	9d02      	ldr	r5, [sp, #8]
 800683e:	2217      	movs	r2, #23
 8006840:	2113      	movs	r1, #19
 8006842:	2400      	movs	r4, #0
 8006844:	f105 000c 	add.w	r0, r5, #12
 8006848:	f000 f80c 	bl	8006864 <core_set_error>
 800684c:	e6fd      	b.n	800664a <ai_platform_network_process+0x282>
 800684e:	2700      	movs	r7, #0
 8006850:	e73d      	b.n	80066ce <ai_platform_network_process+0x306>
 8006852:	bf00      	nop

08006854 <core_init>:
 8006854:	2001      	movs	r0, #1
 8006856:	4770      	bx	lr

08006858 <core_get_error>:
 8006858:	4603      	mov	r3, r0
 800685a:	2200      	movs	r2, #0
 800685c:	6800      	ldr	r0, [r0, #0]
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop

08006864 <core_set_error>:
 8006864:	4603      	mov	r3, r0
 8006866:	7800      	ldrb	r0, [r0, #0]
 8006868:	b108      	cbz	r0, 800686e <core_set_error+0xa>
 800686a:	2000      	movs	r0, #0
 800686c:	4770      	bx	lr
 800686e:	7019      	strb	r1, [r3, #0]
 8006870:	2001      	movs	r0, #1
 8006872:	6819      	ldr	r1, [r3, #0]
 8006874:	f362 211f 	bfi	r1, r2, #8, #24
 8006878:	6019      	str	r1, [r3, #0]
 800687a:	4770      	bx	lr

0800687c <ai_check_custom_types>:
 800687c:	b082      	sub	sp, #8
 800687e:	4b12      	ldr	r3, [pc, #72]	@ (80068c8 <ai_check_custom_types+0x4c>)
 8006880:	9301      	str	r3, [sp, #4]
 8006882:	b118      	cbz	r0, 800688c <ai_check_custom_types+0x10>
 8006884:	7803      	ldrb	r3, [r0, #0]
 8006886:	2b03      	cmp	r3, #3
 8006888:	d002      	beq.n	8006890 <ai_check_custom_types+0x14>
 800688a:	2000      	movs	r0, #0
 800688c:	b002      	add	sp, #8
 800688e:	4770      	bx	lr
 8006890:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006894:	4293      	cmp	r3, r2
 8006896:	d004      	beq.n	80068a2 <ai_check_custom_types+0x26>
 8006898:	2001      	movs	r0, #1
 800689a:	f080 0001 	eor.w	r0, r0, #1
 800689e:	b002      	add	sp, #8
 80068a0:	4770      	bx	lr
 80068a2:	7842      	ldrb	r2, [r0, #1]
 80068a4:	3001      	adds	r0, #1
 80068a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d1f4      	bne.n	8006898 <ai_check_custom_types+0x1c>
 80068ae:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80068b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d1ee      	bne.n	8006898 <ai_check_custom_types+0x1c>
 80068ba:	7842      	ldrb	r2, [r0, #1]
 80068bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d1e9      	bne.n	8006898 <ai_check_custom_types+0x1c>
 80068c4:	2000      	movs	r0, #0
 80068c6:	e7e8      	b.n	800689a <ai_check_custom_types+0x1e>
 80068c8:	84048403 	.word	0x84048403

080068cc <ai_layers_init_all>:
 80068cc:	2100      	movs	r1, #0
 80068ce:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80068d0:	b13b      	cbz	r3, 80068e2 <ai_layers_init_all+0x16>
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	3101      	adds	r1, #1
 80068d6:	60d8      	str	r0, [r3, #12]
 80068d8:	429a      	cmp	r2, r3
 80068da:	4613      	mov	r3, r2
 80068dc:	d001      	beq.n	80068e2 <ai_layers_init_all+0x16>
 80068de:	2a00      	cmp	r2, #0
 80068e0:	d1f6      	bne.n	80068d0 <ai_layers_init_all+0x4>
 80068e2:	4608      	mov	r0, r1
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop

080068e8 <ai_layers_post_init_all>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	2500      	movs	r5, #0
 80068ec:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80068ee:	b16c      	cbz	r4, 800690c <ai_layers_post_init_all+0x24>
 80068f0:	6863      	ldr	r3, [r4, #4]
 80068f2:	07db      	lsls	r3, r3, #31
 80068f4:	d504      	bpl.n	8006900 <ai_layers_post_init_all+0x18>
 80068f6:	6a23      	ldr	r3, [r4, #32]
 80068f8:	4620      	mov	r0, r4
 80068fa:	b10b      	cbz	r3, 8006900 <ai_layers_post_init_all+0x18>
 80068fc:	3501      	adds	r5, #1
 80068fe:	4798      	blx	r3
 8006900:	6923      	ldr	r3, [r4, #16]
 8006902:	42a3      	cmp	r3, r4
 8006904:	461c      	mov	r4, r3
 8006906:	d001      	beq.n	800690c <ai_layers_post_init_all+0x24>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1f0      	bne.n	80068ee <ai_layers_post_init_all+0x6>
 800690c:	4628      	mov	r0, r5
 800690e:	bd38      	pop	{r3, r4, r5, pc}

08006910 <ai_layers_forward_all>:
 8006910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006914:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8006918:	4604      	mov	r4, r0
 800691a:	f1b8 0f00 	cmp.w	r8, #0
 800691e:	d02a      	beq.n	8006976 <ai_layers_forward_all+0x66>
 8006920:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8006922:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8006924:	b319      	cbz	r1, 800696e <ai_layers_forward_all+0x5e>
 8006926:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8006928:	2001      	movs	r0, #1
 800692a:	47c0      	blx	r8
 800692c:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800692e:	b1f6      	cbz	r6, 800696e <ai_layers_forward_all+0x5e>
 8006930:	2700      	movs	r7, #0
 8006932:	4631      	mov	r1, r6
 8006934:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006936:	2002      	movs	r0, #2
 8006938:	47c0      	blx	r8
 800693a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800693c:	4628      	mov	r0, r5
 800693e:	696b      	ldr	r3, [r5, #20]
 8006940:	4798      	blx	r3
 8006942:	692e      	ldr	r6, [r5, #16]
 8006944:	2003      	movs	r0, #3
 8006946:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006948:	42b5      	cmp	r5, r6
 800694a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800694c:	d007      	beq.n	800695e <ai_layers_forward_all+0x4e>
 800694e:	47c0      	blx	r8
 8006950:	3701      	adds	r7, #1
 8006952:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8006954:	2e00      	cmp	r6, #0
 8006956:	d1ec      	bne.n	8006932 <ai_layers_forward_all+0x22>
 8006958:	4638      	mov	r0, r7
 800695a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800695e:	2003      	movs	r0, #3
 8006960:	3701      	adds	r7, #1
 8006962:	47c0      	blx	r8
 8006964:	2300      	movs	r3, #0
 8006966:	4638      	mov	r0, r7
 8006968:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800696a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800696e:	2700      	movs	r7, #0
 8006970:	4638      	mov	r0, r7
 8006972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006976:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8006978:	63c5      	str	r5, [r0, #60]	@ 0x3c
 800697a:	2d00      	cmp	r5, #0
 800697c:	d0f7      	beq.n	800696e <ai_layers_forward_all+0x5e>
 800697e:	4647      	mov	r7, r8
 8006980:	696b      	ldr	r3, [r5, #20]
 8006982:	4628      	mov	r0, r5
 8006984:	4798      	blx	r3
 8006986:	462b      	mov	r3, r5
 8006988:	692d      	ldr	r5, [r5, #16]
 800698a:	429d      	cmp	r5, r3
 800698c:	d004      	beq.n	8006998 <ai_layers_forward_all+0x88>
 800698e:	3701      	adds	r7, #1
 8006990:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8006992:	2d00      	cmp	r5, #0
 8006994:	d1f4      	bne.n	8006980 <ai_layers_forward_all+0x70>
 8006996:	e7df      	b.n	8006958 <ai_layers_forward_all+0x48>
 8006998:	2300      	movs	r3, #0
 800699a:	3701      	adds	r7, #1
 800699c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800699e:	e7db      	b.n	8006958 <ai_layers_forward_all+0x48>

080069a0 <forward_dense_integer_SSSA_ch>:
 80069a0:	6983      	ldr	r3, [r0, #24]
 80069a2:	8818      	ldrh	r0, [r3, #0]
 80069a4:	2800      	cmp	r0, #0
 80069a6:	f000 80af 	beq.w	8006b08 <forward_dense_integer_SSSA_ch+0x168>
 80069aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ae:	685c      	ldr	r4, [r3, #4]
 80069b0:	b08f      	sub	sp, #60	@ 0x3c
 80069b2:	6863      	ldr	r3, [r4, #4]
 80069b4:	b103      	cbz	r3, 80069b8 <forward_dense_integer_SSSA_ch+0x18>
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2801      	cmp	r0, #1
 80069ba:	f000 813f 	beq.w	8006c3c <forward_dense_integer_SSSA_ch+0x29c>
 80069be:	6922      	ldr	r2, [r4, #16]
 80069c0:	b102      	cbz	r2, 80069c4 <forward_dense_integer_SSSA_ch+0x24>
 80069c2:	6812      	ldr	r2, [r2, #0]
 80069c4:	2802      	cmp	r0, #2
 80069c6:	f000 813c 	beq.w	8006c42 <forward_dense_integer_SSSA_ch+0x2a2>
 80069ca:	69e5      	ldr	r5, [r4, #28]
 80069cc:	2d00      	cmp	r5, #0
 80069ce:	f000 80eb 	beq.w	8006ba8 <forward_dense_integer_SSSA_ch+0x208>
 80069d2:	8b26      	ldrh	r6, [r4, #24]
 80069d4:	6829      	ldr	r1, [r5, #0]
 80069d6:	2e01      	cmp	r6, #1
 80069d8:	f240 8110 	bls.w	8006bfc <forward_dense_integer_SSSA_ch+0x25c>
 80069dc:	686d      	ldr	r5, [r5, #4]
 80069de:	2803      	cmp	r0, #3
 80069e0:	f000 8132 	beq.w	8006c48 <forward_dense_integer_SSSA_ch+0x2a8>
 80069e4:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 80069e8:	69a8      	ldr	r0, [r5, #24]
 80069ea:	f1b8 0f00 	cmp.w	r8, #0
 80069ee:	f000 80f2 	beq.w	8006bd6 <forward_dense_integer_SSSA_ch+0x236>
 80069f2:	6880      	ldr	r0, [r0, #8]
 80069f4:	68dc      	ldr	r4, [r3, #12]
 80069f6:	900d      	str	r0, [sp, #52]	@ 0x34
 80069f8:	68d0      	ldr	r0, [r2, #12]
 80069fa:	6866      	ldr	r6, [r4, #4]
 80069fc:	f8d8 8000 	ldr.w	r8, [r8]
 8006a00:	6995      	ldr	r5, [r2, #24]
 8006a02:	fa1f fa86 	uxth.w	sl, r6
 8006a06:	9609      	str	r6, [sp, #36]	@ 0x24
 8006a08:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 8006a0c:	68c0      	ldr	r0, [r0, #12]
 8006a0e:	fa1f fb89 	uxth.w	fp, r9
 8006a12:	fb00 f004 	mul.w	r0, r0, r4
 8006a16:	699c      	ldr	r4, [r3, #24]
 8006a18:	9008      	str	r0, [sp, #32]
 8006a1a:	f1b8 0f00 	cmp.w	r8, #0
 8006a1e:	d003      	beq.n	8006a28 <forward_dense_integer_SSSA_ch+0x88>
 8006a20:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8006a24:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f8d2 c000 	ldr.w	ip, [r2]
 8006a2e:	6808      	ldr	r0, [r1, #0]
 8006a30:	698a      	ldr	r2, [r1, #24]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d06a      	beq.n	8006b0c <forward_dense_integer_SSSA_ch+0x16c>
 8006a36:	6859      	ldr	r1, [r3, #4]
 8006a38:	2900      	cmp	r1, #0
 8006a3a:	f000 8098 	beq.w	8006b6e <forward_dense_integer_SSSA_ch+0x1ce>
 8006a3e:	885e      	ldrh	r6, [r3, #2]
 8006a40:	2e00      	cmp	r6, #0
 8006a42:	f000 8084 	beq.w	8006b4e <forward_dense_integer_SSSA_ch+0x1ae>
 8006a46:	680f      	ldr	r7, [r1, #0]
 8006a48:	ed97 0a00 	vldr	s0, [r7]
 8006a4c:	f1bc 0f00 	cmp.w	ip, #0
 8006a50:	f000 8083 	beq.w	8006b5a <forward_dense_integer_SSSA_ch+0x1ba>
 8006a54:	f8dc e004 	ldr.w	lr, [ip, #4]
 8006a58:	f1be 0f00 	cmp.w	lr, #0
 8006a5c:	f000 8092 	beq.w	8006b84 <forward_dense_integer_SSSA_ch+0x1e4>
 8006a60:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 8006a64:	2e00      	cmp	r6, #0
 8006a66:	d05f      	beq.n	8006b28 <forward_dense_integer_SSSA_ch+0x188>
 8006a68:	6897      	ldr	r7, [r2, #8]
 8006a6a:	f8de 2000 	ldr.w	r2, [lr]
 8006a6e:	68ad      	ldr	r5, [r5, #8]
 8006a70:	68a4      	ldr	r4, [r4, #8]
 8006a72:	edd2 0a00 	vldr	s1, [r2]
 8006a76:	2900      	cmp	r1, #0
 8006a78:	d060      	beq.n	8006b3c <forward_dense_integer_SSSA_ch+0x19c>
 8006a7a:	885b      	ldrh	r3, [r3, #2]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 808a 	beq.w	8006b96 <forward_dense_integer_SSSA_ch+0x1f6>
 8006a82:	684b      	ldr	r3, [r1, #4]
 8006a84:	f993 3000 	ldrsb.w	r3, [r3]
 8006a88:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a8a:	f1bc 0f00 	cmp.w	ip, #0
 8006a8e:	f000 80d2 	beq.w	8006c36 <forward_dense_integer_SSSA_ch+0x296>
 8006a92:	f1be 0f00 	cmp.w	lr, #0
 8006a96:	f000 8084 	beq.w	8006ba2 <forward_dense_integer_SSSA_ch+0x202>
 8006a9a:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 8006a9e:	2e00      	cmp	r6, #0
 8006aa0:	d14f      	bne.n	8006b42 <forward_dense_integer_SSSA_ch+0x1a2>
 8006aa2:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006aa4:	b110      	cbz	r0, 8006aac <forward_dense_integer_SSSA_ch+0x10c>
 8006aa6:	6840      	ldr	r0, [r0, #4]
 8006aa8:	b100      	cbz	r0, 8006aac <forward_dense_integer_SSSA_ch+0x10c>
 8006aaa:	6800      	ldr	r0, [r0, #0]
 8006aac:	fa1f f989 	uxth.w	r9, r9
 8006ab0:	4642      	mov	r2, r8
 8006ab2:	4659      	mov	r1, fp
 8006ab4:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
 8006ab8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aba:	f000 f8cb 	bl	8006c54 <align_factor_ch>
 8006abe:	9b08      	ldr	r3, [sp, #32]
 8006ac0:	b1fb      	cbz	r3, 8006b02 <forward_dense_integer_SSSA_ch+0x162>
 8006ac2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8006ac6:	4652      	mov	r2, sl
 8006ac8:	2600      	movs	r6, #0
 8006aca:	468a      	mov	sl, r1
 8006acc:	4639      	mov	r1, r7
 8006ace:	4647      	mov	r7, r8
 8006ad0:	4698      	mov	r8, r3
 8006ad2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ad4:	3601      	adds	r6, #1
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	4454      	add	r4, sl
 8006ada:	9304      	str	r3, [sp, #16]
 8006adc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ade:	9303      	str	r3, [sp, #12]
 8006ae0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ae2:	9302      	str	r3, [sp, #8]
 8006ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ae6:	e9cd 5705 	strd	r5, r7, [sp, #20]
 8006aea:	e9cd 7300 	strd	r7, r3, [sp]
 8006aee:	465b      	mov	r3, fp
 8006af0:	444d      	add	r5, r9
 8006af2:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8006af6:	f000 f8dd 	bl	8006cb4 <st_sssa8_ch_fully_connected>
 8006afa:	4546      	cmp	r6, r8
 8006afc:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8006b00:	d1e7      	bne.n	8006ad2 <forward_dense_integer_SSSA_ch+0x132>
 8006b02:	b00f      	add	sp, #60	@ 0x3c
 8006b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b08:	6843      	ldr	r3, [r0, #4]
 8006b0a:	deff      	udf	#255	@ 0xff
 8006b0c:	f1bc 0f00 	cmp.w	ip, #0
 8006b10:	d052      	beq.n	8006bb8 <forward_dense_integer_SSSA_ch+0x218>
 8006b12:	f8dc e004 	ldr.w	lr, [ip, #4]
 8006b16:	f1be 0f00 	cmp.w	lr, #0
 8006b1a:	d058      	beq.n	8006bce <forward_dense_integer_SSSA_ch+0x22e>
 8006b1c:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 8006b20:	2e00      	cmp	r6, #0
 8006b22:	d16d      	bne.n	8006c00 <forward_dense_integer_SSSA_ch+0x260>
 8006b24:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 8006c50 <forward_dense_integer_SSSA_ch+0x2b0>
 8006b28:	68ad      	ldr	r5, [r5, #8]
 8006b2a:	68a4      	ldr	r4, [r4, #8]
 8006b2c:	6897      	ldr	r7, [r2, #8]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d03d      	beq.n	8006bae <forward_dense_integer_SSSA_ch+0x20e>
 8006b32:	6859      	ldr	r1, [r3, #4]
 8006b34:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8006c50 <forward_dense_integer_SSSA_ch+0x2b0>
 8006b38:	2900      	cmp	r1, #0
 8006b3a:	d19e      	bne.n	8006a7a <forward_dense_integer_SSSA_ch+0xda>
 8006b3c:	910c      	str	r1, [sp, #48]	@ 0x30
 8006b3e:	2e00      	cmp	r6, #0
 8006b40:	d0af      	beq.n	8006aa2 <forward_dense_integer_SSSA_ch+0x102>
 8006b42:	f8de 3004 	ldr.w	r3, [lr, #4]
 8006b46:	f993 3000 	ldrsb.w	r3, [r3]
 8006b4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b4c:	e7aa      	b.n	8006aa4 <forward_dense_integer_SSSA_ch+0x104>
 8006b4e:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8006c50 <forward_dense_integer_SSSA_ch+0x2b0>
 8006b52:	f1bc 0f00 	cmp.w	ip, #0
 8006b56:	f47f af7d 	bne.w	8006a54 <forward_dense_integer_SSSA_ch+0xb4>
 8006b5a:	68ad      	ldr	r5, [r5, #8]
 8006b5c:	68a4      	ldr	r4, [r4, #8]
 8006b5e:	6897      	ldr	r7, [r2, #8]
 8006b60:	2e00      	cmp	r6, #0
 8006b62:	d158      	bne.n	8006c16 <forward_dense_integer_SSSA_ch+0x276>
 8006b64:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8006c50 <forward_dense_integer_SSSA_ch+0x2b0>
 8006b68:	960c      	str	r6, [sp, #48]	@ 0x30
 8006b6a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006b6c:	e79a      	b.n	8006aa4 <forward_dense_integer_SSSA_ch+0x104>
 8006b6e:	f1bc 0f00 	cmp.w	ip, #0
 8006b72:	d021      	beq.n	8006bb8 <forward_dense_integer_SSSA_ch+0x218>
 8006b74:	f8dc e004 	ldr.w	lr, [ip, #4]
 8006b78:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8006c50 <forward_dense_integer_SSSA_ch+0x2b0>
 8006b7c:	f1be 0f00 	cmp.w	lr, #0
 8006b80:	f47f af6e 	bne.w	8006a60 <forward_dense_integer_SSSA_ch+0xc0>
 8006b84:	68ad      	ldr	r5, [r5, #8]
 8006b86:	68a4      	ldr	r4, [r4, #8]
 8006b88:	6897      	ldr	r7, [r2, #8]
 8006b8a:	b179      	cbz	r1, 8006bac <forward_dense_integer_SSSA_ch+0x20c>
 8006b8c:	885b      	ldrh	r3, [r3, #2]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d14a      	bne.n	8006c28 <forward_dense_integer_SSSA_ch+0x288>
 8006b92:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8006c50 <forward_dense_integer_SSSA_ch+0x2b0>
 8006b96:	2300      	movs	r3, #0
 8006b98:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b9a:	f1be 0f00 	cmp.w	lr, #0
 8006b9e:	f47f af7c 	bne.w	8006a9a <forward_dense_integer_SSSA_ch+0xfa>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ba6:	e77d      	b.n	8006aa4 <forward_dense_integer_SSSA_ch+0x104>
 8006ba8:	4629      	mov	r1, r5
 8006baa:	e718      	b.n	80069de <forward_dense_integer_SSSA_ch+0x3e>
 8006bac:	460b      	mov	r3, r1
 8006bae:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8006c50 <forward_dense_integer_SSSA_ch+0x2b0>
 8006bb2:	930c      	str	r3, [sp, #48]	@ 0x30
 8006bb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bb6:	e775      	b.n	8006aa4 <forward_dense_integer_SSSA_ch+0x104>
 8006bb8:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8006c50 <forward_dense_integer_SSSA_ch+0x2b0>
 8006bbc:	4663      	mov	r3, ip
 8006bbe:	eef0 0a40 	vmov.f32	s1, s0
 8006bc2:	68ad      	ldr	r5, [r5, #8]
 8006bc4:	68a4      	ldr	r4, [r4, #8]
 8006bc6:	6897      	ldr	r7, [r2, #8]
 8006bc8:	930c      	str	r3, [sp, #48]	@ 0x30
 8006bca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bcc:	e76a      	b.n	8006aa4 <forward_dense_integer_SSSA_ch+0x104>
 8006bce:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8006c50 <forward_dense_integer_SSSA_ch+0x2b0>
 8006bd2:	4673      	mov	r3, lr
 8006bd4:	e7f3      	b.n	8006bbe <forward_dense_integer_SSSA_ch+0x21e>
 8006bd6:	6880      	ldr	r0, [r0, #8]
 8006bd8:	68dc      	ldr	r4, [r3, #12]
 8006bda:	900d      	str	r0, [sp, #52]	@ 0x34
 8006bdc:	68d0      	ldr	r0, [r2, #12]
 8006bde:	6866      	ldr	r6, [r4, #4]
 8006be0:	6995      	ldr	r5, [r2, #24]
 8006be2:	fa1f fa86 	uxth.w	sl, r6
 8006be6:	9609      	str	r6, [sp, #36]	@ 0x24
 8006be8:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 8006bec:	68c0      	ldr	r0, [r0, #12]
 8006bee:	fa1f fb89 	uxth.w	fp, r9
 8006bf2:	fb00 f004 	mul.w	r0, r0, r4
 8006bf6:	699c      	ldr	r4, [r3, #24]
 8006bf8:	9008      	str	r0, [sp, #32]
 8006bfa:	e715      	b.n	8006a28 <forward_dense_integer_SSSA_ch+0x88>
 8006bfc:	2500      	movs	r5, #0
 8006bfe:	e6ee      	b.n	80069de <forward_dense_integer_SSSA_ch+0x3e>
 8006c00:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c02:	f8de 3000 	ldr.w	r3, [lr]
 8006c06:	68ad      	ldr	r5, [r5, #8]
 8006c08:	68a4      	ldr	r4, [r4, #8]
 8006c0a:	6897      	ldr	r7, [r2, #8]
 8006c0c:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8006c50 <forward_dense_integer_SSSA_ch+0x2b0>
 8006c10:	edd3 0a00 	vldr	s1, [r3]
 8006c14:	e795      	b.n	8006b42 <forward_dense_integer_SSSA_ch+0x1a2>
 8006c16:	684b      	ldr	r3, [r1, #4]
 8006c18:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8006c50 <forward_dense_integer_SSSA_ch+0x2b0>
 8006c1c:	f993 3000 	ldrsb.w	r3, [r3]
 8006c20:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8006c24:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c26:	e73d      	b.n	8006aa4 <forward_dense_integer_SSSA_ch+0x104>
 8006c28:	684b      	ldr	r3, [r1, #4]
 8006c2a:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8006c50 <forward_dense_integer_SSSA_ch+0x2b0>
 8006c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8006c32:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c34:	e7b5      	b.n	8006ba2 <forward_dense_integer_SSSA_ch+0x202>
 8006c36:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8006c3a:	e733      	b.n	8006aa4 <forward_dense_integer_SSSA_ch+0x104>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	deff      	udf	#255	@ 0xff
 8006c42:	2300      	movs	r3, #0
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	deff      	udf	#255	@ 0xff
 8006c48:	2300      	movs	r3, #0
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	deff      	udf	#255	@ 0xff
 8006c4e:	bf00      	nop
 8006c50:	00000000 	.word	0x00000000

08006c54 <align_factor_ch>:
 8006c54:	b361      	cbz	r1, 8006cb0 <align_factor_ch+0x5c>
 8006c56:	ee80 7a20 	vdiv.f32	s14, s0, s1
 8006c5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006c5e:	b570      	push	{r4, r5, r6, lr}
 8006c60:	1e9d      	subs	r5, r3, #2
 8006c62:	1f14      	subs	r4, r2, #4
 8006c64:	2600      	movs	r6, #0
 8006c66:	ecf0 7a01 	vldmia	r0!, {s15}
 8006c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6e:	ee17 ea90 	vmov	lr, s15
 8006c72:	f3ce 52c7 	ubfx	r2, lr, #23, #8
 8006c76:	f3ce 0c16 	ubfx	ip, lr, #0, #23
 8006c7a:	f1be 0f00 	cmp.w	lr, #0
 8006c7e:	f50c 0c00 	add.w	ip, ip, #8388608	@ 0x800000
 8006c82:	f1c2 027e 	rsb	r2, r2, #126	@ 0x7e
 8006c86:	bfb8      	it	lt
 8006c88:	f1cc 0c00 	rsblt	ip, ip, #0
 8006c8c:	2a1f      	cmp	r2, #31
 8006c8e:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 8006c92:	dc06      	bgt.n	8006ca2 <align_factor_ch+0x4e>
 8006c94:	4281      	cmp	r1, r0
 8006c96:	f825 2f02 	strh.w	r2, [r5, #2]!
 8006c9a:	f844 3f04 	str.w	r3, [r4, #4]!
 8006c9e:	d1e2      	bne.n	8006c66 <align_factor_ch+0x12>
 8006ca0:	bd70      	pop	{r4, r5, r6, pc}
 8006ca2:	4281      	cmp	r1, r0
 8006ca4:	f825 6f02 	strh.w	r6, [r5, #2]!
 8006ca8:	f844 6f04 	str.w	r6, [r4, #4]!
 8006cac:	d1db      	bne.n	8006c66 <align_factor_ch+0x12>
 8006cae:	bd70      	pop	{r4, r5, r6, pc}
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop

08006cb4 <st_sssa8_ch_fully_connected>:
 8006cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb8:	b097      	sub	sp, #92	@ 0x5c
 8006cba:	468a      	mov	sl, r1
 8006cbc:	4693      	mov	fp, r2
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006cc2:	9314      	str	r3, [sp, #80]	@ 0x50
 8006cc4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006cc8:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8006ccc:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8006cce:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8006cd2:	f99d e088 	ldrsb.w	lr, [sp, #136]	@ 0x88
 8006cd6:	9512      	str	r5, [sp, #72]	@ 0x48
 8006cd8:	930d      	str	r3, [sp, #52]	@ 0x34
 8006cda:	f99d 308c 	ldrsb.w	r3, [sp, #140]	@ 0x8c
 8006cde:	2900      	cmp	r1, #0
 8006ce0:	f000 827b 	beq.w	80071da <st_sssa8_ch_fully_connected+0x526>
 8006ce4:	463c      	mov	r4, r7
 8006ce6:	3504      	adds	r5, #4
 8006ce8:	ea4f 0841 	mov.w	r8, r1, lsl #1
 8006cec:	f04f 0c01 	mov.w	ip, #1
 8006cf0:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 8006cf4:	f934 2b02 	ldrsh.w	r2, [r4], #2
 8006cf8:	1e51      	subs	r1, r2, #1
 8006cfa:	fa0c f602 	lsl.w	r6, ip, r2
 8006cfe:	fa03 f202 	lsl.w	r2, r3, r2
 8006d02:	b289      	uxth	r1, r1
 8006d04:	eb02 0256 	add.w	r2, r2, r6, lsr #1
 8006d08:	2914      	cmp	r1, #20
 8006d0a:	f200 81e8 	bhi.w	80070de <st_sssa8_ch_fully_connected+0x42a>
 8006d0e:	42bc      	cmp	r4, r7
 8006d10:	f845 2c04 	str.w	r2, [r5, #-4]
 8006d14:	f105 0504 	add.w	r5, r5, #4
 8006d18:	d1ec      	bne.n	8006cf4 <st_sssa8_ch_fully_connected+0x40>
 8006d1a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006d1c:	fa1f f38e 	uxth.w	r3, lr
 8006d20:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8006d22:	eba7 0508 	sub.w	r5, r7, r8
 8006d26:	0852      	lsrs	r2, r2, #1
 8006d28:	f8cd e000 	str.w	lr, [sp]
 8006d2c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8006d30:	4631      	mov	r1, r6
 8006d32:	4614      	mov	r4, r2
 8006d34:	9215      	str	r2, [sp, #84]	@ 0x54
 8006d36:	465a      	mov	r2, fp
 8006d38:	9513      	str	r5, [sp, #76]	@ 0x4c
 8006d3a:	f000 fadb 	bl	80072f4 <st_int8_reordered_no_shift_zero>
 8006d3e:	2c00      	cmp	r4, #0
 8006d40:	f000 8179 	beq.w	8007036 <st_sssa8_ch_fully_connected+0x382>
 8006d44:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8006d46:	1e62      	subs	r2, r4, #1
 8006d48:	f1ab 0310 	sub.w	r3, fp, #16
 8006d4c:	46d9      	mov	r9, fp
 8006d4e:	b292      	uxth	r2, r2
 8006d50:	f100 0110 	add.w	r1, r0, #16
 8006d54:	091b      	lsrs	r3, r3, #4
 8006d56:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d5e:	f1ab 0203 	sub.w	r2, fp, #3
 8006d62:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006d64:	4602      	mov	r2, r0
 8006d66:	3208      	adds	r2, #8
 8006d68:	9208      	str	r2, [sp, #32]
 8006d6a:	1d2a      	adds	r2, r5, #4
 8006d6c:	9207      	str	r2, [sp, #28]
 8006d6e:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8006d70:	3202      	adds	r2, #2
 8006d72:	9204      	str	r2, [sp, #16]
 8006d74:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d76:	3204      	adds	r2, #4
 8006d78:	9205      	str	r2, [sp, #20]
 8006d7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006d7c:	3204      	adds	r2, #4
 8006d7e:	9206      	str	r2, [sp, #24]
 8006d80:	011a      	lsls	r2, r3, #4
 8006d82:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 8006d86:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d88:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d8a:	f1ab 0304 	sub.w	r3, fp, #4
 8006d8e:	9311      	str	r3, [sp, #68]	@ 0x44
 8006d90:	9b08      	ldr	r3, [sp, #32]
 8006d92:	f1b9 0f0f 	cmp.w	r9, #15
 8006d96:	eb0a 0b09 	add.w	fp, sl, r9
 8006d9a:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 8006d9e:	f340 81ef 	ble.w	8007180 <st_sssa8_ch_fully_connected+0x4cc>
 8006da2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006da4:	465c      	mov	r4, fp
 8006da6:	eb0a 0502 	add.w	r5, sl, r2
 8006daa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006dac:	f8da 6000 	ldr.w	r6, [sl]
 8006db0:	6820      	ldr	r0, [r4, #0]
 8006db2:	ea4f 2736 	mov.w	r7, r6, ror #8
 8006db6:	f8d2 e000 	ldr.w	lr, [r2]
 8006dba:	ea4f 2c30 	mov.w	ip, r0, ror #8
 8006dbe:	fa2f f787 	sxtb16	r7, r7
 8006dc2:	fa2f f686 	sxtb16	r6, r6
 8006dc6:	fa2f fc8c 	sxtb16	ip, ip
 8006dca:	fa2f f080 	sxtb16	r0, r0
 8006dce:	fb2e 1106 	smlad	r1, lr, r6, r1
 8006dd2:	fb2e 3300 	smlad	r3, lr, r0, r3
 8006dd6:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8006dda:	fb2e 1707 	smlad	r7, lr, r7, r1
 8006dde:	fb2e 3e0c 	smlad	lr, lr, ip, r3
 8006de2:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006de6:	6860      	ldr	r0, [r4, #4]
 8006de8:	ea4f 2631 	mov.w	r6, r1, ror #8
 8006dec:	6893      	ldr	r3, [r2, #8]
 8006dee:	ea4f 2c30 	mov.w	ip, r0, ror #8
 8006df2:	fa2f f686 	sxtb16	r6, r6
 8006df6:	fa2f f181 	sxtb16	r1, r1
 8006dfa:	fa2f fc8c 	sxtb16	ip, ip
 8006dfe:	fa2f f080 	sxtb16	r0, r0
 8006e02:	fb23 7101 	smlad	r1, r3, r1, r7
 8006e06:	fb23 e300 	smlad	r3, r3, r0, lr
 8006e0a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8006e0e:	fb2e 1606 	smlad	r6, lr, r6, r1
 8006e12:	fb2e 3e0c 	smlad	lr, lr, ip, r3
 8006e16:	f8da 0008 	ldr.w	r0, [sl, #8]
 8006e1a:	68a1      	ldr	r1, [r4, #8]
 8006e1c:	ea4f 2c30 	mov.w	ip, r0, ror #8
 8006e20:	6913      	ldr	r3, [r2, #16]
 8006e22:	ea4f 2731 	mov.w	r7, r1, ror #8
 8006e26:	fa2f fc8c 	sxtb16	ip, ip
 8006e2a:	fa2f f080 	sxtb16	r0, r0
 8006e2e:	fa2f f787 	sxtb16	r7, r7
 8006e32:	fa2f f181 	sxtb16	r1, r1
 8006e36:	fb23 6000 	smlad	r0, r3, r0, r6
 8006e3a:	fb23 e301 	smlad	r3, r3, r1, lr
 8006e3e:	6951      	ldr	r1, [r2, #20]
 8006e40:	fb21 000c 	smlad	r0, r1, ip, r0
 8006e44:	fb21 3c07 	smlad	ip, r1, r7, r3
 8006e48:	f8da 100c 	ldr.w	r1, [sl, #12]
 8006e4c:	3410      	adds	r4, #16
 8006e4e:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8006e52:	f10a 0a10 	add.w	sl, sl, #16
 8006e56:	ea4f 2731 	mov.w	r7, r1, ror #8
 8006e5a:	6993      	ldr	r3, [r2, #24]
 8006e5c:	ea4f 263e 	mov.w	r6, lr, ror #8
 8006e60:	fa2f f787 	sxtb16	r7, r7
 8006e64:	fa2f f181 	sxtb16	r1, r1
 8006e68:	fa2f fe8e 	sxtb16	lr, lr
 8006e6c:	fa2f f686 	sxtb16	r6, r6
 8006e70:	fb23 0101 	smlad	r1, r3, r1, r0
 8006e74:	fb23 c00e 	smlad	r0, r3, lr, ip
 8006e78:	69d3      	ldr	r3, [r2, #28]
 8006e7a:	3220      	adds	r2, #32
 8006e7c:	fb23 1107 	smlad	r1, r3, r7, r1
 8006e80:	fb23 0306 	smlad	r3, r3, r6, r0
 8006e84:	4555      	cmp	r5, sl
 8006e86:	d191      	bne.n	8006dac <st_sssa8_ch_fully_connected+0xf8>
 8006e88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e8a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006e8c:	4493      	add	fp, r2
 8006e8e:	4690      	mov	r8, r2
 8006e90:	9003      	str	r0, [sp, #12]
 8006e92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006e94:	4542      	cmp	r2, r8
 8006e96:	f340 8171 	ble.w	800717c <st_sssa8_ch_fully_connected+0x4c8>
 8006e9a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006e9c:	46dc      	mov	ip, fp
 8006e9e:	9d03      	ldr	r5, [sp, #12]
 8006ea0:	eba2 0208 	sub.w	r2, r2, r8
 8006ea4:	0892      	lsrs	r2, r2, #2
 8006ea6:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ea8:	3201      	adds	r2, #1
 8006eaa:	0090      	lsls	r0, r2, #2
 8006eac:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006eae:	eb0a 0e82 	add.w	lr, sl, r2, lsl #2
 8006eb2:	900a      	str	r0, [sp, #40]	@ 0x28
 8006eb4:	f85a 7b04 	ldr.w	r7, [sl], #4
 8006eb8:	f85c 0b04 	ldr.w	r0, [ip], #4
 8006ebc:	ea4f 2637 	mov.w	r6, r7, ror #8
 8006ec0:	682a      	ldr	r2, [r5, #0]
 8006ec2:	ea4f 2430 	mov.w	r4, r0, ror #8
 8006ec6:	fa2f f686 	sxtb16	r6, r6
 8006eca:	fa2f f787 	sxtb16	r7, r7
 8006ece:	fa2f f484 	sxtb16	r4, r4
 8006ed2:	fa2f f080 	sxtb16	r0, r0
 8006ed6:	fb22 1107 	smlad	r1, r2, r7, r1
 8006eda:	fb22 3200 	smlad	r2, r2, r0, r3
 8006ede:	686b      	ldr	r3, [r5, #4]
 8006ee0:	3508      	adds	r5, #8
 8006ee2:	fb23 1106 	smlad	r1, r3, r6, r1
 8006ee6:	fb23 2304 	smlad	r3, r3, r4, r2
 8006eea:	45d6      	cmp	lr, sl
 8006eec:	d1e2      	bne.n	8006eb4 <st_sssa8_ch_fully_connected+0x200>
 8006eee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ef0:	f108 0804 	add.w	r8, r8, #4
 8006ef4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006ef6:	4493      	add	fp, r2
 8006ef8:	9a03      	ldr	r2, [sp, #12]
 8006efa:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006efe:	9203      	str	r2, [sp, #12]
 8006f00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f02:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 8006f06:	45c1      	cmp	r9, r8
 8006f08:	dd37      	ble.n	8006f7a <st_sssa8_ch_fully_connected+0x2c6>
 8006f0a:	9c03      	ldr	r4, [sp, #12]
 8006f0c:	f99e 0000 	ldrsb.w	r0, [lr]
 8006f10:	f9b4 2000 	ldrsh.w	r2, [r4]
 8006f14:	fb12 1100 	smlabb	r1, r2, r0, r1
 8006f18:	f99b 0000 	ldrsb.w	r0, [fp]
 8006f1c:	fb12 3300 	smlabb	r3, r2, r0, r3
 8006f20:	f108 0201 	add.w	r2, r8, #1
 8006f24:	454a      	cmp	r2, r9
 8006f26:	da25      	bge.n	8006f74 <st_sssa8_ch_fully_connected+0x2c0>
 8006f28:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8006f2c:	f99e 0001 	ldrsb.w	r0, [lr, #1]
 8006f30:	fb12 1100 	smlabb	r1, r2, r0, r1
 8006f34:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 8006f38:	fb12 3300 	smlabb	r3, r2, r0, r3
 8006f3c:	f108 0202 	add.w	r2, r8, #2
 8006f40:	4591      	cmp	r9, r2
 8006f42:	dd17      	ble.n	8006f74 <st_sssa8_ch_fully_connected+0x2c0>
 8006f44:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8006f48:	f99e 0002 	ldrsb.w	r0, [lr, #2]
 8006f4c:	fb12 1100 	smlabb	r1, r2, r0, r1
 8006f50:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 8006f54:	fb12 3300 	smlabb	r3, r2, r0, r3
 8006f58:	f108 0203 	add.w	r2, r8, #3
 8006f5c:	4591      	cmp	r9, r2
 8006f5e:	dd09      	ble.n	8006f74 <st_sssa8_ch_fully_connected+0x2c0>
 8006f60:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8006f64:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 8006f68:	fb12 3300 	smlabb	r3, r2, r0, r3
 8006f6c:	f99e 0003 	ldrsb.w	r0, [lr, #3]
 8006f70:	fb12 1100 	smlabb	r1, r2, r0, r1
 8006f74:	eba9 0808 	sub.w	r8, r9, r8
 8006f78:	44c6      	add	lr, r8
 8006f7a:	9d07      	ldr	r5, [sp, #28]
 8006f7c:	f935 0c04 	ldrsh.w	r0, [r5, #-4]
 8006f80:	2815      	cmp	r0, #21
 8006f82:	f340 80c2 	ble.w	800710a <st_sssa8_ch_fully_connected+0x456>
 8006f86:	1e84      	subs	r4, r0, #2
 8006f88:	2201      	movs	r2, #1
 8006f8a:	3801      	subs	r0, #1
 8006f8c:	fa02 f404 	lsl.w	r4, r2, r4
 8006f90:	9a05      	ldr	r2, [sp, #20]
 8006f92:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8006f96:	fb51 4202 	smmla	r2, r1, r2, r4
 8006f9a:	9906      	ldr	r1, [sp, #24]
 8006f9c:	4102      	asrs	r2, r0
 8006f9e:	1eac      	subs	r4, r5, #2
 8006fa0:	f851 1c04 	ldr.w	r1, [r1, #-4]
 8006fa4:	440a      	add	r2, r1
 8006fa6:	f302 0207 	ssat	r2, #8, r2
 8006faa:	9904      	ldr	r1, [sp, #16]
 8006fac:	b252      	sxtb	r2, r2
 8006fae:	1e48      	subs	r0, r1, #1
 8006fb0:	f801 2c02 	strb.w	r2, [r1, #-2]
 8006fb4:	f9b4 4000 	ldrsh.w	r4, [r4]
 8006fb8:	2c15      	cmp	r4, #21
 8006fba:	f340 8098 	ble.w	80070ee <st_sssa8_ch_fully_connected+0x43a>
 8006fbe:	1ea1      	subs	r1, r4, #2
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	3c01      	subs	r4, #1
 8006fc4:	fa02 f101 	lsl.w	r1, r2, r1
 8006fc8:	9a05      	ldr	r2, [sp, #20]
 8006fca:	6812      	ldr	r2, [r2, #0]
 8006fcc:	fb53 1302 	smmla	r3, r3, r2, r1
 8006fd0:	9a06      	ldr	r2, [sp, #24]
 8006fd2:	4123      	asrs	r3, r4
 8006fd4:	6812      	ldr	r2, [r2, #0]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f303 0307 	ssat	r3, #8, r3
 8006fdc:	b25b      	sxtb	r3, r3
 8006fde:	9a07      	ldr	r2, [sp, #28]
 8006fe0:	eb0e 0a09 	add.w	sl, lr, r9
 8006fe4:	7003      	strb	r3, [r0, #0]
 8006fe6:	3204      	adds	r2, #4
 8006fe8:	9b08      	ldr	r3, [sp, #32]
 8006fea:	9207      	str	r2, [sp, #28]
 8006fec:	3308      	adds	r3, #8
 8006fee:	9a04      	ldr	r2, [sp, #16]
 8006ff0:	9308      	str	r3, [sp, #32]
 8006ff2:	3202      	adds	r2, #2
 8006ff4:	9204      	str	r2, [sp, #16]
 8006ff6:	9a05      	ldr	r2, [sp, #20]
 8006ff8:	3208      	adds	r2, #8
 8006ffa:	9205      	str	r2, [sp, #20]
 8006ffc:	9a06      	ldr	r2, [sp, #24]
 8006ffe:	3208      	adds	r2, #8
 8007000:	9206      	str	r2, [sp, #24]
 8007002:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007004:	429a      	cmp	r2, r3
 8007006:	f47f aec3 	bne.w	8006d90 <st_sssa8_ch_fully_connected+0xdc>
 800700a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800700c:	46cb      	mov	fp, r9
 800700e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007010:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007014:	9220      	str	r2, [sp, #128]	@ 0x80
 8007016:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007018:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800701c:	9213      	str	r2, [sp, #76]	@ 0x4c
 800701e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007020:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007024:	9224      	str	r2, [sp, #144]	@ 0x90
 8007026:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8007028:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800702c:	9225      	str	r2, [sp, #148]	@ 0x94
 800702e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007030:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007034:	9312      	str	r3, [sp, #72]	@ 0x48
 8007036:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007038:	07db      	lsls	r3, r3, #31
 800703a:	d54c      	bpl.n	80070d6 <st_sssa8_ch_fully_connected+0x422>
 800703c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800703e:	ea5f 079b 	movs.w	r7, fp, lsr #2
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f000 80c7 	beq.w	80071d6 <st_sssa8_ch_fully_connected+0x522>
 8007048:	eb0a 0687 	add.w	r6, sl, r7, lsl #2
 800704c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800704e:	f85a 2b04 	ldr.w	r2, [sl], #4
 8007052:	3008      	adds	r0, #8
 8007054:	f850 5c08 	ldr.w	r5, [r0, #-8]
 8007058:	ea4f 2132 	mov.w	r1, r2, ror #8
 800705c:	f850 4c04 	ldr.w	r4, [r0, #-4]
 8007060:	fa2f f282 	sxtb16	r2, r2
 8007064:	fa2f f181 	sxtb16	r1, r1
 8007068:	fb25 3302 	smlad	r3, r5, r2, r3
 800706c:	fb24 3301 	smlad	r3, r4, r1, r3
 8007070:	45b2      	cmp	sl, r6
 8007072:	d1ec      	bne.n	800704e <st_sssa8_ch_fully_connected+0x39a>
 8007074:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007076:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800707a:	920d      	str	r2, [sp, #52]	@ 0x34
 800707c:	f01b 0203 	ands.w	r2, fp, #3
 8007080:	d014      	beq.n	80070ac <st_sssa8_ch_fully_connected+0x3f8>
 8007082:	3a01      	subs	r2, #1
 8007084:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8007086:	f996 1000 	ldrsb.w	r1, [r6]
 800708a:	8820      	ldrh	r0, [r4, #0]
 800708c:	b292      	uxth	r2, r2
 800708e:	fb10 3301 	smlabb	r3, r0, r1, r3
 8007092:	b15a      	cbz	r2, 80070ac <st_sssa8_ch_fully_connected+0x3f8>
 8007094:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8007098:	2a01      	cmp	r2, #1
 800709a:	8860      	ldrh	r0, [r4, #2]
 800709c:	fb10 3301 	smlabb	r3, r0, r1, r3
 80070a0:	d004      	beq.n	80070ac <st_sssa8_ch_fully_connected+0x3f8>
 80070a2:	f996 2002 	ldrsb.w	r2, [r6, #2]
 80070a6:	88a1      	ldrh	r1, [r4, #4]
 80070a8:	fb11 3302 	smlabb	r3, r1, r2, r3
 80070ac:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80070ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80070b2:	2a15      	cmp	r2, #21
 80070b4:	dd69      	ble.n	800718a <st_sssa8_ch_fully_connected+0x4d6>
 80070b6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80070b8:	1e95      	subs	r5, r2, #2
 80070ba:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80070bc:	3a01      	subs	r2, #1
 80070be:	6804      	ldr	r4, [r0, #0]
 80070c0:	2001      	movs	r0, #1
 80070c2:	6809      	ldr	r1, [r1, #0]
 80070c4:	40a8      	lsls	r0, r5
 80070c6:	fb53 0301 	smmla	r3, r3, r1, r0
 80070ca:	4113      	asrs	r3, r2
 80070cc:	4423      	add	r3, r4
 80070ce:	f303 0307 	ssat	r3, #8, r3
 80070d2:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80070d4:	7013      	strb	r3, [r2, #0]
 80070d6:	2000      	movs	r0, #0
 80070d8:	b017      	add	sp, #92	@ 0x5c
 80070da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070de:	42bc      	cmp	r4, r7
 80070e0:	f845 3c04 	str.w	r3, [r5, #-4]
 80070e4:	f105 0504 	add.w	r5, r5, #4
 80070e8:	f47f ae04 	bne.w	8006cf4 <st_sssa8_ch_fully_connected+0x40>
 80070ec:	e615      	b.n	8006d1a <st_sssa8_ch_fully_connected+0x66>
 80070ee:	2c00      	cmp	r4, #0
 80070f0:	dd1f      	ble.n	8007132 <st_sssa8_ch_fully_connected+0x47e>
 80070f2:	9a05      	ldr	r2, [sp, #20]
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	9906      	ldr	r1, [sp, #24]
 80070f8:	6812      	ldr	r2, [r2, #0]
 80070fa:	6809      	ldr	r1, [r1, #0]
 80070fc:	fb53 1302 	smmla	r3, r3, r2, r1
 8007100:	4123      	asrs	r3, r4
 8007102:	f303 0307 	ssat	r3, #8, r3
 8007106:	b25b      	sxtb	r3, r3
 8007108:	e769      	b.n	8006fde <st_sssa8_ch_fully_connected+0x32a>
 800710a:	2800      	cmp	r0, #0
 800710c:	dd21      	ble.n	8007152 <st_sssa8_ch_fully_connected+0x49e>
 800710e:	462c      	mov	r4, r5
 8007110:	9a05      	ldr	r2, [sp, #20]
 8007112:	004d      	lsls	r5, r1, #1
 8007114:	9906      	ldr	r1, [sp, #24]
 8007116:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800711a:	3c02      	subs	r4, #2
 800711c:	f851 1c04 	ldr.w	r1, [r1, #-4]
 8007120:	fb55 1502 	smmla	r5, r5, r2, r1
 8007124:	4105      	asrs	r5, r0
 8007126:	f305 0207 	ssat	r2, #8, r5
 800712a:	9904      	ldr	r1, [sp, #16]
 800712c:	b252      	sxtb	r2, r2
 800712e:	1e48      	subs	r0, r1, #1
 8007130:	e73e      	b.n	8006fb0 <st_sssa8_ch_fully_connected+0x2fc>
 8007132:	f1c4 0401 	rsb	r4, r4, #1
 8007136:	40a3      	lsls	r3, r4
 8007138:	f303 031f 	ssat	r3, #32, r3
 800713c:	9a05      	ldr	r2, [sp, #20]
 800713e:	6812      	ldr	r2, [r2, #0]
 8007140:	fb53 f212 	smmulr	r2, r3, r2
 8007144:	9b06      	ldr	r3, [sp, #24]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4413      	add	r3, r2
 800714a:	f303 0307 	ssat	r3, #8, r3
 800714e:	b25b      	sxtb	r3, r3
 8007150:	e745      	b.n	8006fde <st_sssa8_ch_fully_connected+0x32a>
 8007152:	f1c0 0001 	rsb	r0, r0, #1
 8007156:	1eac      	subs	r4, r5, #2
 8007158:	4081      	lsls	r1, r0
 800715a:	f301 011f 	ssat	r1, #32, r1
 800715e:	9a05      	ldr	r2, [sp, #20]
 8007160:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8007164:	fb51 f212 	smmulr	r2, r1, r2
 8007168:	9906      	ldr	r1, [sp, #24]
 800716a:	f851 1c04 	ldr.w	r1, [r1, #-4]
 800716e:	440a      	add	r2, r1
 8007170:	f302 0207 	ssat	r2, #8, r2
 8007174:	9904      	ldr	r1, [sp, #16]
 8007176:	b252      	sxtb	r2, r2
 8007178:	1e48      	subs	r0, r1, #1
 800717a:	e719      	b.n	8006fb0 <st_sssa8_ch_fully_connected+0x2fc>
 800717c:	46d6      	mov	lr, sl
 800717e:	e6c2      	b.n	8006f06 <st_sssa8_ch_fully_connected+0x252>
 8007180:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	9203      	str	r2, [sp, #12]
 8007188:	e683      	b.n	8006e92 <st_sssa8_ch_fully_connected+0x1de>
 800718a:	2a00      	cmp	r2, #0
 800718c:	dd0f      	ble.n	80071ae <st_sssa8_ch_fully_connected+0x4fa>
 800718e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007194:	6809      	ldr	r1, [r1, #0]
 8007196:	6800      	ldr	r0, [r0, #0]
 8007198:	fb53 0301 	smmla	r3, r3, r1, r0
 800719c:	4113      	asrs	r3, r2
 800719e:	f303 0307 	ssat	r3, #8, r3
 80071a2:	2000      	movs	r0, #0
 80071a4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80071a6:	7013      	strb	r3, [r2, #0]
 80071a8:	b017      	add	sp, #92	@ 0x5c
 80071aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ae:	f1c2 0201 	rsb	r2, r2, #1
 80071b2:	4093      	lsls	r3, r2
 80071b4:	f303 031f 	ssat	r3, #32, r3
 80071b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80071ba:	6812      	ldr	r2, [r2, #0]
 80071bc:	fb53 f312 	smmulr	r3, r3, r2
 80071c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80071c2:	6812      	ldr	r2, [r2, #0]
 80071c4:	4413      	add	r3, r2
 80071c6:	f303 0307 	ssat	r3, #8, r3
 80071ca:	2000      	movs	r0, #0
 80071cc:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80071ce:	7013      	strb	r3, [r2, #0]
 80071d0:	b017      	add	sp, #92	@ 0x5c
 80071d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d6:	4656      	mov	r6, sl
 80071d8:	e750      	b.n	800707c <st_sssa8_ch_fully_connected+0x3c8>
 80071da:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 80071de:	9212      	str	r2, [sp, #72]	@ 0x48
 80071e0:	e59b      	b.n	8006d1a <st_sssa8_ch_fully_connected+0x66>
 80071e2:	bf00      	nop

080071e4 <st_int8_copy>:
 80071e4:	4288      	cmp	r0, r1
 80071e6:	d010      	beq.n	800720a <st_int8_copy+0x26>
 80071e8:	b17a      	cbz	r2, 800720a <st_int8_copy+0x26>
 80071ea:	4288      	cmp	r0, r1
 80071ec:	eb00 0302 	add.w	r3, r0, r2
 80071f0:	d20c      	bcs.n	800720c <st_int8_copy+0x28>
 80071f2:	428b      	cmp	r3, r1
 80071f4:	d90a      	bls.n	800720c <st_int8_copy+0x28>
 80071f6:	4283      	cmp	r3, r0
 80071f8:	440a      	add	r2, r1
 80071fa:	d906      	bls.n	800720a <st_int8_copy+0x26>
 80071fc:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8007200:	4283      	cmp	r3, r0
 8007202:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8007206:	d1f9      	bne.n	80071fc <st_int8_copy+0x18>
 8007208:	4770      	bx	lr
 800720a:	4770      	bx	lr
 800720c:	078b      	lsls	r3, r1, #30
 800720e:	d102      	bne.n	8007216 <st_int8_copy+0x32>
 8007210:	e008      	b.n	8007224 <st_int8_copy+0x40>
 8007212:	2a00      	cmp	r2, #0
 8007214:	d04c      	beq.n	80072b0 <st_int8_copy+0xcc>
 8007216:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800721a:	3a01      	subs	r2, #1
 800721c:	f801 3b01 	strb.w	r3, [r1], #1
 8007220:	078b      	lsls	r3, r1, #30
 8007222:	d1f6      	bne.n	8007212 <st_int8_copy+0x2e>
 8007224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007228:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800722c:	d05d      	beq.n	80072ea <st_int8_copy+0x106>
 800722e:	ea41 0300 	orr.w	r3, r1, r0
 8007232:	075b      	lsls	r3, r3, #29
 8007234:	d13d      	bne.n	80072b2 <st_int8_copy+0xce>
 8007236:	f1be 0f01 	cmp.w	lr, #1
 800723a:	d03a      	beq.n	80072b2 <st_int8_copy+0xce>
 800723c:	f100 0310 	add.w	r3, r0, #16
 8007240:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8007244:	f101 0c10 	add.w	ip, r1, #16
 8007248:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800724c:	3310      	adds	r3, #16
 800724e:	f10c 0c10 	add.w	ip, ip, #16
 8007252:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 8007256:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 800725a:	4573      	cmp	r3, lr
 800725c:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 8007260:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 8007264:	d1f2      	bne.n	800724c <st_int8_copy+0x68>
 8007266:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800726a:	4421      	add	r1, r4
 800726c:	4420      	add	r0, r4
 800726e:	f002 0203 	and.w	r2, r2, #3
 8007272:	b16b      	cbz	r3, 8007290 <st_int8_copy+0xac>
 8007274:	6804      	ldr	r4, [r0, #0]
 8007276:	600c      	str	r4, [r1, #0]
 8007278:	1e5c      	subs	r4, r3, #1
 800727a:	d005      	beq.n	8007288 <st_int8_copy+0xa4>
 800727c:	6845      	ldr	r5, [r0, #4]
 800727e:	2c01      	cmp	r4, #1
 8007280:	604d      	str	r5, [r1, #4]
 8007282:	d001      	beq.n	8007288 <st_int8_copy+0xa4>
 8007284:	6884      	ldr	r4, [r0, #8]
 8007286:	608c      	str	r4, [r1, #8]
 8007288:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800728c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007290:	b162      	cbz	r2, 80072ac <st_int8_copy+0xc8>
 8007292:	f990 3000 	ldrsb.w	r3, [r0]
 8007296:	3a01      	subs	r2, #1
 8007298:	700b      	strb	r3, [r1, #0]
 800729a:	d007      	beq.n	80072ac <st_int8_copy+0xc8>
 800729c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80072a0:	2a01      	cmp	r2, #1
 80072a2:	704b      	strb	r3, [r1, #1]
 80072a4:	d002      	beq.n	80072ac <st_int8_copy+0xc8>
 80072a6:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80072aa:	708b      	strb	r3, [r1, #2]
 80072ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b0:	4770      	bx	lr
 80072b2:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80072b6:	460b      	mov	r3, r1
 80072b8:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 80072bc:	4684      	mov	ip, r0
 80072be:	f8dc 8000 	ldr.w	r8, [ip]
 80072c2:	3310      	adds	r3, #16
 80072c4:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80072c8:	f10c 0c10 	add.w	ip, ip, #16
 80072cc:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 80072d0:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 80072d4:	f843 8c10 	str.w	r8, [r3, #-16]
 80072d8:	f843 7c0c 	str.w	r7, [r3, #-12]
 80072dc:	f843 6c08 	str.w	r6, [r3, #-8]
 80072e0:	f843 5c04 	str.w	r5, [r3, #-4]
 80072e4:	459e      	cmp	lr, r3
 80072e6:	d1ea      	bne.n	80072be <st_int8_copy+0xda>
 80072e8:	e7bd      	b.n	8007266 <st_int8_copy+0x82>
 80072ea:	0893      	lsrs	r3, r2, #2
 80072ec:	f002 0203 	and.w	r2, r2, #3
 80072f0:	e7bf      	b.n	8007272 <st_int8_copy+0x8e>
 80072f2:	bf00      	nop

080072f4 <st_int8_reordered_no_shift_zero>:
 80072f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f6:	0897      	lsrs	r7, r2, #2
 80072f8:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 80072fc:	d02d      	beq.n	800735a <st_int8_reordered_no_shift_zero+0x66>
 80072fe:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 8007302:	468e      	mov	lr, r1
 8007304:	f850 cb04 	ldr.w	ip, [r0], #4
 8007308:	fa2f f49c 	sxtb16	r4, ip, ror #8
 800730c:	fad4 f403 	ssub16	r4, r4, r3
 8007310:	fa2f fc8c 	sxtb16	ip, ip
 8007314:	fadc fc03 	ssub16	ip, ip, r3
 8007318:	42a8      	cmp	r0, r5
 800731a:	f8ce c000 	str.w	ip, [lr]
 800731e:	f8ce 4004 	str.w	r4, [lr, #4]
 8007322:	f10e 0e08 	add.w	lr, lr, #8
 8007326:	d1ed      	bne.n	8007304 <st_int8_reordered_no_shift_zero+0x10>
 8007328:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800732c:	f012 0203 	ands.w	r2, r2, #3
 8007330:	d012      	beq.n	8007358 <st_int8_reordered_no_shift_zero+0x64>
 8007332:	f995 0000 	ldrsb.w	r0, [r5]
 8007336:	b273      	sxtb	r3, r6
 8007338:	3a01      	subs	r2, #1
 800733a:	eba0 0003 	sub.w	r0, r0, r3
 800733e:	8008      	strh	r0, [r1, #0]
 8007340:	d00a      	beq.n	8007358 <st_int8_reordered_no_shift_zero+0x64>
 8007342:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8007346:	2a01      	cmp	r2, #1
 8007348:	eba0 0003 	sub.w	r0, r0, r3
 800734c:	8048      	strh	r0, [r1, #2]
 800734e:	d003      	beq.n	8007358 <st_int8_reordered_no_shift_zero+0x64>
 8007350:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	808b      	strh	r3, [r1, #4]
 8007358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800735a:	4605      	mov	r5, r0
 800735c:	e7e6      	b.n	800732c <st_int8_reordered_no_shift_zero+0x38>
 800735e:	bf00      	nop

08007360 <ai_array_to_buffer_fmt>:
 8007360:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8007364:	2b02      	cmp	r3, #2
 8007366:	d053      	beq.n	8007410 <ai_array_to_buffer_fmt+0xb0>
 8007368:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800736c:	4a2b      	ldr	r2, [pc, #172]	@ (800741c <ai_array_to_buffer_fmt+0xbc>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d010      	beq.n	8007394 <ai_array_to_buffer_fmt+0x34>
 8007372:	dc21      	bgt.n	80073b8 <ai_array_to_buffer_fmt+0x58>
 8007374:	4a2a      	ldr	r2, [pc, #168]	@ (8007420 <ai_array_to_buffer_fmt+0xc0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00c      	beq.n	8007394 <ai_array_to_buffer_fmt+0x34>
 800737a:	dd0f      	ble.n	800739c <ai_array_to_buffer_fmt+0x3c>
 800737c:	4a29      	ldr	r2, [pc, #164]	@ (8007424 <ai_array_to_buffer_fmt+0xc4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d008      	beq.n	8007394 <ai_array_to_buffer_fmt+0x34>
 8007382:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8007386:	4293      	cmp	r3, r2
 8007388:	d004      	beq.n	8007394 <ai_array_to_buffer_fmt+0x34>
 800738a:	4a27      	ldr	r2, [pc, #156]	@ (8007428 <ai_array_to_buffer_fmt+0xc8>)
 800738c:	4293      	cmp	r3, r2
 800738e:	bf0c      	ite	eq
 8007390:	4613      	moveq	r3, r2
 8007392:	2340      	movne	r3, #64	@ 0x40
 8007394:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8007398:	4318      	orrs	r0, r3
 800739a:	4770      	bx	lr
 800739c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d0f7      	beq.n	8007394 <ai_array_to_buffer_fmt+0x34>
 80073a4:	dd2a      	ble.n	80073fc <ai_array_to_buffer_fmt+0x9c>
 80073a6:	4a21      	ldr	r2, [pc, #132]	@ (800742c <ai_array_to_buffer_fmt+0xcc>)
 80073a8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80073ac:	4293      	cmp	r3, r2
 80073ae:	bf0c      	ite	eq
 80073b0:	4613      	moveq	r3, r2
 80073b2:	2340      	movne	r3, #64	@ 0x40
 80073b4:	4318      	orrs	r0, r3
 80073b6:	4770      	bx	lr
 80073b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007430 <ai_array_to_buffer_fmt+0xd0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d0ea      	beq.n	8007394 <ai_array_to_buffer_fmt+0x34>
 80073be:	dd0f      	ble.n	80073e0 <ai_array_to_buffer_fmt+0x80>
 80073c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007434 <ai_array_to_buffer_fmt+0xd4>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d0e6      	beq.n	8007394 <ai_array_to_buffer_fmt+0x34>
 80073c6:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d0e2      	beq.n	8007394 <ai_array_to_buffer_fmt+0x34>
 80073ce:	4a1a      	ldr	r2, [pc, #104]	@ (8007438 <ai_array_to_buffer_fmt+0xd8>)
 80073d0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80073d4:	4293      	cmp	r3, r2
 80073d6:	bf0c      	ite	eq
 80073d8:	4613      	moveq	r3, r2
 80073da:	2340      	movne	r3, #64	@ 0x40
 80073dc:	4318      	orrs	r0, r3
 80073de:	4770      	bx	lr
 80073e0:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d0d5      	beq.n	8007394 <ai_array_to_buffer_fmt+0x34>
 80073e8:	3207      	adds	r2, #7
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d0d2      	beq.n	8007394 <ai_array_to_buffer_fmt+0x34>
 80073ee:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 80073f2:	4293      	cmp	r3, r2
 80073f4:	bf0c      	ite	eq
 80073f6:	4613      	moveq	r3, r2
 80073f8:	2340      	movne	r3, #64	@ 0x40
 80073fa:	e7cb      	b.n	8007394 <ai_array_to_buffer_fmt+0x34>
 80073fc:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8007400:	4293      	cmp	r3, r2
 8007402:	d0c7      	beq.n	8007394 <ai_array_to_buffer_fmt+0x34>
 8007404:	3280      	adds	r2, #128	@ 0x80
 8007406:	4293      	cmp	r3, r2
 8007408:	bf0c      	ite	eq
 800740a:	4613      	moveq	r3, r2
 800740c:	2340      	movne	r3, #64	@ 0x40
 800740e:	e7c1      	b.n	8007394 <ai_array_to_buffer_fmt+0x34>
 8007410:	4b0a      	ldr	r3, [pc, #40]	@ (800743c <ai_array_to_buffer_fmt+0xdc>)
 8007412:	4003      	ands	r3, r0
 8007414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007418:	e7bc      	b.n	8007394 <ai_array_to_buffer_fmt+0x34>
 800741a:	bf00      	nop
 800741c:	00840040 	.word	0x00840040
 8007420:	00040840 	.word	0x00040840
 8007424:	00041040 	.word	0x00041040
 8007428:	0004084f 	.word	0x0004084f
 800742c:	00040447 	.word	0x00040447
 8007430:	00840840 	.word	0x00840840
 8007434:	00841040 	.word	0x00841040
 8007438:	0084084f 	.word	0x0084084f
 800743c:	00803fff 	.word	0x00803fff

08007440 <ai_array_get_data_byte_size>:
 8007440:	b169      	cbz	r1, 800745e <ai_array_get_data_byte_size+0x1e>
 8007442:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8007446:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800744a:	fb03 f101 	mul.w	r1, r3, r1
 800744e:	1dcb      	adds	r3, r1, #7
 8007450:	f023 0307 	bic.w	r3, r3, #7
 8007454:	fa23 f000 	lsr.w	r0, r3, r0
 8007458:	3007      	adds	r0, #7
 800745a:	08c0      	lsrs	r0, r0, #3
 800745c:	4770      	bx	lr
 800745e:	4608      	mov	r0, r1
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop

08007464 <ai_version_get>:
 8007464:	0212      	lsls	r2, r2, #8
 8007466:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800746a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800746e:	4770      	bx	lr

08007470 <ai_platform_version_get>:
 8007470:	0e01      	lsrs	r1, r0, #24
 8007472:	2300      	movs	r3, #0
 8007474:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8007478:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800747c:	f361 0307 	bfi	r3, r1, #0, #8
 8007480:	b082      	sub	sp, #8
 8007482:	f362 230f 	bfi	r3, r2, #8, #8
 8007486:	f360 4317 	bfi	r3, r0, #16, #8
 800748a:	f023 407f 	bic.w	r0, r3, #4278190080	@ 0xff000000
 800748e:	b002      	add	sp, #8
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop

08007494 <get_tensor_byte_size>:
 8007494:	b430      	push	{r4, r5}
 8007496:	6985      	ldr	r5, [r0, #24]
 8007498:	68c4      	ldr	r4, [r0, #12]
 800749a:	6941      	ldr	r1, [r0, #20]
 800749c:	4b06      	ldr	r3, [pc, #24]	@ (80074b8 <get_tensor_byte_size+0x24>)
 800749e:	6828      	ldr	r0, [r5, #0]
 80074a0:	4a06      	ldr	r2, [pc, #24]	@ (80074bc <get_tensor_byte_size+0x28>)
 80074a2:	4003      	ands	r3, r0
 80074a4:	68c9      	ldr	r1, [r1, #12]
 80074a6:	68e0      	ldr	r0, [r4, #12]
 80074a8:	4293      	cmp	r3, r2
 80074aa:	fb01 f000 	mul.w	r0, r1, r0
 80074ae:	d101      	bne.n	80074b4 <get_tensor_byte_size+0x20>
 80074b0:	3007      	adds	r0, #7
 80074b2:	08c0      	lsrs	r0, r0, #3
 80074b4:	bc30      	pop	{r4, r5}
 80074b6:	4770      	bx	lr
 80074b8:	017fffff 	.word	0x017fffff
 80074bc:	000400c0 	.word	0x000400c0

080074c0 <__cvt>:
 80074c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074c2:	ed2d 8b02 	vpush	{d8}
 80074c6:	eeb0 8b40 	vmov.f64	d8, d0
 80074ca:	b085      	sub	sp, #20
 80074cc:	4617      	mov	r7, r2
 80074ce:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80074d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074d2:	ee18 2a90 	vmov	r2, s17
 80074d6:	f025 0520 	bic.w	r5, r5, #32
 80074da:	2a00      	cmp	r2, #0
 80074dc:	bfb6      	itet	lt
 80074de:	222d      	movlt	r2, #45	@ 0x2d
 80074e0:	2200      	movge	r2, #0
 80074e2:	eeb1 8b40 	vneglt.f64	d8, d0
 80074e6:	2d46      	cmp	r5, #70	@ 0x46
 80074e8:	460c      	mov	r4, r1
 80074ea:	701a      	strb	r2, [r3, #0]
 80074ec:	d004      	beq.n	80074f8 <__cvt+0x38>
 80074ee:	2d45      	cmp	r5, #69	@ 0x45
 80074f0:	d100      	bne.n	80074f4 <__cvt+0x34>
 80074f2:	3401      	adds	r4, #1
 80074f4:	2102      	movs	r1, #2
 80074f6:	e000      	b.n	80074fa <__cvt+0x3a>
 80074f8:	2103      	movs	r1, #3
 80074fa:	ab03      	add	r3, sp, #12
 80074fc:	9301      	str	r3, [sp, #4]
 80074fe:	ab02      	add	r3, sp, #8
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	4622      	mov	r2, r4
 8007504:	4633      	mov	r3, r6
 8007506:	eeb0 0b48 	vmov.f64	d0, d8
 800750a:	f000 ff95 	bl	8008438 <_dtoa_r>
 800750e:	2d47      	cmp	r5, #71	@ 0x47
 8007510:	d114      	bne.n	800753c <__cvt+0x7c>
 8007512:	07fb      	lsls	r3, r7, #31
 8007514:	d50a      	bpl.n	800752c <__cvt+0x6c>
 8007516:	1902      	adds	r2, r0, r4
 8007518:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800751c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007520:	bf08      	it	eq
 8007522:	9203      	streq	r2, [sp, #12]
 8007524:	2130      	movs	r1, #48	@ 0x30
 8007526:	9b03      	ldr	r3, [sp, #12]
 8007528:	4293      	cmp	r3, r2
 800752a:	d319      	bcc.n	8007560 <__cvt+0xa0>
 800752c:	9b03      	ldr	r3, [sp, #12]
 800752e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007530:	1a1b      	subs	r3, r3, r0
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	b005      	add	sp, #20
 8007536:	ecbd 8b02 	vpop	{d8}
 800753a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800753c:	2d46      	cmp	r5, #70	@ 0x46
 800753e:	eb00 0204 	add.w	r2, r0, r4
 8007542:	d1e9      	bne.n	8007518 <__cvt+0x58>
 8007544:	7803      	ldrb	r3, [r0, #0]
 8007546:	2b30      	cmp	r3, #48	@ 0x30
 8007548:	d107      	bne.n	800755a <__cvt+0x9a>
 800754a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800754e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007552:	bf1c      	itt	ne
 8007554:	f1c4 0401 	rsbne	r4, r4, #1
 8007558:	6034      	strne	r4, [r6, #0]
 800755a:	6833      	ldr	r3, [r6, #0]
 800755c:	441a      	add	r2, r3
 800755e:	e7db      	b.n	8007518 <__cvt+0x58>
 8007560:	1c5c      	adds	r4, r3, #1
 8007562:	9403      	str	r4, [sp, #12]
 8007564:	7019      	strb	r1, [r3, #0]
 8007566:	e7de      	b.n	8007526 <__cvt+0x66>

08007568 <__exponent>:
 8007568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800756a:	2900      	cmp	r1, #0
 800756c:	bfba      	itte	lt
 800756e:	4249      	neglt	r1, r1
 8007570:	232d      	movlt	r3, #45	@ 0x2d
 8007572:	232b      	movge	r3, #43	@ 0x2b
 8007574:	2909      	cmp	r1, #9
 8007576:	7002      	strb	r2, [r0, #0]
 8007578:	7043      	strb	r3, [r0, #1]
 800757a:	dd29      	ble.n	80075d0 <__exponent+0x68>
 800757c:	f10d 0307 	add.w	r3, sp, #7
 8007580:	461d      	mov	r5, r3
 8007582:	270a      	movs	r7, #10
 8007584:	461a      	mov	r2, r3
 8007586:	fbb1 f6f7 	udiv	r6, r1, r7
 800758a:	fb07 1416 	mls	r4, r7, r6, r1
 800758e:	3430      	adds	r4, #48	@ 0x30
 8007590:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007594:	460c      	mov	r4, r1
 8007596:	2c63      	cmp	r4, #99	@ 0x63
 8007598:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800759c:	4631      	mov	r1, r6
 800759e:	dcf1      	bgt.n	8007584 <__exponent+0x1c>
 80075a0:	3130      	adds	r1, #48	@ 0x30
 80075a2:	1e94      	subs	r4, r2, #2
 80075a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80075a8:	1c41      	adds	r1, r0, #1
 80075aa:	4623      	mov	r3, r4
 80075ac:	42ab      	cmp	r3, r5
 80075ae:	d30a      	bcc.n	80075c6 <__exponent+0x5e>
 80075b0:	f10d 0309 	add.w	r3, sp, #9
 80075b4:	1a9b      	subs	r3, r3, r2
 80075b6:	42ac      	cmp	r4, r5
 80075b8:	bf88      	it	hi
 80075ba:	2300      	movhi	r3, #0
 80075bc:	3302      	adds	r3, #2
 80075be:	4403      	add	r3, r0
 80075c0:	1a18      	subs	r0, r3, r0
 80075c2:	b003      	add	sp, #12
 80075c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075c6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80075ca:	f801 6f01 	strb.w	r6, [r1, #1]!
 80075ce:	e7ed      	b.n	80075ac <__exponent+0x44>
 80075d0:	2330      	movs	r3, #48	@ 0x30
 80075d2:	3130      	adds	r1, #48	@ 0x30
 80075d4:	7083      	strb	r3, [r0, #2]
 80075d6:	70c1      	strb	r1, [r0, #3]
 80075d8:	1d03      	adds	r3, r0, #4
 80075da:	e7f1      	b.n	80075c0 <__exponent+0x58>
 80075dc:	0000      	movs	r0, r0
	...

080075e0 <_printf_float>:
 80075e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e4:	b08d      	sub	sp, #52	@ 0x34
 80075e6:	460c      	mov	r4, r1
 80075e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80075ec:	4616      	mov	r6, r2
 80075ee:	461f      	mov	r7, r3
 80075f0:	4605      	mov	r5, r0
 80075f2:	f000 fe29 	bl	8008248 <_localeconv_r>
 80075f6:	f8d0 b000 	ldr.w	fp, [r0]
 80075fa:	4658      	mov	r0, fp
 80075fc:	f7f8 fec0 	bl	8000380 <strlen>
 8007600:	2300      	movs	r3, #0
 8007602:	930a      	str	r3, [sp, #40]	@ 0x28
 8007604:	f8d8 3000 	ldr.w	r3, [r8]
 8007608:	f894 9018 	ldrb.w	r9, [r4, #24]
 800760c:	6822      	ldr	r2, [r4, #0]
 800760e:	9005      	str	r0, [sp, #20]
 8007610:	3307      	adds	r3, #7
 8007612:	f023 0307 	bic.w	r3, r3, #7
 8007616:	f103 0108 	add.w	r1, r3, #8
 800761a:	f8c8 1000 	str.w	r1, [r8]
 800761e:	ed93 0b00 	vldr	d0, [r3]
 8007622:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8007880 <_printf_float+0x2a0>
 8007626:	eeb0 7bc0 	vabs.f64	d7, d0
 800762a:	eeb4 7b46 	vcmp.f64	d7, d6
 800762e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007632:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8007636:	dd24      	ble.n	8007682 <_printf_float+0xa2>
 8007638:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800763c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007640:	d502      	bpl.n	8007648 <_printf_float+0x68>
 8007642:	232d      	movs	r3, #45	@ 0x2d
 8007644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007648:	498f      	ldr	r1, [pc, #572]	@ (8007888 <_printf_float+0x2a8>)
 800764a:	4b90      	ldr	r3, [pc, #576]	@ (800788c <_printf_float+0x2ac>)
 800764c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8007650:	bf94      	ite	ls
 8007652:	4688      	movls	r8, r1
 8007654:	4698      	movhi	r8, r3
 8007656:	f022 0204 	bic.w	r2, r2, #4
 800765a:	2303      	movs	r3, #3
 800765c:	6123      	str	r3, [r4, #16]
 800765e:	6022      	str	r2, [r4, #0]
 8007660:	f04f 0a00 	mov.w	sl, #0
 8007664:	9700      	str	r7, [sp, #0]
 8007666:	4633      	mov	r3, r6
 8007668:	aa0b      	add	r2, sp, #44	@ 0x2c
 800766a:	4621      	mov	r1, r4
 800766c:	4628      	mov	r0, r5
 800766e:	f000 fa7b 	bl	8007b68 <_printf_common>
 8007672:	3001      	adds	r0, #1
 8007674:	f040 8089 	bne.w	800778a <_printf_float+0x1aa>
 8007678:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800767c:	b00d      	add	sp, #52	@ 0x34
 800767e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007682:	eeb4 0b40 	vcmp.f64	d0, d0
 8007686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800768a:	d709      	bvc.n	80076a0 <_printf_float+0xc0>
 800768c:	ee10 3a90 	vmov	r3, s1
 8007690:	2b00      	cmp	r3, #0
 8007692:	bfbc      	itt	lt
 8007694:	232d      	movlt	r3, #45	@ 0x2d
 8007696:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800769a:	497d      	ldr	r1, [pc, #500]	@ (8007890 <_printf_float+0x2b0>)
 800769c:	4b7d      	ldr	r3, [pc, #500]	@ (8007894 <_printf_float+0x2b4>)
 800769e:	e7d5      	b.n	800764c <_printf_float+0x6c>
 80076a0:	6863      	ldr	r3, [r4, #4]
 80076a2:	1c59      	adds	r1, r3, #1
 80076a4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80076a8:	d139      	bne.n	800771e <_printf_float+0x13e>
 80076aa:	2306      	movs	r3, #6
 80076ac:	6063      	str	r3, [r4, #4]
 80076ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80076b2:	2300      	movs	r3, #0
 80076b4:	6022      	str	r2, [r4, #0]
 80076b6:	9303      	str	r3, [sp, #12]
 80076b8:	ab0a      	add	r3, sp, #40	@ 0x28
 80076ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80076be:	ab09      	add	r3, sp, #36	@ 0x24
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	6861      	ldr	r1, [r4, #4]
 80076c4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80076c8:	4628      	mov	r0, r5
 80076ca:	f7ff fef9 	bl	80074c0 <__cvt>
 80076ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80076d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076d4:	4680      	mov	r8, r0
 80076d6:	d129      	bne.n	800772c <_printf_float+0x14c>
 80076d8:	1cc8      	adds	r0, r1, #3
 80076da:	db02      	blt.n	80076e2 <_printf_float+0x102>
 80076dc:	6863      	ldr	r3, [r4, #4]
 80076de:	4299      	cmp	r1, r3
 80076e0:	dd41      	ble.n	8007766 <_printf_float+0x186>
 80076e2:	f1a9 0902 	sub.w	r9, r9, #2
 80076e6:	fa5f f989 	uxtb.w	r9, r9
 80076ea:	3901      	subs	r1, #1
 80076ec:	464a      	mov	r2, r9
 80076ee:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80076f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80076f4:	f7ff ff38 	bl	8007568 <__exponent>
 80076f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076fa:	1813      	adds	r3, r2, r0
 80076fc:	2a01      	cmp	r2, #1
 80076fe:	4682      	mov	sl, r0
 8007700:	6123      	str	r3, [r4, #16]
 8007702:	dc02      	bgt.n	800770a <_printf_float+0x12a>
 8007704:	6822      	ldr	r2, [r4, #0]
 8007706:	07d2      	lsls	r2, r2, #31
 8007708:	d501      	bpl.n	800770e <_printf_float+0x12e>
 800770a:	3301      	adds	r3, #1
 800770c:	6123      	str	r3, [r4, #16]
 800770e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0a6      	beq.n	8007664 <_printf_float+0x84>
 8007716:	232d      	movs	r3, #45	@ 0x2d
 8007718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800771c:	e7a2      	b.n	8007664 <_printf_float+0x84>
 800771e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007722:	d1c4      	bne.n	80076ae <_printf_float+0xce>
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1c2      	bne.n	80076ae <_printf_float+0xce>
 8007728:	2301      	movs	r3, #1
 800772a:	e7bf      	b.n	80076ac <_printf_float+0xcc>
 800772c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007730:	d9db      	bls.n	80076ea <_printf_float+0x10a>
 8007732:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8007736:	d118      	bne.n	800776a <_printf_float+0x18a>
 8007738:	2900      	cmp	r1, #0
 800773a:	6863      	ldr	r3, [r4, #4]
 800773c:	dd0b      	ble.n	8007756 <_printf_float+0x176>
 800773e:	6121      	str	r1, [r4, #16]
 8007740:	b913      	cbnz	r3, 8007748 <_printf_float+0x168>
 8007742:	6822      	ldr	r2, [r4, #0]
 8007744:	07d0      	lsls	r0, r2, #31
 8007746:	d502      	bpl.n	800774e <_printf_float+0x16e>
 8007748:	3301      	adds	r3, #1
 800774a:	440b      	add	r3, r1
 800774c:	6123      	str	r3, [r4, #16]
 800774e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007750:	f04f 0a00 	mov.w	sl, #0
 8007754:	e7db      	b.n	800770e <_printf_float+0x12e>
 8007756:	b913      	cbnz	r3, 800775e <_printf_float+0x17e>
 8007758:	6822      	ldr	r2, [r4, #0]
 800775a:	07d2      	lsls	r2, r2, #31
 800775c:	d501      	bpl.n	8007762 <_printf_float+0x182>
 800775e:	3302      	adds	r3, #2
 8007760:	e7f4      	b.n	800774c <_printf_float+0x16c>
 8007762:	2301      	movs	r3, #1
 8007764:	e7f2      	b.n	800774c <_printf_float+0x16c>
 8007766:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800776a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800776c:	4299      	cmp	r1, r3
 800776e:	db05      	blt.n	800777c <_printf_float+0x19c>
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	6121      	str	r1, [r4, #16]
 8007774:	07d8      	lsls	r0, r3, #31
 8007776:	d5ea      	bpl.n	800774e <_printf_float+0x16e>
 8007778:	1c4b      	adds	r3, r1, #1
 800777a:	e7e7      	b.n	800774c <_printf_float+0x16c>
 800777c:	2900      	cmp	r1, #0
 800777e:	bfd4      	ite	le
 8007780:	f1c1 0202 	rsble	r2, r1, #2
 8007784:	2201      	movgt	r2, #1
 8007786:	4413      	add	r3, r2
 8007788:	e7e0      	b.n	800774c <_printf_float+0x16c>
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	055a      	lsls	r2, r3, #21
 800778e:	d407      	bmi.n	80077a0 <_printf_float+0x1c0>
 8007790:	6923      	ldr	r3, [r4, #16]
 8007792:	4642      	mov	r2, r8
 8007794:	4631      	mov	r1, r6
 8007796:	4628      	mov	r0, r5
 8007798:	47b8      	blx	r7
 800779a:	3001      	adds	r0, #1
 800779c:	d12a      	bne.n	80077f4 <_printf_float+0x214>
 800779e:	e76b      	b.n	8007678 <_printf_float+0x98>
 80077a0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80077a4:	f240 80e0 	bls.w	8007968 <_printf_float+0x388>
 80077a8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80077ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80077b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b4:	d133      	bne.n	800781e <_printf_float+0x23e>
 80077b6:	4a38      	ldr	r2, [pc, #224]	@ (8007898 <_printf_float+0x2b8>)
 80077b8:	2301      	movs	r3, #1
 80077ba:	4631      	mov	r1, r6
 80077bc:	4628      	mov	r0, r5
 80077be:	47b8      	blx	r7
 80077c0:	3001      	adds	r0, #1
 80077c2:	f43f af59 	beq.w	8007678 <_printf_float+0x98>
 80077c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80077ca:	4543      	cmp	r3, r8
 80077cc:	db02      	blt.n	80077d4 <_printf_float+0x1f4>
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	07d8      	lsls	r0, r3, #31
 80077d2:	d50f      	bpl.n	80077f4 <_printf_float+0x214>
 80077d4:	9b05      	ldr	r3, [sp, #20]
 80077d6:	465a      	mov	r2, fp
 80077d8:	4631      	mov	r1, r6
 80077da:	4628      	mov	r0, r5
 80077dc:	47b8      	blx	r7
 80077de:	3001      	adds	r0, #1
 80077e0:	f43f af4a 	beq.w	8007678 <_printf_float+0x98>
 80077e4:	f04f 0900 	mov.w	r9, #0
 80077e8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80077ec:	f104 0a1a 	add.w	sl, r4, #26
 80077f0:	45c8      	cmp	r8, r9
 80077f2:	dc09      	bgt.n	8007808 <_printf_float+0x228>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	079b      	lsls	r3, r3, #30
 80077f8:	f100 8107 	bmi.w	8007a0a <_printf_float+0x42a>
 80077fc:	68e0      	ldr	r0, [r4, #12]
 80077fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007800:	4298      	cmp	r0, r3
 8007802:	bfb8      	it	lt
 8007804:	4618      	movlt	r0, r3
 8007806:	e739      	b.n	800767c <_printf_float+0x9c>
 8007808:	2301      	movs	r3, #1
 800780a:	4652      	mov	r2, sl
 800780c:	4631      	mov	r1, r6
 800780e:	4628      	mov	r0, r5
 8007810:	47b8      	blx	r7
 8007812:	3001      	adds	r0, #1
 8007814:	f43f af30 	beq.w	8007678 <_printf_float+0x98>
 8007818:	f109 0901 	add.w	r9, r9, #1
 800781c:	e7e8      	b.n	80077f0 <_printf_float+0x210>
 800781e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007820:	2b00      	cmp	r3, #0
 8007822:	dc3b      	bgt.n	800789c <_printf_float+0x2bc>
 8007824:	4a1c      	ldr	r2, [pc, #112]	@ (8007898 <_printf_float+0x2b8>)
 8007826:	2301      	movs	r3, #1
 8007828:	4631      	mov	r1, r6
 800782a:	4628      	mov	r0, r5
 800782c:	47b8      	blx	r7
 800782e:	3001      	adds	r0, #1
 8007830:	f43f af22 	beq.w	8007678 <_printf_float+0x98>
 8007834:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007838:	ea59 0303 	orrs.w	r3, r9, r3
 800783c:	d102      	bne.n	8007844 <_printf_float+0x264>
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	07d9      	lsls	r1, r3, #31
 8007842:	d5d7      	bpl.n	80077f4 <_printf_float+0x214>
 8007844:	9b05      	ldr	r3, [sp, #20]
 8007846:	465a      	mov	r2, fp
 8007848:	4631      	mov	r1, r6
 800784a:	4628      	mov	r0, r5
 800784c:	47b8      	blx	r7
 800784e:	3001      	adds	r0, #1
 8007850:	f43f af12 	beq.w	8007678 <_printf_float+0x98>
 8007854:	f04f 0a00 	mov.w	sl, #0
 8007858:	f104 0b1a 	add.w	fp, r4, #26
 800785c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800785e:	425b      	negs	r3, r3
 8007860:	4553      	cmp	r3, sl
 8007862:	dc01      	bgt.n	8007868 <_printf_float+0x288>
 8007864:	464b      	mov	r3, r9
 8007866:	e794      	b.n	8007792 <_printf_float+0x1b2>
 8007868:	2301      	movs	r3, #1
 800786a:	465a      	mov	r2, fp
 800786c:	4631      	mov	r1, r6
 800786e:	4628      	mov	r0, r5
 8007870:	47b8      	blx	r7
 8007872:	3001      	adds	r0, #1
 8007874:	f43f af00 	beq.w	8007678 <_printf_float+0x98>
 8007878:	f10a 0a01 	add.w	sl, sl, #1
 800787c:	e7ee      	b.n	800785c <_printf_float+0x27c>
 800787e:	bf00      	nop
 8007880:	ffffffff 	.word	0xffffffff
 8007884:	7fefffff 	.word	0x7fefffff
 8007888:	0801da24 	.word	0x0801da24
 800788c:	0801da28 	.word	0x0801da28
 8007890:	0801da2c 	.word	0x0801da2c
 8007894:	0801da30 	.word	0x0801da30
 8007898:	0801d55e 	.word	0x0801d55e
 800789c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800789e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078a2:	4553      	cmp	r3, sl
 80078a4:	bfa8      	it	ge
 80078a6:	4653      	movge	r3, sl
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	4699      	mov	r9, r3
 80078ac:	dc37      	bgt.n	800791e <_printf_float+0x33e>
 80078ae:	2300      	movs	r3, #0
 80078b0:	9307      	str	r3, [sp, #28]
 80078b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078b6:	f104 021a 	add.w	r2, r4, #26
 80078ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078bc:	9907      	ldr	r1, [sp, #28]
 80078be:	9306      	str	r3, [sp, #24]
 80078c0:	eba3 0309 	sub.w	r3, r3, r9
 80078c4:	428b      	cmp	r3, r1
 80078c6:	dc31      	bgt.n	800792c <_printf_float+0x34c>
 80078c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ca:	459a      	cmp	sl, r3
 80078cc:	dc3b      	bgt.n	8007946 <_printf_float+0x366>
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	07da      	lsls	r2, r3, #31
 80078d2:	d438      	bmi.n	8007946 <_printf_float+0x366>
 80078d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078d6:	ebaa 0903 	sub.w	r9, sl, r3
 80078da:	9b06      	ldr	r3, [sp, #24]
 80078dc:	ebaa 0303 	sub.w	r3, sl, r3
 80078e0:	4599      	cmp	r9, r3
 80078e2:	bfa8      	it	ge
 80078e4:	4699      	movge	r9, r3
 80078e6:	f1b9 0f00 	cmp.w	r9, #0
 80078ea:	dc34      	bgt.n	8007956 <_printf_float+0x376>
 80078ec:	f04f 0800 	mov.w	r8, #0
 80078f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078f4:	f104 0b1a 	add.w	fp, r4, #26
 80078f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078fa:	ebaa 0303 	sub.w	r3, sl, r3
 80078fe:	eba3 0309 	sub.w	r3, r3, r9
 8007902:	4543      	cmp	r3, r8
 8007904:	f77f af76 	ble.w	80077f4 <_printf_float+0x214>
 8007908:	2301      	movs	r3, #1
 800790a:	465a      	mov	r2, fp
 800790c:	4631      	mov	r1, r6
 800790e:	4628      	mov	r0, r5
 8007910:	47b8      	blx	r7
 8007912:	3001      	adds	r0, #1
 8007914:	f43f aeb0 	beq.w	8007678 <_printf_float+0x98>
 8007918:	f108 0801 	add.w	r8, r8, #1
 800791c:	e7ec      	b.n	80078f8 <_printf_float+0x318>
 800791e:	4642      	mov	r2, r8
 8007920:	4631      	mov	r1, r6
 8007922:	4628      	mov	r0, r5
 8007924:	47b8      	blx	r7
 8007926:	3001      	adds	r0, #1
 8007928:	d1c1      	bne.n	80078ae <_printf_float+0x2ce>
 800792a:	e6a5      	b.n	8007678 <_printf_float+0x98>
 800792c:	2301      	movs	r3, #1
 800792e:	4631      	mov	r1, r6
 8007930:	4628      	mov	r0, r5
 8007932:	9206      	str	r2, [sp, #24]
 8007934:	47b8      	blx	r7
 8007936:	3001      	adds	r0, #1
 8007938:	f43f ae9e 	beq.w	8007678 <_printf_float+0x98>
 800793c:	9b07      	ldr	r3, [sp, #28]
 800793e:	9a06      	ldr	r2, [sp, #24]
 8007940:	3301      	adds	r3, #1
 8007942:	9307      	str	r3, [sp, #28]
 8007944:	e7b9      	b.n	80078ba <_printf_float+0x2da>
 8007946:	9b05      	ldr	r3, [sp, #20]
 8007948:	465a      	mov	r2, fp
 800794a:	4631      	mov	r1, r6
 800794c:	4628      	mov	r0, r5
 800794e:	47b8      	blx	r7
 8007950:	3001      	adds	r0, #1
 8007952:	d1bf      	bne.n	80078d4 <_printf_float+0x2f4>
 8007954:	e690      	b.n	8007678 <_printf_float+0x98>
 8007956:	9a06      	ldr	r2, [sp, #24]
 8007958:	464b      	mov	r3, r9
 800795a:	4442      	add	r2, r8
 800795c:	4631      	mov	r1, r6
 800795e:	4628      	mov	r0, r5
 8007960:	47b8      	blx	r7
 8007962:	3001      	adds	r0, #1
 8007964:	d1c2      	bne.n	80078ec <_printf_float+0x30c>
 8007966:	e687      	b.n	8007678 <_printf_float+0x98>
 8007968:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800796c:	f1b9 0f01 	cmp.w	r9, #1
 8007970:	dc01      	bgt.n	8007976 <_printf_float+0x396>
 8007972:	07db      	lsls	r3, r3, #31
 8007974:	d536      	bpl.n	80079e4 <_printf_float+0x404>
 8007976:	2301      	movs	r3, #1
 8007978:	4642      	mov	r2, r8
 800797a:	4631      	mov	r1, r6
 800797c:	4628      	mov	r0, r5
 800797e:	47b8      	blx	r7
 8007980:	3001      	adds	r0, #1
 8007982:	f43f ae79 	beq.w	8007678 <_printf_float+0x98>
 8007986:	9b05      	ldr	r3, [sp, #20]
 8007988:	465a      	mov	r2, fp
 800798a:	4631      	mov	r1, r6
 800798c:	4628      	mov	r0, r5
 800798e:	47b8      	blx	r7
 8007990:	3001      	adds	r0, #1
 8007992:	f43f ae71 	beq.w	8007678 <_printf_float+0x98>
 8007996:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800799a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800799e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a2:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80079a6:	d018      	beq.n	80079da <_printf_float+0x3fa>
 80079a8:	464b      	mov	r3, r9
 80079aa:	f108 0201 	add.w	r2, r8, #1
 80079ae:	4631      	mov	r1, r6
 80079b0:	4628      	mov	r0, r5
 80079b2:	47b8      	blx	r7
 80079b4:	3001      	adds	r0, #1
 80079b6:	d10c      	bne.n	80079d2 <_printf_float+0x3f2>
 80079b8:	e65e      	b.n	8007678 <_printf_float+0x98>
 80079ba:	2301      	movs	r3, #1
 80079bc:	465a      	mov	r2, fp
 80079be:	4631      	mov	r1, r6
 80079c0:	4628      	mov	r0, r5
 80079c2:	47b8      	blx	r7
 80079c4:	3001      	adds	r0, #1
 80079c6:	f43f ae57 	beq.w	8007678 <_printf_float+0x98>
 80079ca:	f108 0801 	add.w	r8, r8, #1
 80079ce:	45c8      	cmp	r8, r9
 80079d0:	dbf3      	blt.n	80079ba <_printf_float+0x3da>
 80079d2:	4653      	mov	r3, sl
 80079d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80079d8:	e6dc      	b.n	8007794 <_printf_float+0x1b4>
 80079da:	f04f 0800 	mov.w	r8, #0
 80079de:	f104 0b1a 	add.w	fp, r4, #26
 80079e2:	e7f4      	b.n	80079ce <_printf_float+0x3ee>
 80079e4:	2301      	movs	r3, #1
 80079e6:	4642      	mov	r2, r8
 80079e8:	e7e1      	b.n	80079ae <_printf_float+0x3ce>
 80079ea:	2301      	movs	r3, #1
 80079ec:	464a      	mov	r2, r9
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b8      	blx	r7
 80079f4:	3001      	adds	r0, #1
 80079f6:	f43f ae3f 	beq.w	8007678 <_printf_float+0x98>
 80079fa:	f108 0801 	add.w	r8, r8, #1
 80079fe:	68e3      	ldr	r3, [r4, #12]
 8007a00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a02:	1a5b      	subs	r3, r3, r1
 8007a04:	4543      	cmp	r3, r8
 8007a06:	dcf0      	bgt.n	80079ea <_printf_float+0x40a>
 8007a08:	e6f8      	b.n	80077fc <_printf_float+0x21c>
 8007a0a:	f04f 0800 	mov.w	r8, #0
 8007a0e:	f104 0919 	add.w	r9, r4, #25
 8007a12:	e7f4      	b.n	80079fe <_printf_float+0x41e>

08007a14 <malloc>:
 8007a14:	4b02      	ldr	r3, [pc, #8]	@ (8007a20 <malloc+0xc>)
 8007a16:	4601      	mov	r1, r0
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	f000 b825 	b.w	8007a68 <_malloc_r>
 8007a1e:	bf00      	nop
 8007a20:	24000660 	.word	0x24000660

08007a24 <sbrk_aligned>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	4e0f      	ldr	r6, [pc, #60]	@ (8007a64 <sbrk_aligned+0x40>)
 8007a28:	460c      	mov	r4, r1
 8007a2a:	6831      	ldr	r1, [r6, #0]
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	b911      	cbnz	r1, 8007a36 <sbrk_aligned+0x12>
 8007a30:	f000 fc0e 	bl	8008250 <_sbrk_r>
 8007a34:	6030      	str	r0, [r6, #0]
 8007a36:	4621      	mov	r1, r4
 8007a38:	4628      	mov	r0, r5
 8007a3a:	f000 fc09 	bl	8008250 <_sbrk_r>
 8007a3e:	1c43      	adds	r3, r0, #1
 8007a40:	d103      	bne.n	8007a4a <sbrk_aligned+0x26>
 8007a42:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007a46:	4620      	mov	r0, r4
 8007a48:	bd70      	pop	{r4, r5, r6, pc}
 8007a4a:	1cc4      	adds	r4, r0, #3
 8007a4c:	f024 0403 	bic.w	r4, r4, #3
 8007a50:	42a0      	cmp	r0, r4
 8007a52:	d0f8      	beq.n	8007a46 <sbrk_aligned+0x22>
 8007a54:	1a21      	subs	r1, r4, r0
 8007a56:	4628      	mov	r0, r5
 8007a58:	f000 fbfa 	bl	8008250 <_sbrk_r>
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	d1f2      	bne.n	8007a46 <sbrk_aligned+0x22>
 8007a60:	e7ef      	b.n	8007a42 <sbrk_aligned+0x1e>
 8007a62:	bf00      	nop
 8007a64:	24000f7c 	.word	0x24000f7c

08007a68 <_malloc_r>:
 8007a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a6c:	1ccd      	adds	r5, r1, #3
 8007a6e:	f025 0503 	bic.w	r5, r5, #3
 8007a72:	3508      	adds	r5, #8
 8007a74:	2d0c      	cmp	r5, #12
 8007a76:	bf38      	it	cc
 8007a78:	250c      	movcc	r5, #12
 8007a7a:	2d00      	cmp	r5, #0
 8007a7c:	4606      	mov	r6, r0
 8007a7e:	db01      	blt.n	8007a84 <_malloc_r+0x1c>
 8007a80:	42a9      	cmp	r1, r5
 8007a82:	d904      	bls.n	8007a8e <_malloc_r+0x26>
 8007a84:	230c      	movs	r3, #12
 8007a86:	6033      	str	r3, [r6, #0]
 8007a88:	2000      	movs	r0, #0
 8007a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b64 <_malloc_r+0xfc>
 8007a92:	f000 faa3 	bl	8007fdc <__malloc_lock>
 8007a96:	f8d8 3000 	ldr.w	r3, [r8]
 8007a9a:	461c      	mov	r4, r3
 8007a9c:	bb44      	cbnz	r4, 8007af0 <_malloc_r+0x88>
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f7ff ffbf 	bl	8007a24 <sbrk_aligned>
 8007aa6:	1c43      	adds	r3, r0, #1
 8007aa8:	4604      	mov	r4, r0
 8007aaa:	d158      	bne.n	8007b5e <_malloc_r+0xf6>
 8007aac:	f8d8 4000 	ldr.w	r4, [r8]
 8007ab0:	4627      	mov	r7, r4
 8007ab2:	2f00      	cmp	r7, #0
 8007ab4:	d143      	bne.n	8007b3e <_malloc_r+0xd6>
 8007ab6:	2c00      	cmp	r4, #0
 8007ab8:	d04b      	beq.n	8007b52 <_malloc_r+0xea>
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	4639      	mov	r1, r7
 8007abe:	4630      	mov	r0, r6
 8007ac0:	eb04 0903 	add.w	r9, r4, r3
 8007ac4:	f000 fbc4 	bl	8008250 <_sbrk_r>
 8007ac8:	4581      	cmp	r9, r0
 8007aca:	d142      	bne.n	8007b52 <_malloc_r+0xea>
 8007acc:	6821      	ldr	r1, [r4, #0]
 8007ace:	1a6d      	subs	r5, r5, r1
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f7ff ffa6 	bl	8007a24 <sbrk_aligned>
 8007ad8:	3001      	adds	r0, #1
 8007ada:	d03a      	beq.n	8007b52 <_malloc_r+0xea>
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	442b      	add	r3, r5
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	bb62      	cbnz	r2, 8007b44 <_malloc_r+0xdc>
 8007aea:	f8c8 7000 	str.w	r7, [r8]
 8007aee:	e00f      	b.n	8007b10 <_malloc_r+0xa8>
 8007af0:	6822      	ldr	r2, [r4, #0]
 8007af2:	1b52      	subs	r2, r2, r5
 8007af4:	d420      	bmi.n	8007b38 <_malloc_r+0xd0>
 8007af6:	2a0b      	cmp	r2, #11
 8007af8:	d917      	bls.n	8007b2a <_malloc_r+0xc2>
 8007afa:	1961      	adds	r1, r4, r5
 8007afc:	42a3      	cmp	r3, r4
 8007afe:	6025      	str	r5, [r4, #0]
 8007b00:	bf18      	it	ne
 8007b02:	6059      	strne	r1, [r3, #4]
 8007b04:	6863      	ldr	r3, [r4, #4]
 8007b06:	bf08      	it	eq
 8007b08:	f8c8 1000 	streq.w	r1, [r8]
 8007b0c:	5162      	str	r2, [r4, r5]
 8007b0e:	604b      	str	r3, [r1, #4]
 8007b10:	4630      	mov	r0, r6
 8007b12:	f000 fa69 	bl	8007fe8 <__malloc_unlock>
 8007b16:	f104 000b 	add.w	r0, r4, #11
 8007b1a:	1d23      	adds	r3, r4, #4
 8007b1c:	f020 0007 	bic.w	r0, r0, #7
 8007b20:	1ac2      	subs	r2, r0, r3
 8007b22:	bf1c      	itt	ne
 8007b24:	1a1b      	subne	r3, r3, r0
 8007b26:	50a3      	strne	r3, [r4, r2]
 8007b28:	e7af      	b.n	8007a8a <_malloc_r+0x22>
 8007b2a:	6862      	ldr	r2, [r4, #4]
 8007b2c:	42a3      	cmp	r3, r4
 8007b2e:	bf0c      	ite	eq
 8007b30:	f8c8 2000 	streq.w	r2, [r8]
 8007b34:	605a      	strne	r2, [r3, #4]
 8007b36:	e7eb      	b.n	8007b10 <_malloc_r+0xa8>
 8007b38:	4623      	mov	r3, r4
 8007b3a:	6864      	ldr	r4, [r4, #4]
 8007b3c:	e7ae      	b.n	8007a9c <_malloc_r+0x34>
 8007b3e:	463c      	mov	r4, r7
 8007b40:	687f      	ldr	r7, [r7, #4]
 8007b42:	e7b6      	b.n	8007ab2 <_malloc_r+0x4a>
 8007b44:	461a      	mov	r2, r3
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	42a3      	cmp	r3, r4
 8007b4a:	d1fb      	bne.n	8007b44 <_malloc_r+0xdc>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	6053      	str	r3, [r2, #4]
 8007b50:	e7de      	b.n	8007b10 <_malloc_r+0xa8>
 8007b52:	230c      	movs	r3, #12
 8007b54:	6033      	str	r3, [r6, #0]
 8007b56:	4630      	mov	r0, r6
 8007b58:	f000 fa46 	bl	8007fe8 <__malloc_unlock>
 8007b5c:	e794      	b.n	8007a88 <_malloc_r+0x20>
 8007b5e:	6005      	str	r5, [r0, #0]
 8007b60:	e7d6      	b.n	8007b10 <_malloc_r+0xa8>
 8007b62:	bf00      	nop
 8007b64:	24000f80 	.word	0x24000f80

08007b68 <_printf_common>:
 8007b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6c:	4616      	mov	r6, r2
 8007b6e:	4698      	mov	r8, r3
 8007b70:	688a      	ldr	r2, [r1, #8]
 8007b72:	690b      	ldr	r3, [r1, #16]
 8007b74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	bfb8      	it	lt
 8007b7c:	4613      	movlt	r3, r2
 8007b7e:	6033      	str	r3, [r6, #0]
 8007b80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b84:	4607      	mov	r7, r0
 8007b86:	460c      	mov	r4, r1
 8007b88:	b10a      	cbz	r2, 8007b8e <_printf_common+0x26>
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	6033      	str	r3, [r6, #0]
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	0699      	lsls	r1, r3, #26
 8007b92:	bf42      	ittt	mi
 8007b94:	6833      	ldrmi	r3, [r6, #0]
 8007b96:	3302      	addmi	r3, #2
 8007b98:	6033      	strmi	r3, [r6, #0]
 8007b9a:	6825      	ldr	r5, [r4, #0]
 8007b9c:	f015 0506 	ands.w	r5, r5, #6
 8007ba0:	d106      	bne.n	8007bb0 <_printf_common+0x48>
 8007ba2:	f104 0a19 	add.w	sl, r4, #25
 8007ba6:	68e3      	ldr	r3, [r4, #12]
 8007ba8:	6832      	ldr	r2, [r6, #0]
 8007baa:	1a9b      	subs	r3, r3, r2
 8007bac:	42ab      	cmp	r3, r5
 8007bae:	dc26      	bgt.n	8007bfe <_printf_common+0x96>
 8007bb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007bb4:	6822      	ldr	r2, [r4, #0]
 8007bb6:	3b00      	subs	r3, #0
 8007bb8:	bf18      	it	ne
 8007bba:	2301      	movne	r3, #1
 8007bbc:	0692      	lsls	r2, r2, #26
 8007bbe:	d42b      	bmi.n	8007c18 <_printf_common+0xb0>
 8007bc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bc4:	4641      	mov	r1, r8
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	47c8      	blx	r9
 8007bca:	3001      	adds	r0, #1
 8007bcc:	d01e      	beq.n	8007c0c <_printf_common+0xa4>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	6922      	ldr	r2, [r4, #16]
 8007bd2:	f003 0306 	and.w	r3, r3, #6
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	bf02      	ittt	eq
 8007bda:	68e5      	ldreq	r5, [r4, #12]
 8007bdc:	6833      	ldreq	r3, [r6, #0]
 8007bde:	1aed      	subeq	r5, r5, r3
 8007be0:	68a3      	ldr	r3, [r4, #8]
 8007be2:	bf0c      	ite	eq
 8007be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007be8:	2500      	movne	r5, #0
 8007bea:	4293      	cmp	r3, r2
 8007bec:	bfc4      	itt	gt
 8007bee:	1a9b      	subgt	r3, r3, r2
 8007bf0:	18ed      	addgt	r5, r5, r3
 8007bf2:	2600      	movs	r6, #0
 8007bf4:	341a      	adds	r4, #26
 8007bf6:	42b5      	cmp	r5, r6
 8007bf8:	d11a      	bne.n	8007c30 <_printf_common+0xc8>
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	e008      	b.n	8007c10 <_printf_common+0xa8>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	4652      	mov	r2, sl
 8007c02:	4641      	mov	r1, r8
 8007c04:	4638      	mov	r0, r7
 8007c06:	47c8      	blx	r9
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d103      	bne.n	8007c14 <_printf_common+0xac>
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c14:	3501      	adds	r5, #1
 8007c16:	e7c6      	b.n	8007ba6 <_printf_common+0x3e>
 8007c18:	18e1      	adds	r1, r4, r3
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	2030      	movs	r0, #48	@ 0x30
 8007c1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c22:	4422      	add	r2, r4
 8007c24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c2c:	3302      	adds	r3, #2
 8007c2e:	e7c7      	b.n	8007bc0 <_printf_common+0x58>
 8007c30:	2301      	movs	r3, #1
 8007c32:	4622      	mov	r2, r4
 8007c34:	4641      	mov	r1, r8
 8007c36:	4638      	mov	r0, r7
 8007c38:	47c8      	blx	r9
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	d0e6      	beq.n	8007c0c <_printf_common+0xa4>
 8007c3e:	3601      	adds	r6, #1
 8007c40:	e7d9      	b.n	8007bf6 <_printf_common+0x8e>
	...

08007c44 <_printf_i>:
 8007c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c48:	7e0f      	ldrb	r7, [r1, #24]
 8007c4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c4c:	2f78      	cmp	r7, #120	@ 0x78
 8007c4e:	4691      	mov	r9, r2
 8007c50:	4680      	mov	r8, r0
 8007c52:	460c      	mov	r4, r1
 8007c54:	469a      	mov	sl, r3
 8007c56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c5a:	d807      	bhi.n	8007c6c <_printf_i+0x28>
 8007c5c:	2f62      	cmp	r7, #98	@ 0x62
 8007c5e:	d80a      	bhi.n	8007c76 <_printf_i+0x32>
 8007c60:	2f00      	cmp	r7, #0
 8007c62:	f000 80d2 	beq.w	8007e0a <_printf_i+0x1c6>
 8007c66:	2f58      	cmp	r7, #88	@ 0x58
 8007c68:	f000 80b9 	beq.w	8007dde <_printf_i+0x19a>
 8007c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c74:	e03a      	b.n	8007cec <_printf_i+0xa8>
 8007c76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c7a:	2b15      	cmp	r3, #21
 8007c7c:	d8f6      	bhi.n	8007c6c <_printf_i+0x28>
 8007c7e:	a101      	add	r1, pc, #4	@ (adr r1, 8007c84 <_printf_i+0x40>)
 8007c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c84:	08007cdd 	.word	0x08007cdd
 8007c88:	08007cf1 	.word	0x08007cf1
 8007c8c:	08007c6d 	.word	0x08007c6d
 8007c90:	08007c6d 	.word	0x08007c6d
 8007c94:	08007c6d 	.word	0x08007c6d
 8007c98:	08007c6d 	.word	0x08007c6d
 8007c9c:	08007cf1 	.word	0x08007cf1
 8007ca0:	08007c6d 	.word	0x08007c6d
 8007ca4:	08007c6d 	.word	0x08007c6d
 8007ca8:	08007c6d 	.word	0x08007c6d
 8007cac:	08007c6d 	.word	0x08007c6d
 8007cb0:	08007df1 	.word	0x08007df1
 8007cb4:	08007d1b 	.word	0x08007d1b
 8007cb8:	08007dab 	.word	0x08007dab
 8007cbc:	08007c6d 	.word	0x08007c6d
 8007cc0:	08007c6d 	.word	0x08007c6d
 8007cc4:	08007e13 	.word	0x08007e13
 8007cc8:	08007c6d 	.word	0x08007c6d
 8007ccc:	08007d1b 	.word	0x08007d1b
 8007cd0:	08007c6d 	.word	0x08007c6d
 8007cd4:	08007c6d 	.word	0x08007c6d
 8007cd8:	08007db3 	.word	0x08007db3
 8007cdc:	6833      	ldr	r3, [r6, #0]
 8007cde:	1d1a      	adds	r2, r3, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6032      	str	r2, [r6, #0]
 8007ce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007cec:	2301      	movs	r3, #1
 8007cee:	e09d      	b.n	8007e2c <_printf_i+0x1e8>
 8007cf0:	6833      	ldr	r3, [r6, #0]
 8007cf2:	6820      	ldr	r0, [r4, #0]
 8007cf4:	1d19      	adds	r1, r3, #4
 8007cf6:	6031      	str	r1, [r6, #0]
 8007cf8:	0606      	lsls	r6, r0, #24
 8007cfa:	d501      	bpl.n	8007d00 <_printf_i+0xbc>
 8007cfc:	681d      	ldr	r5, [r3, #0]
 8007cfe:	e003      	b.n	8007d08 <_printf_i+0xc4>
 8007d00:	0645      	lsls	r5, r0, #25
 8007d02:	d5fb      	bpl.n	8007cfc <_printf_i+0xb8>
 8007d04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d08:	2d00      	cmp	r5, #0
 8007d0a:	da03      	bge.n	8007d14 <_printf_i+0xd0>
 8007d0c:	232d      	movs	r3, #45	@ 0x2d
 8007d0e:	426d      	negs	r5, r5
 8007d10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d14:	4859      	ldr	r0, [pc, #356]	@ (8007e7c <_printf_i+0x238>)
 8007d16:	230a      	movs	r3, #10
 8007d18:	e011      	b.n	8007d3e <_printf_i+0xfa>
 8007d1a:	6821      	ldr	r1, [r4, #0]
 8007d1c:	6833      	ldr	r3, [r6, #0]
 8007d1e:	0608      	lsls	r0, r1, #24
 8007d20:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d24:	d402      	bmi.n	8007d2c <_printf_i+0xe8>
 8007d26:	0649      	lsls	r1, r1, #25
 8007d28:	bf48      	it	mi
 8007d2a:	b2ad      	uxthmi	r5, r5
 8007d2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d2e:	4853      	ldr	r0, [pc, #332]	@ (8007e7c <_printf_i+0x238>)
 8007d30:	6033      	str	r3, [r6, #0]
 8007d32:	bf14      	ite	ne
 8007d34:	230a      	movne	r3, #10
 8007d36:	2308      	moveq	r3, #8
 8007d38:	2100      	movs	r1, #0
 8007d3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d3e:	6866      	ldr	r6, [r4, #4]
 8007d40:	60a6      	str	r6, [r4, #8]
 8007d42:	2e00      	cmp	r6, #0
 8007d44:	bfa2      	ittt	ge
 8007d46:	6821      	ldrge	r1, [r4, #0]
 8007d48:	f021 0104 	bicge.w	r1, r1, #4
 8007d4c:	6021      	strge	r1, [r4, #0]
 8007d4e:	b90d      	cbnz	r5, 8007d54 <_printf_i+0x110>
 8007d50:	2e00      	cmp	r6, #0
 8007d52:	d04b      	beq.n	8007dec <_printf_i+0x1a8>
 8007d54:	4616      	mov	r6, r2
 8007d56:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d5a:	fb03 5711 	mls	r7, r3, r1, r5
 8007d5e:	5dc7      	ldrb	r7, [r0, r7]
 8007d60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d64:	462f      	mov	r7, r5
 8007d66:	42bb      	cmp	r3, r7
 8007d68:	460d      	mov	r5, r1
 8007d6a:	d9f4      	bls.n	8007d56 <_printf_i+0x112>
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	d10b      	bne.n	8007d88 <_printf_i+0x144>
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	07df      	lsls	r7, r3, #31
 8007d74:	d508      	bpl.n	8007d88 <_printf_i+0x144>
 8007d76:	6923      	ldr	r3, [r4, #16]
 8007d78:	6861      	ldr	r1, [r4, #4]
 8007d7a:	4299      	cmp	r1, r3
 8007d7c:	bfde      	ittt	le
 8007d7e:	2330      	movle	r3, #48	@ 0x30
 8007d80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d84:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007d88:	1b92      	subs	r2, r2, r6
 8007d8a:	6122      	str	r2, [r4, #16]
 8007d8c:	f8cd a000 	str.w	sl, [sp]
 8007d90:	464b      	mov	r3, r9
 8007d92:	aa03      	add	r2, sp, #12
 8007d94:	4621      	mov	r1, r4
 8007d96:	4640      	mov	r0, r8
 8007d98:	f7ff fee6 	bl	8007b68 <_printf_common>
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d14a      	bne.n	8007e36 <_printf_i+0x1f2>
 8007da0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007da4:	b004      	add	sp, #16
 8007da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	f043 0320 	orr.w	r3, r3, #32
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	4833      	ldr	r0, [pc, #204]	@ (8007e80 <_printf_i+0x23c>)
 8007db4:	2778      	movs	r7, #120	@ 0x78
 8007db6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	6831      	ldr	r1, [r6, #0]
 8007dbe:	061f      	lsls	r7, r3, #24
 8007dc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007dc4:	d402      	bmi.n	8007dcc <_printf_i+0x188>
 8007dc6:	065f      	lsls	r7, r3, #25
 8007dc8:	bf48      	it	mi
 8007dca:	b2ad      	uxthmi	r5, r5
 8007dcc:	6031      	str	r1, [r6, #0]
 8007dce:	07d9      	lsls	r1, r3, #31
 8007dd0:	bf44      	itt	mi
 8007dd2:	f043 0320 	orrmi.w	r3, r3, #32
 8007dd6:	6023      	strmi	r3, [r4, #0]
 8007dd8:	b11d      	cbz	r5, 8007de2 <_printf_i+0x19e>
 8007dda:	2310      	movs	r3, #16
 8007ddc:	e7ac      	b.n	8007d38 <_printf_i+0xf4>
 8007dde:	4827      	ldr	r0, [pc, #156]	@ (8007e7c <_printf_i+0x238>)
 8007de0:	e7e9      	b.n	8007db6 <_printf_i+0x172>
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	f023 0320 	bic.w	r3, r3, #32
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	e7f6      	b.n	8007dda <_printf_i+0x196>
 8007dec:	4616      	mov	r6, r2
 8007dee:	e7bd      	b.n	8007d6c <_printf_i+0x128>
 8007df0:	6833      	ldr	r3, [r6, #0]
 8007df2:	6825      	ldr	r5, [r4, #0]
 8007df4:	6961      	ldr	r1, [r4, #20]
 8007df6:	1d18      	adds	r0, r3, #4
 8007df8:	6030      	str	r0, [r6, #0]
 8007dfa:	062e      	lsls	r6, r5, #24
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	d501      	bpl.n	8007e04 <_printf_i+0x1c0>
 8007e00:	6019      	str	r1, [r3, #0]
 8007e02:	e002      	b.n	8007e0a <_printf_i+0x1c6>
 8007e04:	0668      	lsls	r0, r5, #25
 8007e06:	d5fb      	bpl.n	8007e00 <_printf_i+0x1bc>
 8007e08:	8019      	strh	r1, [r3, #0]
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	6123      	str	r3, [r4, #16]
 8007e0e:	4616      	mov	r6, r2
 8007e10:	e7bc      	b.n	8007d8c <_printf_i+0x148>
 8007e12:	6833      	ldr	r3, [r6, #0]
 8007e14:	1d1a      	adds	r2, r3, #4
 8007e16:	6032      	str	r2, [r6, #0]
 8007e18:	681e      	ldr	r6, [r3, #0]
 8007e1a:	6862      	ldr	r2, [r4, #4]
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f7f8 fa5e 	bl	80002e0 <memchr>
 8007e24:	b108      	cbz	r0, 8007e2a <_printf_i+0x1e6>
 8007e26:	1b80      	subs	r0, r0, r6
 8007e28:	6060      	str	r0, [r4, #4]
 8007e2a:	6863      	ldr	r3, [r4, #4]
 8007e2c:	6123      	str	r3, [r4, #16]
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e34:	e7aa      	b.n	8007d8c <_printf_i+0x148>
 8007e36:	6923      	ldr	r3, [r4, #16]
 8007e38:	4632      	mov	r2, r6
 8007e3a:	4649      	mov	r1, r9
 8007e3c:	4640      	mov	r0, r8
 8007e3e:	47d0      	blx	sl
 8007e40:	3001      	adds	r0, #1
 8007e42:	d0ad      	beq.n	8007da0 <_printf_i+0x15c>
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	079b      	lsls	r3, r3, #30
 8007e48:	d413      	bmi.n	8007e72 <_printf_i+0x22e>
 8007e4a:	68e0      	ldr	r0, [r4, #12]
 8007e4c:	9b03      	ldr	r3, [sp, #12]
 8007e4e:	4298      	cmp	r0, r3
 8007e50:	bfb8      	it	lt
 8007e52:	4618      	movlt	r0, r3
 8007e54:	e7a6      	b.n	8007da4 <_printf_i+0x160>
 8007e56:	2301      	movs	r3, #1
 8007e58:	4632      	mov	r2, r6
 8007e5a:	4649      	mov	r1, r9
 8007e5c:	4640      	mov	r0, r8
 8007e5e:	47d0      	blx	sl
 8007e60:	3001      	adds	r0, #1
 8007e62:	d09d      	beq.n	8007da0 <_printf_i+0x15c>
 8007e64:	3501      	adds	r5, #1
 8007e66:	68e3      	ldr	r3, [r4, #12]
 8007e68:	9903      	ldr	r1, [sp, #12]
 8007e6a:	1a5b      	subs	r3, r3, r1
 8007e6c:	42ab      	cmp	r3, r5
 8007e6e:	dcf2      	bgt.n	8007e56 <_printf_i+0x212>
 8007e70:	e7eb      	b.n	8007e4a <_printf_i+0x206>
 8007e72:	2500      	movs	r5, #0
 8007e74:	f104 0619 	add.w	r6, r4, #25
 8007e78:	e7f5      	b.n	8007e66 <_printf_i+0x222>
 8007e7a:	bf00      	nop
 8007e7c:	0801da34 	.word	0x0801da34
 8007e80:	0801da45 	.word	0x0801da45

08007e84 <__sflush_r>:
 8007e84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8c:	0716      	lsls	r6, r2, #28
 8007e8e:	4605      	mov	r5, r0
 8007e90:	460c      	mov	r4, r1
 8007e92:	d454      	bmi.n	8007f3e <__sflush_r+0xba>
 8007e94:	684b      	ldr	r3, [r1, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	dc02      	bgt.n	8007ea0 <__sflush_r+0x1c>
 8007e9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	dd48      	ble.n	8007f32 <__sflush_r+0xae>
 8007ea0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ea2:	2e00      	cmp	r6, #0
 8007ea4:	d045      	beq.n	8007f32 <__sflush_r+0xae>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007eac:	682f      	ldr	r7, [r5, #0]
 8007eae:	6a21      	ldr	r1, [r4, #32]
 8007eb0:	602b      	str	r3, [r5, #0]
 8007eb2:	d030      	beq.n	8007f16 <__sflush_r+0x92>
 8007eb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	0759      	lsls	r1, r3, #29
 8007eba:	d505      	bpl.n	8007ec8 <__sflush_r+0x44>
 8007ebc:	6863      	ldr	r3, [r4, #4]
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ec2:	b10b      	cbz	r3, 8007ec8 <__sflush_r+0x44>
 8007ec4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ec6:	1ad2      	subs	r2, r2, r3
 8007ec8:	2300      	movs	r3, #0
 8007eca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ecc:	6a21      	ldr	r1, [r4, #32]
 8007ece:	4628      	mov	r0, r5
 8007ed0:	47b0      	blx	r6
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	d106      	bne.n	8007ee6 <__sflush_r+0x62>
 8007ed8:	6829      	ldr	r1, [r5, #0]
 8007eda:	291d      	cmp	r1, #29
 8007edc:	d82b      	bhi.n	8007f36 <__sflush_r+0xb2>
 8007ede:	4a2a      	ldr	r2, [pc, #168]	@ (8007f88 <__sflush_r+0x104>)
 8007ee0:	410a      	asrs	r2, r1
 8007ee2:	07d6      	lsls	r6, r2, #31
 8007ee4:	d427      	bmi.n	8007f36 <__sflush_r+0xb2>
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	6062      	str	r2, [r4, #4]
 8007eea:	04d9      	lsls	r1, r3, #19
 8007eec:	6922      	ldr	r2, [r4, #16]
 8007eee:	6022      	str	r2, [r4, #0]
 8007ef0:	d504      	bpl.n	8007efc <__sflush_r+0x78>
 8007ef2:	1c42      	adds	r2, r0, #1
 8007ef4:	d101      	bne.n	8007efa <__sflush_r+0x76>
 8007ef6:	682b      	ldr	r3, [r5, #0]
 8007ef8:	b903      	cbnz	r3, 8007efc <__sflush_r+0x78>
 8007efa:	6560      	str	r0, [r4, #84]	@ 0x54
 8007efc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007efe:	602f      	str	r7, [r5, #0]
 8007f00:	b1b9      	cbz	r1, 8007f32 <__sflush_r+0xae>
 8007f02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f06:	4299      	cmp	r1, r3
 8007f08:	d002      	beq.n	8007f10 <__sflush_r+0x8c>
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f000 ffea 	bl	8008ee4 <_free_r>
 8007f10:	2300      	movs	r3, #0
 8007f12:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f14:	e00d      	b.n	8007f32 <__sflush_r+0xae>
 8007f16:	2301      	movs	r3, #1
 8007f18:	4628      	mov	r0, r5
 8007f1a:	47b0      	blx	r6
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	1c50      	adds	r0, r2, #1
 8007f20:	d1c9      	bne.n	8007eb6 <__sflush_r+0x32>
 8007f22:	682b      	ldr	r3, [r5, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d0c6      	beq.n	8007eb6 <__sflush_r+0x32>
 8007f28:	2b1d      	cmp	r3, #29
 8007f2a:	d001      	beq.n	8007f30 <__sflush_r+0xac>
 8007f2c:	2b16      	cmp	r3, #22
 8007f2e:	d11e      	bne.n	8007f6e <__sflush_r+0xea>
 8007f30:	602f      	str	r7, [r5, #0]
 8007f32:	2000      	movs	r0, #0
 8007f34:	e022      	b.n	8007f7c <__sflush_r+0xf8>
 8007f36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f3a:	b21b      	sxth	r3, r3
 8007f3c:	e01b      	b.n	8007f76 <__sflush_r+0xf2>
 8007f3e:	690f      	ldr	r7, [r1, #16]
 8007f40:	2f00      	cmp	r7, #0
 8007f42:	d0f6      	beq.n	8007f32 <__sflush_r+0xae>
 8007f44:	0793      	lsls	r3, r2, #30
 8007f46:	680e      	ldr	r6, [r1, #0]
 8007f48:	bf08      	it	eq
 8007f4a:	694b      	ldreq	r3, [r1, #20]
 8007f4c:	600f      	str	r7, [r1, #0]
 8007f4e:	bf18      	it	ne
 8007f50:	2300      	movne	r3, #0
 8007f52:	eba6 0807 	sub.w	r8, r6, r7
 8007f56:	608b      	str	r3, [r1, #8]
 8007f58:	f1b8 0f00 	cmp.w	r8, #0
 8007f5c:	dde9      	ble.n	8007f32 <__sflush_r+0xae>
 8007f5e:	6a21      	ldr	r1, [r4, #32]
 8007f60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f62:	4643      	mov	r3, r8
 8007f64:	463a      	mov	r2, r7
 8007f66:	4628      	mov	r0, r5
 8007f68:	47b0      	blx	r6
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	dc08      	bgt.n	8007f80 <__sflush_r+0xfc>
 8007f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f76:	81a3      	strh	r3, [r4, #12]
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f80:	4407      	add	r7, r0
 8007f82:	eba8 0800 	sub.w	r8, r8, r0
 8007f86:	e7e7      	b.n	8007f58 <__sflush_r+0xd4>
 8007f88:	dfbffffe 	.word	0xdfbffffe

08007f8c <_fflush_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	690b      	ldr	r3, [r1, #16]
 8007f90:	4605      	mov	r5, r0
 8007f92:	460c      	mov	r4, r1
 8007f94:	b913      	cbnz	r3, 8007f9c <_fflush_r+0x10>
 8007f96:	2500      	movs	r5, #0
 8007f98:	4628      	mov	r0, r5
 8007f9a:	bd38      	pop	{r3, r4, r5, pc}
 8007f9c:	b118      	cbz	r0, 8007fa6 <_fflush_r+0x1a>
 8007f9e:	6a03      	ldr	r3, [r0, #32]
 8007fa0:	b90b      	cbnz	r3, 8007fa6 <_fflush_r+0x1a>
 8007fa2:	f000 f8d3 	bl	800814c <__sinit>
 8007fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0f3      	beq.n	8007f96 <_fflush_r+0xa>
 8007fae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fb0:	07d0      	lsls	r0, r2, #31
 8007fb2:	d404      	bmi.n	8007fbe <_fflush_r+0x32>
 8007fb4:	0599      	lsls	r1, r3, #22
 8007fb6:	d402      	bmi.n	8007fbe <_fflush_r+0x32>
 8007fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fba:	f000 f984 	bl	80082c6 <__retarget_lock_acquire_recursive>
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	4621      	mov	r1, r4
 8007fc2:	f7ff ff5f 	bl	8007e84 <__sflush_r>
 8007fc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fc8:	07da      	lsls	r2, r3, #31
 8007fca:	4605      	mov	r5, r0
 8007fcc:	d4e4      	bmi.n	8007f98 <_fflush_r+0xc>
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	059b      	lsls	r3, r3, #22
 8007fd2:	d4e1      	bmi.n	8007f98 <_fflush_r+0xc>
 8007fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fd6:	f000 f977 	bl	80082c8 <__retarget_lock_release_recursive>
 8007fda:	e7dd      	b.n	8007f98 <_fflush_r+0xc>

08007fdc <__malloc_lock>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	@ (8007fe4 <__malloc_lock+0x8>)
 8007fde:	f000 b972 	b.w	80082c6 <__retarget_lock_acquire_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	240010c0 	.word	0x240010c0

08007fe8 <__malloc_unlock>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	@ (8007ff0 <__malloc_unlock+0x8>)
 8007fea:	f000 b96d 	b.w	80082c8 <__retarget_lock_release_recursive>
 8007fee:	bf00      	nop
 8007ff0:	240010c0 	.word	0x240010c0

08007ff4 <siprintf>:
 8007ff4:	b40e      	push	{r1, r2, r3}
 8007ff6:	b500      	push	{lr}
 8007ff8:	b09c      	sub	sp, #112	@ 0x70
 8007ffa:	ab1d      	add	r3, sp, #116	@ 0x74
 8007ffc:	9002      	str	r0, [sp, #8]
 8007ffe:	9006      	str	r0, [sp, #24]
 8008000:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008004:	4809      	ldr	r0, [pc, #36]	@ (800802c <siprintf+0x38>)
 8008006:	9107      	str	r1, [sp, #28]
 8008008:	9104      	str	r1, [sp, #16]
 800800a:	4909      	ldr	r1, [pc, #36]	@ (8008030 <siprintf+0x3c>)
 800800c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008010:	9105      	str	r1, [sp, #20]
 8008012:	6800      	ldr	r0, [r0, #0]
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	a902      	add	r1, sp, #8
 8008018:	f001 f80a 	bl	8009030 <_svfiprintf_r>
 800801c:	9b02      	ldr	r3, [sp, #8]
 800801e:	2200      	movs	r2, #0
 8008020:	701a      	strb	r2, [r3, #0]
 8008022:	b01c      	add	sp, #112	@ 0x70
 8008024:	f85d eb04 	ldr.w	lr, [sp], #4
 8008028:	b003      	add	sp, #12
 800802a:	4770      	bx	lr
 800802c:	24000660 	.word	0x24000660
 8008030:	ffff0208 	.word	0xffff0208

08008034 <std>:
 8008034:	2300      	movs	r3, #0
 8008036:	b510      	push	{r4, lr}
 8008038:	4604      	mov	r4, r0
 800803a:	e9c0 3300 	strd	r3, r3, [r0]
 800803e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008042:	6083      	str	r3, [r0, #8]
 8008044:	8181      	strh	r1, [r0, #12]
 8008046:	6643      	str	r3, [r0, #100]	@ 0x64
 8008048:	81c2      	strh	r2, [r0, #14]
 800804a:	6183      	str	r3, [r0, #24]
 800804c:	4619      	mov	r1, r3
 800804e:	2208      	movs	r2, #8
 8008050:	305c      	adds	r0, #92	@ 0x5c
 8008052:	f000 f8f1 	bl	8008238 <memset>
 8008056:	4b0d      	ldr	r3, [pc, #52]	@ (800808c <std+0x58>)
 8008058:	6263      	str	r3, [r4, #36]	@ 0x24
 800805a:	4b0d      	ldr	r3, [pc, #52]	@ (8008090 <std+0x5c>)
 800805c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800805e:	4b0d      	ldr	r3, [pc, #52]	@ (8008094 <std+0x60>)
 8008060:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008062:	4b0d      	ldr	r3, [pc, #52]	@ (8008098 <std+0x64>)
 8008064:	6323      	str	r3, [r4, #48]	@ 0x30
 8008066:	4b0d      	ldr	r3, [pc, #52]	@ (800809c <std+0x68>)
 8008068:	6224      	str	r4, [r4, #32]
 800806a:	429c      	cmp	r4, r3
 800806c:	d006      	beq.n	800807c <std+0x48>
 800806e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008072:	4294      	cmp	r4, r2
 8008074:	d002      	beq.n	800807c <std+0x48>
 8008076:	33d0      	adds	r3, #208	@ 0xd0
 8008078:	429c      	cmp	r4, r3
 800807a:	d105      	bne.n	8008088 <std+0x54>
 800807c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008084:	f000 b91e 	b.w	80082c4 <__retarget_lock_init_recursive>
 8008088:	bd10      	pop	{r4, pc}
 800808a:	bf00      	nop
 800808c:	08009bc1 	.word	0x08009bc1
 8008090:	08009be3 	.word	0x08009be3
 8008094:	08009c1b 	.word	0x08009c1b
 8008098:	08009c3f 	.word	0x08009c3f
 800809c:	24000f84 	.word	0x24000f84

080080a0 <stdio_exit_handler>:
 80080a0:	4a02      	ldr	r2, [pc, #8]	@ (80080ac <stdio_exit_handler+0xc>)
 80080a2:	4903      	ldr	r1, [pc, #12]	@ (80080b0 <stdio_exit_handler+0x10>)
 80080a4:	4803      	ldr	r0, [pc, #12]	@ (80080b4 <stdio_exit_handler+0x14>)
 80080a6:	f000 b897 	b.w	80081d8 <_fwalk_sglue>
 80080aa:	bf00      	nop
 80080ac:	24000654 	.word	0x24000654
 80080b0:	08007f8d 	.word	0x08007f8d
 80080b4:	24000664 	.word	0x24000664

080080b8 <cleanup_stdio>:
 80080b8:	6841      	ldr	r1, [r0, #4]
 80080ba:	4b0c      	ldr	r3, [pc, #48]	@ (80080ec <cleanup_stdio+0x34>)
 80080bc:	4299      	cmp	r1, r3
 80080be:	b510      	push	{r4, lr}
 80080c0:	4604      	mov	r4, r0
 80080c2:	d001      	beq.n	80080c8 <cleanup_stdio+0x10>
 80080c4:	f7ff ff62 	bl	8007f8c <_fflush_r>
 80080c8:	68a1      	ldr	r1, [r4, #8]
 80080ca:	4b09      	ldr	r3, [pc, #36]	@ (80080f0 <cleanup_stdio+0x38>)
 80080cc:	4299      	cmp	r1, r3
 80080ce:	d002      	beq.n	80080d6 <cleanup_stdio+0x1e>
 80080d0:	4620      	mov	r0, r4
 80080d2:	f7ff ff5b 	bl	8007f8c <_fflush_r>
 80080d6:	68e1      	ldr	r1, [r4, #12]
 80080d8:	4b06      	ldr	r3, [pc, #24]	@ (80080f4 <cleanup_stdio+0x3c>)
 80080da:	4299      	cmp	r1, r3
 80080dc:	d004      	beq.n	80080e8 <cleanup_stdio+0x30>
 80080de:	4620      	mov	r0, r4
 80080e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e4:	f7ff bf52 	b.w	8007f8c <_fflush_r>
 80080e8:	bd10      	pop	{r4, pc}
 80080ea:	bf00      	nop
 80080ec:	24000f84 	.word	0x24000f84
 80080f0:	24000fec 	.word	0x24000fec
 80080f4:	24001054 	.word	0x24001054

080080f8 <global_stdio_init.part.0>:
 80080f8:	b510      	push	{r4, lr}
 80080fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008128 <global_stdio_init.part.0+0x30>)
 80080fc:	4c0b      	ldr	r4, [pc, #44]	@ (800812c <global_stdio_init.part.0+0x34>)
 80080fe:	4a0c      	ldr	r2, [pc, #48]	@ (8008130 <global_stdio_init.part.0+0x38>)
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	4620      	mov	r0, r4
 8008104:	2200      	movs	r2, #0
 8008106:	2104      	movs	r1, #4
 8008108:	f7ff ff94 	bl	8008034 <std>
 800810c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008110:	2201      	movs	r2, #1
 8008112:	2109      	movs	r1, #9
 8008114:	f7ff ff8e 	bl	8008034 <std>
 8008118:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800811c:	2202      	movs	r2, #2
 800811e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008122:	2112      	movs	r1, #18
 8008124:	f7ff bf86 	b.w	8008034 <std>
 8008128:	240010bc 	.word	0x240010bc
 800812c:	24000f84 	.word	0x24000f84
 8008130:	080080a1 	.word	0x080080a1

08008134 <__sfp_lock_acquire>:
 8008134:	4801      	ldr	r0, [pc, #4]	@ (800813c <__sfp_lock_acquire+0x8>)
 8008136:	f000 b8c6 	b.w	80082c6 <__retarget_lock_acquire_recursive>
 800813a:	bf00      	nop
 800813c:	240010c1 	.word	0x240010c1

08008140 <__sfp_lock_release>:
 8008140:	4801      	ldr	r0, [pc, #4]	@ (8008148 <__sfp_lock_release+0x8>)
 8008142:	f000 b8c1 	b.w	80082c8 <__retarget_lock_release_recursive>
 8008146:	bf00      	nop
 8008148:	240010c1 	.word	0x240010c1

0800814c <__sinit>:
 800814c:	b510      	push	{r4, lr}
 800814e:	4604      	mov	r4, r0
 8008150:	f7ff fff0 	bl	8008134 <__sfp_lock_acquire>
 8008154:	6a23      	ldr	r3, [r4, #32]
 8008156:	b11b      	cbz	r3, 8008160 <__sinit+0x14>
 8008158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800815c:	f7ff bff0 	b.w	8008140 <__sfp_lock_release>
 8008160:	4b04      	ldr	r3, [pc, #16]	@ (8008174 <__sinit+0x28>)
 8008162:	6223      	str	r3, [r4, #32]
 8008164:	4b04      	ldr	r3, [pc, #16]	@ (8008178 <__sinit+0x2c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1f5      	bne.n	8008158 <__sinit+0xc>
 800816c:	f7ff ffc4 	bl	80080f8 <global_stdio_init.part.0>
 8008170:	e7f2      	b.n	8008158 <__sinit+0xc>
 8008172:	bf00      	nop
 8008174:	080080b9 	.word	0x080080b9
 8008178:	240010bc 	.word	0x240010bc

0800817c <_realloc_r>:
 800817c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008180:	4680      	mov	r8, r0
 8008182:	4615      	mov	r5, r2
 8008184:	460c      	mov	r4, r1
 8008186:	b921      	cbnz	r1, 8008192 <_realloc_r+0x16>
 8008188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800818c:	4611      	mov	r1, r2
 800818e:	f7ff bc6b 	b.w	8007a68 <_malloc_r>
 8008192:	b92a      	cbnz	r2, 80081a0 <_realloc_r+0x24>
 8008194:	f000 fea6 	bl	8008ee4 <_free_r>
 8008198:	2400      	movs	r4, #0
 800819a:	4620      	mov	r0, r4
 800819c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a0:	f001 fd06 	bl	8009bb0 <_malloc_usable_size_r>
 80081a4:	4285      	cmp	r5, r0
 80081a6:	4606      	mov	r6, r0
 80081a8:	d802      	bhi.n	80081b0 <_realloc_r+0x34>
 80081aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80081ae:	d8f4      	bhi.n	800819a <_realloc_r+0x1e>
 80081b0:	4629      	mov	r1, r5
 80081b2:	4640      	mov	r0, r8
 80081b4:	f7ff fc58 	bl	8007a68 <_malloc_r>
 80081b8:	4607      	mov	r7, r0
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d0ec      	beq.n	8008198 <_realloc_r+0x1c>
 80081be:	42b5      	cmp	r5, r6
 80081c0:	462a      	mov	r2, r5
 80081c2:	4621      	mov	r1, r4
 80081c4:	bf28      	it	cs
 80081c6:	4632      	movcs	r2, r6
 80081c8:	f000 f87f 	bl	80082ca <memcpy>
 80081cc:	4621      	mov	r1, r4
 80081ce:	4640      	mov	r0, r8
 80081d0:	f000 fe88 	bl	8008ee4 <_free_r>
 80081d4:	463c      	mov	r4, r7
 80081d6:	e7e0      	b.n	800819a <_realloc_r+0x1e>

080081d8 <_fwalk_sglue>:
 80081d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081dc:	4607      	mov	r7, r0
 80081de:	4688      	mov	r8, r1
 80081e0:	4614      	mov	r4, r2
 80081e2:	2600      	movs	r6, #0
 80081e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081e8:	f1b9 0901 	subs.w	r9, r9, #1
 80081ec:	d505      	bpl.n	80081fa <_fwalk_sglue+0x22>
 80081ee:	6824      	ldr	r4, [r4, #0]
 80081f0:	2c00      	cmp	r4, #0
 80081f2:	d1f7      	bne.n	80081e4 <_fwalk_sglue+0xc>
 80081f4:	4630      	mov	r0, r6
 80081f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081fa:	89ab      	ldrh	r3, [r5, #12]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d907      	bls.n	8008210 <_fwalk_sglue+0x38>
 8008200:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008204:	3301      	adds	r3, #1
 8008206:	d003      	beq.n	8008210 <_fwalk_sglue+0x38>
 8008208:	4629      	mov	r1, r5
 800820a:	4638      	mov	r0, r7
 800820c:	47c0      	blx	r8
 800820e:	4306      	orrs	r6, r0
 8008210:	3568      	adds	r5, #104	@ 0x68
 8008212:	e7e9      	b.n	80081e8 <_fwalk_sglue+0x10>

08008214 <iprintf>:
 8008214:	b40f      	push	{r0, r1, r2, r3}
 8008216:	b507      	push	{r0, r1, r2, lr}
 8008218:	4906      	ldr	r1, [pc, #24]	@ (8008234 <iprintf+0x20>)
 800821a:	ab04      	add	r3, sp, #16
 800821c:	6808      	ldr	r0, [r1, #0]
 800821e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008222:	6881      	ldr	r1, [r0, #8]
 8008224:	9301      	str	r3, [sp, #4]
 8008226:	f001 f829 	bl	800927c <_vfiprintf_r>
 800822a:	b003      	add	sp, #12
 800822c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008230:	b004      	add	sp, #16
 8008232:	4770      	bx	lr
 8008234:	24000660 	.word	0x24000660

08008238 <memset>:
 8008238:	4402      	add	r2, r0
 800823a:	4603      	mov	r3, r0
 800823c:	4293      	cmp	r3, r2
 800823e:	d100      	bne.n	8008242 <memset+0xa>
 8008240:	4770      	bx	lr
 8008242:	f803 1b01 	strb.w	r1, [r3], #1
 8008246:	e7f9      	b.n	800823c <memset+0x4>

08008248 <_localeconv_r>:
 8008248:	4800      	ldr	r0, [pc, #0]	@ (800824c <_localeconv_r+0x4>)
 800824a:	4770      	bx	lr
 800824c:	240007a0 	.word	0x240007a0

08008250 <_sbrk_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4d06      	ldr	r5, [pc, #24]	@ (800826c <_sbrk_r+0x1c>)
 8008254:	2300      	movs	r3, #0
 8008256:	4604      	mov	r4, r0
 8008258:	4608      	mov	r0, r1
 800825a:	602b      	str	r3, [r5, #0]
 800825c:	f7f9 f8de 	bl	800141c <_sbrk>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	d102      	bne.n	800826a <_sbrk_r+0x1a>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	b103      	cbz	r3, 800826a <_sbrk_r+0x1a>
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	bd38      	pop	{r3, r4, r5, pc}
 800826c:	240010c4 	.word	0x240010c4

08008270 <__errno>:
 8008270:	4b01      	ldr	r3, [pc, #4]	@ (8008278 <__errno+0x8>)
 8008272:	6818      	ldr	r0, [r3, #0]
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	24000660 	.word	0x24000660

0800827c <__libc_init_array>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	4d0d      	ldr	r5, [pc, #52]	@ (80082b4 <__libc_init_array+0x38>)
 8008280:	4c0d      	ldr	r4, [pc, #52]	@ (80082b8 <__libc_init_array+0x3c>)
 8008282:	1b64      	subs	r4, r4, r5
 8008284:	10a4      	asrs	r4, r4, #2
 8008286:	2600      	movs	r6, #0
 8008288:	42a6      	cmp	r6, r4
 800828a:	d109      	bne.n	80082a0 <__libc_init_array+0x24>
 800828c:	4d0b      	ldr	r5, [pc, #44]	@ (80082bc <__libc_init_array+0x40>)
 800828e:	4c0c      	ldr	r4, [pc, #48]	@ (80082c0 <__libc_init_array+0x44>)
 8008290:	f001 fee2 	bl	800a058 <_init>
 8008294:	1b64      	subs	r4, r4, r5
 8008296:	10a4      	asrs	r4, r4, #2
 8008298:	2600      	movs	r6, #0
 800829a:	42a6      	cmp	r6, r4
 800829c:	d105      	bne.n	80082aa <__libc_init_array+0x2e>
 800829e:	bd70      	pop	{r4, r5, r6, pc}
 80082a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082a4:	4798      	blx	r3
 80082a6:	3601      	adds	r6, #1
 80082a8:	e7ee      	b.n	8008288 <__libc_init_array+0xc>
 80082aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ae:	4798      	blx	r3
 80082b0:	3601      	adds	r6, #1
 80082b2:	e7f2      	b.n	800829a <__libc_init_array+0x1e>
 80082b4:	0801dd9c 	.word	0x0801dd9c
 80082b8:	0801dd9c 	.word	0x0801dd9c
 80082bc:	0801dd9c 	.word	0x0801dd9c
 80082c0:	0801dda0 	.word	0x0801dda0

080082c4 <__retarget_lock_init_recursive>:
 80082c4:	4770      	bx	lr

080082c6 <__retarget_lock_acquire_recursive>:
 80082c6:	4770      	bx	lr

080082c8 <__retarget_lock_release_recursive>:
 80082c8:	4770      	bx	lr

080082ca <memcpy>:
 80082ca:	440a      	add	r2, r1
 80082cc:	4291      	cmp	r1, r2
 80082ce:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80082d2:	d100      	bne.n	80082d6 <memcpy+0xc>
 80082d4:	4770      	bx	lr
 80082d6:	b510      	push	{r4, lr}
 80082d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082e0:	4291      	cmp	r1, r2
 80082e2:	d1f9      	bne.n	80082d8 <memcpy+0xe>
 80082e4:	bd10      	pop	{r4, pc}
	...

080082e8 <__assert_func>:
 80082e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082ea:	4614      	mov	r4, r2
 80082ec:	461a      	mov	r2, r3
 80082ee:	4b09      	ldr	r3, [pc, #36]	@ (8008314 <__assert_func+0x2c>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4605      	mov	r5, r0
 80082f4:	68d8      	ldr	r0, [r3, #12]
 80082f6:	b954      	cbnz	r4, 800830e <__assert_func+0x26>
 80082f8:	4b07      	ldr	r3, [pc, #28]	@ (8008318 <__assert_func+0x30>)
 80082fa:	461c      	mov	r4, r3
 80082fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008300:	9100      	str	r1, [sp, #0]
 8008302:	462b      	mov	r3, r5
 8008304:	4905      	ldr	r1, [pc, #20]	@ (800831c <__assert_func+0x34>)
 8008306:	f001 fc9f 	bl	8009c48 <fiprintf>
 800830a:	f001 fe27 	bl	8009f5c <abort>
 800830e:	4b04      	ldr	r3, [pc, #16]	@ (8008320 <__assert_func+0x38>)
 8008310:	e7f4      	b.n	80082fc <__assert_func+0x14>
 8008312:	bf00      	nop
 8008314:	24000660 	.word	0x24000660
 8008318:	0800a1c8 	.word	0x0800a1c8
 800831c:	0801da63 	.word	0x0801da63
 8008320:	0801da56 	.word	0x0801da56

08008324 <quorem>:
 8008324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008328:	6903      	ldr	r3, [r0, #16]
 800832a:	690c      	ldr	r4, [r1, #16]
 800832c:	42a3      	cmp	r3, r4
 800832e:	4607      	mov	r7, r0
 8008330:	db7e      	blt.n	8008430 <quorem+0x10c>
 8008332:	3c01      	subs	r4, #1
 8008334:	f101 0814 	add.w	r8, r1, #20
 8008338:	00a3      	lsls	r3, r4, #2
 800833a:	f100 0514 	add.w	r5, r0, #20
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800834a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800834e:	3301      	adds	r3, #1
 8008350:	429a      	cmp	r2, r3
 8008352:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008356:	fbb2 f6f3 	udiv	r6, r2, r3
 800835a:	d32e      	bcc.n	80083ba <quorem+0x96>
 800835c:	f04f 0a00 	mov.w	sl, #0
 8008360:	46c4      	mov	ip, r8
 8008362:	46ae      	mov	lr, r5
 8008364:	46d3      	mov	fp, sl
 8008366:	f85c 3b04 	ldr.w	r3, [ip], #4
 800836a:	b298      	uxth	r0, r3
 800836c:	fb06 a000 	mla	r0, r6, r0, sl
 8008370:	0c02      	lsrs	r2, r0, #16
 8008372:	0c1b      	lsrs	r3, r3, #16
 8008374:	fb06 2303 	mla	r3, r6, r3, r2
 8008378:	f8de 2000 	ldr.w	r2, [lr]
 800837c:	b280      	uxth	r0, r0
 800837e:	b292      	uxth	r2, r2
 8008380:	1a12      	subs	r2, r2, r0
 8008382:	445a      	add	r2, fp
 8008384:	f8de 0000 	ldr.w	r0, [lr]
 8008388:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800838c:	b29b      	uxth	r3, r3
 800838e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008392:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008396:	b292      	uxth	r2, r2
 8008398:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800839c:	45e1      	cmp	r9, ip
 800839e:	f84e 2b04 	str.w	r2, [lr], #4
 80083a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80083a6:	d2de      	bcs.n	8008366 <quorem+0x42>
 80083a8:	9b00      	ldr	r3, [sp, #0]
 80083aa:	58eb      	ldr	r3, [r5, r3]
 80083ac:	b92b      	cbnz	r3, 80083ba <quorem+0x96>
 80083ae:	9b01      	ldr	r3, [sp, #4]
 80083b0:	3b04      	subs	r3, #4
 80083b2:	429d      	cmp	r5, r3
 80083b4:	461a      	mov	r2, r3
 80083b6:	d32f      	bcc.n	8008418 <quorem+0xf4>
 80083b8:	613c      	str	r4, [r7, #16]
 80083ba:	4638      	mov	r0, r7
 80083bc:	f001 faf0 	bl	80099a0 <__mcmp>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	db25      	blt.n	8008410 <quorem+0xec>
 80083c4:	4629      	mov	r1, r5
 80083c6:	2000      	movs	r0, #0
 80083c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80083cc:	f8d1 c000 	ldr.w	ip, [r1]
 80083d0:	fa1f fe82 	uxth.w	lr, r2
 80083d4:	fa1f f38c 	uxth.w	r3, ip
 80083d8:	eba3 030e 	sub.w	r3, r3, lr
 80083dc:	4403      	add	r3, r0
 80083de:	0c12      	lsrs	r2, r2, #16
 80083e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80083e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083ee:	45c1      	cmp	r9, r8
 80083f0:	f841 3b04 	str.w	r3, [r1], #4
 80083f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80083f8:	d2e6      	bcs.n	80083c8 <quorem+0xa4>
 80083fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008402:	b922      	cbnz	r2, 800840e <quorem+0xea>
 8008404:	3b04      	subs	r3, #4
 8008406:	429d      	cmp	r5, r3
 8008408:	461a      	mov	r2, r3
 800840a:	d30b      	bcc.n	8008424 <quorem+0x100>
 800840c:	613c      	str	r4, [r7, #16]
 800840e:	3601      	adds	r6, #1
 8008410:	4630      	mov	r0, r6
 8008412:	b003      	add	sp, #12
 8008414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008418:	6812      	ldr	r2, [r2, #0]
 800841a:	3b04      	subs	r3, #4
 800841c:	2a00      	cmp	r2, #0
 800841e:	d1cb      	bne.n	80083b8 <quorem+0x94>
 8008420:	3c01      	subs	r4, #1
 8008422:	e7c6      	b.n	80083b2 <quorem+0x8e>
 8008424:	6812      	ldr	r2, [r2, #0]
 8008426:	3b04      	subs	r3, #4
 8008428:	2a00      	cmp	r2, #0
 800842a:	d1ef      	bne.n	800840c <quorem+0xe8>
 800842c:	3c01      	subs	r4, #1
 800842e:	e7ea      	b.n	8008406 <quorem+0xe2>
 8008430:	2000      	movs	r0, #0
 8008432:	e7ee      	b.n	8008412 <quorem+0xee>
 8008434:	0000      	movs	r0, r0
	...

08008438 <_dtoa_r>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	ed2d 8b02 	vpush	{d8}
 8008440:	69c7      	ldr	r7, [r0, #28]
 8008442:	b091      	sub	sp, #68	@ 0x44
 8008444:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008448:	ec55 4b10 	vmov	r4, r5, d0
 800844c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800844e:	9107      	str	r1, [sp, #28]
 8008450:	4681      	mov	r9, r0
 8008452:	9209      	str	r2, [sp, #36]	@ 0x24
 8008454:	930d      	str	r3, [sp, #52]	@ 0x34
 8008456:	b97f      	cbnz	r7, 8008478 <_dtoa_r+0x40>
 8008458:	2010      	movs	r0, #16
 800845a:	f7fd fa17 	bl	800588c <__wrap_malloc>
 800845e:	4602      	mov	r2, r0
 8008460:	f8c9 001c 	str.w	r0, [r9, #28]
 8008464:	b920      	cbnz	r0, 8008470 <_dtoa_r+0x38>
 8008466:	4ba0      	ldr	r3, [pc, #640]	@ (80086e8 <_dtoa_r+0x2b0>)
 8008468:	21ef      	movs	r1, #239	@ 0xef
 800846a:	48a0      	ldr	r0, [pc, #640]	@ (80086ec <_dtoa_r+0x2b4>)
 800846c:	f7ff ff3c 	bl	80082e8 <__assert_func>
 8008470:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008474:	6007      	str	r7, [r0, #0]
 8008476:	60c7      	str	r7, [r0, #12]
 8008478:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800847c:	6819      	ldr	r1, [r3, #0]
 800847e:	b159      	cbz	r1, 8008498 <_dtoa_r+0x60>
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	604a      	str	r2, [r1, #4]
 8008484:	2301      	movs	r3, #1
 8008486:	4093      	lsls	r3, r2
 8008488:	608b      	str	r3, [r1, #8]
 800848a:	4648      	mov	r0, r9
 800848c:	f001 f84e 	bl	800952c <_Bfree>
 8008490:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008494:	2200      	movs	r2, #0
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	1e2b      	subs	r3, r5, #0
 800849a:	bfbb      	ittet	lt
 800849c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80084a0:	9303      	strlt	r3, [sp, #12]
 80084a2:	2300      	movge	r3, #0
 80084a4:	2201      	movlt	r2, #1
 80084a6:	bfac      	ite	ge
 80084a8:	6033      	strge	r3, [r6, #0]
 80084aa:	6032      	strlt	r2, [r6, #0]
 80084ac:	4b90      	ldr	r3, [pc, #576]	@ (80086f0 <_dtoa_r+0x2b8>)
 80084ae:	9e03      	ldr	r6, [sp, #12]
 80084b0:	43b3      	bics	r3, r6
 80084b2:	d110      	bne.n	80084d6 <_dtoa_r+0x9e>
 80084b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084b6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80084ba:	6013      	str	r3, [r2, #0]
 80084bc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80084c0:	4323      	orrs	r3, r4
 80084c2:	f000 84de 	beq.w	8008e82 <_dtoa_r+0xa4a>
 80084c6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80084c8:	4f8a      	ldr	r7, [pc, #552]	@ (80086f4 <_dtoa_r+0x2bc>)
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 84e0 	beq.w	8008e90 <_dtoa_r+0xa58>
 80084d0:	1cfb      	adds	r3, r7, #3
 80084d2:	f000 bcdb 	b.w	8008e8c <_dtoa_r+0xa54>
 80084d6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80084da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80084de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084e2:	d10a      	bne.n	80084fa <_dtoa_r+0xc2>
 80084e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084e6:	2301      	movs	r3, #1
 80084e8:	6013      	str	r3, [r2, #0]
 80084ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80084ec:	b113      	cbz	r3, 80084f4 <_dtoa_r+0xbc>
 80084ee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80084f0:	4b81      	ldr	r3, [pc, #516]	@ (80086f8 <_dtoa_r+0x2c0>)
 80084f2:	6013      	str	r3, [r2, #0]
 80084f4:	4f81      	ldr	r7, [pc, #516]	@ (80086fc <_dtoa_r+0x2c4>)
 80084f6:	f000 bccb 	b.w	8008e90 <_dtoa_r+0xa58>
 80084fa:	aa0e      	add	r2, sp, #56	@ 0x38
 80084fc:	a90f      	add	r1, sp, #60	@ 0x3c
 80084fe:	4648      	mov	r0, r9
 8008500:	eeb0 0b48 	vmov.f64	d0, d8
 8008504:	f001 fafc 	bl	8009b00 <__d2b>
 8008508:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800850c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800850e:	9001      	str	r0, [sp, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d045      	beq.n	80085a0 <_dtoa_r+0x168>
 8008514:	eeb0 7b48 	vmov.f64	d7, d8
 8008518:	ee18 1a90 	vmov	r1, s17
 800851c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008520:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8008524:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008528:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800852c:	2500      	movs	r5, #0
 800852e:	ee07 1a90 	vmov	s15, r1
 8008532:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8008536:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80086d0 <_dtoa_r+0x298>
 800853a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800853e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80086d8 <_dtoa_r+0x2a0>
 8008542:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008546:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80086e0 <_dtoa_r+0x2a8>
 800854a:	ee07 3a90 	vmov	s15, r3
 800854e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008552:	eeb0 7b46 	vmov.f64	d7, d6
 8008556:	eea4 7b05 	vfma.f64	d7, d4, d5
 800855a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800855e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008566:	ee16 8a90 	vmov	r8, s13
 800856a:	d508      	bpl.n	800857e <_dtoa_r+0x146>
 800856c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008570:	eeb4 6b47 	vcmp.f64	d6, d7
 8008574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008578:	bf18      	it	ne
 800857a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800857e:	f1b8 0f16 	cmp.w	r8, #22
 8008582:	d82b      	bhi.n	80085dc <_dtoa_r+0x1a4>
 8008584:	495e      	ldr	r1, [pc, #376]	@ (8008700 <_dtoa_r+0x2c8>)
 8008586:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800858a:	ed91 7b00 	vldr	d7, [r1]
 800858e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008596:	d501      	bpl.n	800859c <_dtoa_r+0x164>
 8008598:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800859c:	2100      	movs	r1, #0
 800859e:	e01e      	b.n	80085de <_dtoa_r+0x1a6>
 80085a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085a2:	4413      	add	r3, r2
 80085a4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80085a8:	2920      	cmp	r1, #32
 80085aa:	bfc1      	itttt	gt
 80085ac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80085b0:	408e      	lslgt	r6, r1
 80085b2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80085b6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80085ba:	bfd6      	itet	le
 80085bc:	f1c1 0120 	rsble	r1, r1, #32
 80085c0:	4331      	orrgt	r1, r6
 80085c2:	fa04 f101 	lslle.w	r1, r4, r1
 80085c6:	ee07 1a90 	vmov	s15, r1
 80085ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80085ce:	3b01      	subs	r3, #1
 80085d0:	ee17 1a90 	vmov	r1, s15
 80085d4:	2501      	movs	r5, #1
 80085d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80085da:	e7a8      	b.n	800852e <_dtoa_r+0xf6>
 80085dc:	2101      	movs	r1, #1
 80085de:	1ad2      	subs	r2, r2, r3
 80085e0:	1e53      	subs	r3, r2, #1
 80085e2:	9306      	str	r3, [sp, #24]
 80085e4:	bf45      	ittet	mi
 80085e6:	f1c2 0301 	rsbmi	r3, r2, #1
 80085ea:	9305      	strmi	r3, [sp, #20]
 80085ec:	2300      	movpl	r3, #0
 80085ee:	2300      	movmi	r3, #0
 80085f0:	bf4c      	ite	mi
 80085f2:	9306      	strmi	r3, [sp, #24]
 80085f4:	9305      	strpl	r3, [sp, #20]
 80085f6:	f1b8 0f00 	cmp.w	r8, #0
 80085fa:	910c      	str	r1, [sp, #48]	@ 0x30
 80085fc:	db18      	blt.n	8008630 <_dtoa_r+0x1f8>
 80085fe:	9b06      	ldr	r3, [sp, #24]
 8008600:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008604:	4443      	add	r3, r8
 8008606:	9306      	str	r3, [sp, #24]
 8008608:	2300      	movs	r3, #0
 800860a:	9a07      	ldr	r2, [sp, #28]
 800860c:	2a09      	cmp	r2, #9
 800860e:	d849      	bhi.n	80086a4 <_dtoa_r+0x26c>
 8008610:	2a05      	cmp	r2, #5
 8008612:	bfc4      	itt	gt
 8008614:	3a04      	subgt	r2, #4
 8008616:	9207      	strgt	r2, [sp, #28]
 8008618:	9a07      	ldr	r2, [sp, #28]
 800861a:	f1a2 0202 	sub.w	r2, r2, #2
 800861e:	bfcc      	ite	gt
 8008620:	2400      	movgt	r4, #0
 8008622:	2401      	movle	r4, #1
 8008624:	2a03      	cmp	r2, #3
 8008626:	d848      	bhi.n	80086ba <_dtoa_r+0x282>
 8008628:	e8df f002 	tbb	[pc, r2]
 800862c:	3a2c2e0b 	.word	0x3a2c2e0b
 8008630:	9b05      	ldr	r3, [sp, #20]
 8008632:	2200      	movs	r2, #0
 8008634:	eba3 0308 	sub.w	r3, r3, r8
 8008638:	9305      	str	r3, [sp, #20]
 800863a:	920a      	str	r2, [sp, #40]	@ 0x28
 800863c:	f1c8 0300 	rsb	r3, r8, #0
 8008640:	e7e3      	b.n	800860a <_dtoa_r+0x1d2>
 8008642:	2200      	movs	r2, #0
 8008644:	9208      	str	r2, [sp, #32]
 8008646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008648:	2a00      	cmp	r2, #0
 800864a:	dc39      	bgt.n	80086c0 <_dtoa_r+0x288>
 800864c:	f04f 0b01 	mov.w	fp, #1
 8008650:	46da      	mov	sl, fp
 8008652:	465a      	mov	r2, fp
 8008654:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8008658:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800865c:	2100      	movs	r1, #0
 800865e:	2004      	movs	r0, #4
 8008660:	f100 0614 	add.w	r6, r0, #20
 8008664:	4296      	cmp	r6, r2
 8008666:	d930      	bls.n	80086ca <_dtoa_r+0x292>
 8008668:	6079      	str	r1, [r7, #4]
 800866a:	4648      	mov	r0, r9
 800866c:	9304      	str	r3, [sp, #16]
 800866e:	f000 ff1d 	bl	80094ac <_Balloc>
 8008672:	9b04      	ldr	r3, [sp, #16]
 8008674:	4607      	mov	r7, r0
 8008676:	2800      	cmp	r0, #0
 8008678:	d146      	bne.n	8008708 <_dtoa_r+0x2d0>
 800867a:	4b22      	ldr	r3, [pc, #136]	@ (8008704 <_dtoa_r+0x2cc>)
 800867c:	4602      	mov	r2, r0
 800867e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008682:	e6f2      	b.n	800846a <_dtoa_r+0x32>
 8008684:	2201      	movs	r2, #1
 8008686:	e7dd      	b.n	8008644 <_dtoa_r+0x20c>
 8008688:	2200      	movs	r2, #0
 800868a:	9208      	str	r2, [sp, #32]
 800868c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800868e:	eb08 0b02 	add.w	fp, r8, r2
 8008692:	f10b 0a01 	add.w	sl, fp, #1
 8008696:	4652      	mov	r2, sl
 8008698:	2a01      	cmp	r2, #1
 800869a:	bfb8      	it	lt
 800869c:	2201      	movlt	r2, #1
 800869e:	e7db      	b.n	8008658 <_dtoa_r+0x220>
 80086a0:	2201      	movs	r2, #1
 80086a2:	e7f2      	b.n	800868a <_dtoa_r+0x252>
 80086a4:	2401      	movs	r4, #1
 80086a6:	2200      	movs	r2, #0
 80086a8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80086ac:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80086b0:	2100      	movs	r1, #0
 80086b2:	46da      	mov	sl, fp
 80086b4:	2212      	movs	r2, #18
 80086b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80086b8:	e7ce      	b.n	8008658 <_dtoa_r+0x220>
 80086ba:	2201      	movs	r2, #1
 80086bc:	9208      	str	r2, [sp, #32]
 80086be:	e7f5      	b.n	80086ac <_dtoa_r+0x274>
 80086c0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80086c4:	46da      	mov	sl, fp
 80086c6:	465a      	mov	r2, fp
 80086c8:	e7c6      	b.n	8008658 <_dtoa_r+0x220>
 80086ca:	3101      	adds	r1, #1
 80086cc:	0040      	lsls	r0, r0, #1
 80086ce:	e7c7      	b.n	8008660 <_dtoa_r+0x228>
 80086d0:	636f4361 	.word	0x636f4361
 80086d4:	3fd287a7 	.word	0x3fd287a7
 80086d8:	8b60c8b3 	.word	0x8b60c8b3
 80086dc:	3fc68a28 	.word	0x3fc68a28
 80086e0:	509f79fb 	.word	0x509f79fb
 80086e4:	3fd34413 	.word	0x3fd34413
 80086e8:	0801da9f 	.word	0x0801da9f
 80086ec:	0801dab6 	.word	0x0801dab6
 80086f0:	7ff00000 	.word	0x7ff00000
 80086f4:	0801da9b 	.word	0x0801da9b
 80086f8:	0801d55f 	.word	0x0801d55f
 80086fc:	0801d55e 	.word	0x0801d55e
 8008700:	0801dbc0 	.word	0x0801dbc0
 8008704:	0801db0e 	.word	0x0801db0e
 8008708:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800870c:	f1ba 0f0e 	cmp.w	sl, #14
 8008710:	6010      	str	r0, [r2, #0]
 8008712:	d86f      	bhi.n	80087f4 <_dtoa_r+0x3bc>
 8008714:	2c00      	cmp	r4, #0
 8008716:	d06d      	beq.n	80087f4 <_dtoa_r+0x3bc>
 8008718:	f1b8 0f00 	cmp.w	r8, #0
 800871c:	f340 80c2 	ble.w	80088a4 <_dtoa_r+0x46c>
 8008720:	4aca      	ldr	r2, [pc, #808]	@ (8008a4c <_dtoa_r+0x614>)
 8008722:	f008 010f 	and.w	r1, r8, #15
 8008726:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800872a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800872e:	ed92 7b00 	vldr	d7, [r2]
 8008732:	ea4f 1128 	mov.w	r1, r8, asr #4
 8008736:	f000 80a9 	beq.w	800888c <_dtoa_r+0x454>
 800873a:	4ac5      	ldr	r2, [pc, #788]	@ (8008a50 <_dtoa_r+0x618>)
 800873c:	ed92 6b08 	vldr	d6, [r2, #32]
 8008740:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008744:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008748:	f001 010f 	and.w	r1, r1, #15
 800874c:	2203      	movs	r2, #3
 800874e:	48c0      	ldr	r0, [pc, #768]	@ (8008a50 <_dtoa_r+0x618>)
 8008750:	2900      	cmp	r1, #0
 8008752:	f040 809d 	bne.w	8008890 <_dtoa_r+0x458>
 8008756:	ed9d 6b02 	vldr	d6, [sp, #8]
 800875a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800875e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008762:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008764:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008768:	2900      	cmp	r1, #0
 800876a:	f000 80c1 	beq.w	80088f0 <_dtoa_r+0x4b8>
 800876e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008772:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800877a:	f140 80b9 	bpl.w	80088f0 <_dtoa_r+0x4b8>
 800877e:	f1ba 0f00 	cmp.w	sl, #0
 8008782:	f000 80b5 	beq.w	80088f0 <_dtoa_r+0x4b8>
 8008786:	f1bb 0f00 	cmp.w	fp, #0
 800878a:	dd31      	ble.n	80087f0 <_dtoa_r+0x3b8>
 800878c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008790:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008794:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008798:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800879c:	9104      	str	r1, [sp, #16]
 800879e:	3201      	adds	r2, #1
 80087a0:	465c      	mov	r4, fp
 80087a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80087a6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80087aa:	ee07 2a90 	vmov	s15, r2
 80087ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80087b6:	ee15 2a90 	vmov	r2, s11
 80087ba:	ec51 0b15 	vmov	r0, r1, d5
 80087be:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80087c2:	2c00      	cmp	r4, #0
 80087c4:	f040 8098 	bne.w	80088f8 <_dtoa_r+0x4c0>
 80087c8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80087cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80087d0:	ec41 0b17 	vmov	d7, r0, r1
 80087d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80087d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087dc:	f300 8261 	bgt.w	8008ca2 <_dtoa_r+0x86a>
 80087e0:	eeb1 7b47 	vneg.f64	d7, d7
 80087e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80087e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ec:	f100 80f5 	bmi.w	80089da <_dtoa_r+0x5a2>
 80087f0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80087f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80087f6:	2a00      	cmp	r2, #0
 80087f8:	f2c0 812c 	blt.w	8008a54 <_dtoa_r+0x61c>
 80087fc:	f1b8 0f0e 	cmp.w	r8, #14
 8008800:	f300 8128 	bgt.w	8008a54 <_dtoa_r+0x61c>
 8008804:	4b91      	ldr	r3, [pc, #580]	@ (8008a4c <_dtoa_r+0x614>)
 8008806:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800880a:	ed93 6b00 	vldr	d6, [r3]
 800880e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008810:	2b00      	cmp	r3, #0
 8008812:	da03      	bge.n	800881c <_dtoa_r+0x3e4>
 8008814:	f1ba 0f00 	cmp.w	sl, #0
 8008818:	f340 80d2 	ble.w	80089c0 <_dtoa_r+0x588>
 800881c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8008820:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008824:	463e      	mov	r6, r7
 8008826:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800882a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800882e:	ee15 3a10 	vmov	r3, s10
 8008832:	3330      	adds	r3, #48	@ 0x30
 8008834:	f806 3b01 	strb.w	r3, [r6], #1
 8008838:	1bf3      	subs	r3, r6, r7
 800883a:	459a      	cmp	sl, r3
 800883c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008840:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008844:	f040 80f8 	bne.w	8008a38 <_dtoa_r+0x600>
 8008848:	ee37 7b07 	vadd.f64	d7, d7, d7
 800884c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008854:	f300 80dd 	bgt.w	8008a12 <_dtoa_r+0x5da>
 8008858:	eeb4 7b46 	vcmp.f64	d7, d6
 800885c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008860:	d104      	bne.n	800886c <_dtoa_r+0x434>
 8008862:	ee15 3a10 	vmov	r3, s10
 8008866:	07db      	lsls	r3, r3, #31
 8008868:	f100 80d3 	bmi.w	8008a12 <_dtoa_r+0x5da>
 800886c:	9901      	ldr	r1, [sp, #4]
 800886e:	4648      	mov	r0, r9
 8008870:	f000 fe5c 	bl	800952c <_Bfree>
 8008874:	2300      	movs	r3, #0
 8008876:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008878:	7033      	strb	r3, [r6, #0]
 800887a:	f108 0301 	add.w	r3, r8, #1
 800887e:	6013      	str	r3, [r2, #0]
 8008880:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 8304 	beq.w	8008e90 <_dtoa_r+0xa58>
 8008888:	601e      	str	r6, [r3, #0]
 800888a:	e301      	b.n	8008e90 <_dtoa_r+0xa58>
 800888c:	2202      	movs	r2, #2
 800888e:	e75e      	b.n	800874e <_dtoa_r+0x316>
 8008890:	07cc      	lsls	r4, r1, #31
 8008892:	d504      	bpl.n	800889e <_dtoa_r+0x466>
 8008894:	ed90 6b00 	vldr	d6, [r0]
 8008898:	3201      	adds	r2, #1
 800889a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800889e:	1049      	asrs	r1, r1, #1
 80088a0:	3008      	adds	r0, #8
 80088a2:	e755      	b.n	8008750 <_dtoa_r+0x318>
 80088a4:	d022      	beq.n	80088ec <_dtoa_r+0x4b4>
 80088a6:	f1c8 0100 	rsb	r1, r8, #0
 80088aa:	4a68      	ldr	r2, [pc, #416]	@ (8008a4c <_dtoa_r+0x614>)
 80088ac:	f001 000f 	and.w	r0, r1, #15
 80088b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80088b4:	ed92 7b00 	vldr	d7, [r2]
 80088b8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80088bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80088c0:	4863      	ldr	r0, [pc, #396]	@ (8008a50 <_dtoa_r+0x618>)
 80088c2:	1109      	asrs	r1, r1, #4
 80088c4:	2400      	movs	r4, #0
 80088c6:	2202      	movs	r2, #2
 80088c8:	b929      	cbnz	r1, 80088d6 <_dtoa_r+0x49e>
 80088ca:	2c00      	cmp	r4, #0
 80088cc:	f43f af49 	beq.w	8008762 <_dtoa_r+0x32a>
 80088d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80088d4:	e745      	b.n	8008762 <_dtoa_r+0x32a>
 80088d6:	07ce      	lsls	r6, r1, #31
 80088d8:	d505      	bpl.n	80088e6 <_dtoa_r+0x4ae>
 80088da:	ed90 6b00 	vldr	d6, [r0]
 80088de:	3201      	adds	r2, #1
 80088e0:	2401      	movs	r4, #1
 80088e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80088e6:	1049      	asrs	r1, r1, #1
 80088e8:	3008      	adds	r0, #8
 80088ea:	e7ed      	b.n	80088c8 <_dtoa_r+0x490>
 80088ec:	2202      	movs	r2, #2
 80088ee:	e738      	b.n	8008762 <_dtoa_r+0x32a>
 80088f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80088f4:	4654      	mov	r4, sl
 80088f6:	e754      	b.n	80087a2 <_dtoa_r+0x36a>
 80088f8:	4a54      	ldr	r2, [pc, #336]	@ (8008a4c <_dtoa_r+0x614>)
 80088fa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80088fe:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008902:	9a08      	ldr	r2, [sp, #32]
 8008904:	ec41 0b17 	vmov	d7, r0, r1
 8008908:	443c      	add	r4, r7
 800890a:	b34a      	cbz	r2, 8008960 <_dtoa_r+0x528>
 800890c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8008910:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8008914:	463e      	mov	r6, r7
 8008916:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800891a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800891e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008922:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008926:	ee14 2a90 	vmov	r2, s9
 800892a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800892e:	3230      	adds	r2, #48	@ 0x30
 8008930:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008934:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800893c:	f806 2b01 	strb.w	r2, [r6], #1
 8008940:	d438      	bmi.n	80089b4 <_dtoa_r+0x57c>
 8008942:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008946:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800894a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800894e:	d462      	bmi.n	8008a16 <_dtoa_r+0x5de>
 8008950:	42a6      	cmp	r6, r4
 8008952:	f43f af4d 	beq.w	80087f0 <_dtoa_r+0x3b8>
 8008956:	ee27 7b03 	vmul.f64	d7, d7, d3
 800895a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800895e:	e7e0      	b.n	8008922 <_dtoa_r+0x4ea>
 8008960:	4621      	mov	r1, r4
 8008962:	463e      	mov	r6, r7
 8008964:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008968:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800896c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008970:	ee14 2a90 	vmov	r2, s9
 8008974:	3230      	adds	r2, #48	@ 0x30
 8008976:	f806 2b01 	strb.w	r2, [r6], #1
 800897a:	42a6      	cmp	r6, r4
 800897c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008980:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008984:	d119      	bne.n	80089ba <_dtoa_r+0x582>
 8008986:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800898a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800898e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008996:	dc3e      	bgt.n	8008a16 <_dtoa_r+0x5de>
 8008998:	ee35 5b47 	vsub.f64	d5, d5, d7
 800899c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80089a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089a4:	f57f af24 	bpl.w	80087f0 <_dtoa_r+0x3b8>
 80089a8:	460e      	mov	r6, r1
 80089aa:	3901      	subs	r1, #1
 80089ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80089b0:	2b30      	cmp	r3, #48	@ 0x30
 80089b2:	d0f9      	beq.n	80089a8 <_dtoa_r+0x570>
 80089b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80089b8:	e758      	b.n	800886c <_dtoa_r+0x434>
 80089ba:	ee26 6b03 	vmul.f64	d6, d6, d3
 80089be:	e7d5      	b.n	800896c <_dtoa_r+0x534>
 80089c0:	d10b      	bne.n	80089da <_dtoa_r+0x5a2>
 80089c2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80089c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80089ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80089d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d6:	f2c0 8161 	blt.w	8008c9c <_dtoa_r+0x864>
 80089da:	2400      	movs	r4, #0
 80089dc:	4625      	mov	r5, r4
 80089de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089e0:	43db      	mvns	r3, r3
 80089e2:	9304      	str	r3, [sp, #16]
 80089e4:	463e      	mov	r6, r7
 80089e6:	f04f 0800 	mov.w	r8, #0
 80089ea:	4621      	mov	r1, r4
 80089ec:	4648      	mov	r0, r9
 80089ee:	f000 fd9d 	bl	800952c <_Bfree>
 80089f2:	2d00      	cmp	r5, #0
 80089f4:	d0de      	beq.n	80089b4 <_dtoa_r+0x57c>
 80089f6:	f1b8 0f00 	cmp.w	r8, #0
 80089fa:	d005      	beq.n	8008a08 <_dtoa_r+0x5d0>
 80089fc:	45a8      	cmp	r8, r5
 80089fe:	d003      	beq.n	8008a08 <_dtoa_r+0x5d0>
 8008a00:	4641      	mov	r1, r8
 8008a02:	4648      	mov	r0, r9
 8008a04:	f000 fd92 	bl	800952c <_Bfree>
 8008a08:	4629      	mov	r1, r5
 8008a0a:	4648      	mov	r0, r9
 8008a0c:	f000 fd8e 	bl	800952c <_Bfree>
 8008a10:	e7d0      	b.n	80089b4 <_dtoa_r+0x57c>
 8008a12:	f8cd 8010 	str.w	r8, [sp, #16]
 8008a16:	4633      	mov	r3, r6
 8008a18:	461e      	mov	r6, r3
 8008a1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a1e:	2a39      	cmp	r2, #57	@ 0x39
 8008a20:	d106      	bne.n	8008a30 <_dtoa_r+0x5f8>
 8008a22:	429f      	cmp	r7, r3
 8008a24:	d1f8      	bne.n	8008a18 <_dtoa_r+0x5e0>
 8008a26:	9a04      	ldr	r2, [sp, #16]
 8008a28:	3201      	adds	r2, #1
 8008a2a:	9204      	str	r2, [sp, #16]
 8008a2c:	2230      	movs	r2, #48	@ 0x30
 8008a2e:	703a      	strb	r2, [r7, #0]
 8008a30:	781a      	ldrb	r2, [r3, #0]
 8008a32:	3201      	adds	r2, #1
 8008a34:	701a      	strb	r2, [r3, #0]
 8008a36:	e7bd      	b.n	80089b4 <_dtoa_r+0x57c>
 8008a38:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008a3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a44:	f47f aeef 	bne.w	8008826 <_dtoa_r+0x3ee>
 8008a48:	e710      	b.n	800886c <_dtoa_r+0x434>
 8008a4a:	bf00      	nop
 8008a4c:	0801dbc0 	.word	0x0801dbc0
 8008a50:	0801db98 	.word	0x0801db98
 8008a54:	9908      	ldr	r1, [sp, #32]
 8008a56:	2900      	cmp	r1, #0
 8008a58:	f000 80e3 	beq.w	8008c22 <_dtoa_r+0x7ea>
 8008a5c:	9907      	ldr	r1, [sp, #28]
 8008a5e:	2901      	cmp	r1, #1
 8008a60:	f300 80c8 	bgt.w	8008bf4 <_dtoa_r+0x7bc>
 8008a64:	2d00      	cmp	r5, #0
 8008a66:	f000 80c1 	beq.w	8008bec <_dtoa_r+0x7b4>
 8008a6a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008a6e:	9e05      	ldr	r6, [sp, #20]
 8008a70:	461c      	mov	r4, r3
 8008a72:	9304      	str	r3, [sp, #16]
 8008a74:	9b05      	ldr	r3, [sp, #20]
 8008a76:	4413      	add	r3, r2
 8008a78:	9305      	str	r3, [sp, #20]
 8008a7a:	9b06      	ldr	r3, [sp, #24]
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	4413      	add	r3, r2
 8008a80:	4648      	mov	r0, r9
 8008a82:	9306      	str	r3, [sp, #24]
 8008a84:	f000 fe06 	bl	8009694 <__i2b>
 8008a88:	9b04      	ldr	r3, [sp, #16]
 8008a8a:	4605      	mov	r5, r0
 8008a8c:	b166      	cbz	r6, 8008aa8 <_dtoa_r+0x670>
 8008a8e:	9a06      	ldr	r2, [sp, #24]
 8008a90:	2a00      	cmp	r2, #0
 8008a92:	dd09      	ble.n	8008aa8 <_dtoa_r+0x670>
 8008a94:	42b2      	cmp	r2, r6
 8008a96:	9905      	ldr	r1, [sp, #20]
 8008a98:	bfa8      	it	ge
 8008a9a:	4632      	movge	r2, r6
 8008a9c:	1a89      	subs	r1, r1, r2
 8008a9e:	9105      	str	r1, [sp, #20]
 8008aa0:	9906      	ldr	r1, [sp, #24]
 8008aa2:	1ab6      	subs	r6, r6, r2
 8008aa4:	1a8a      	subs	r2, r1, r2
 8008aa6:	9206      	str	r2, [sp, #24]
 8008aa8:	b1fb      	cbz	r3, 8008aea <_dtoa_r+0x6b2>
 8008aaa:	9a08      	ldr	r2, [sp, #32]
 8008aac:	2a00      	cmp	r2, #0
 8008aae:	f000 80bc 	beq.w	8008c2a <_dtoa_r+0x7f2>
 8008ab2:	b19c      	cbz	r4, 8008adc <_dtoa_r+0x6a4>
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	4622      	mov	r2, r4
 8008ab8:	4648      	mov	r0, r9
 8008aba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008abc:	f000 feaa 	bl	8009814 <__pow5mult>
 8008ac0:	9a01      	ldr	r2, [sp, #4]
 8008ac2:	4601      	mov	r1, r0
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	4648      	mov	r0, r9
 8008ac8:	f000 fdfa 	bl	80096c0 <__multiply>
 8008acc:	9901      	ldr	r1, [sp, #4]
 8008ace:	9004      	str	r0, [sp, #16]
 8008ad0:	4648      	mov	r0, r9
 8008ad2:	f000 fd2b 	bl	800952c <_Bfree>
 8008ad6:	9a04      	ldr	r2, [sp, #16]
 8008ad8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ada:	9201      	str	r2, [sp, #4]
 8008adc:	1b1a      	subs	r2, r3, r4
 8008ade:	d004      	beq.n	8008aea <_dtoa_r+0x6b2>
 8008ae0:	9901      	ldr	r1, [sp, #4]
 8008ae2:	4648      	mov	r0, r9
 8008ae4:	f000 fe96 	bl	8009814 <__pow5mult>
 8008ae8:	9001      	str	r0, [sp, #4]
 8008aea:	2101      	movs	r1, #1
 8008aec:	4648      	mov	r0, r9
 8008aee:	f000 fdd1 	bl	8009694 <__i2b>
 8008af2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008af4:	4604      	mov	r4, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f000 81d0 	beq.w	8008e9c <_dtoa_r+0xa64>
 8008afc:	461a      	mov	r2, r3
 8008afe:	4601      	mov	r1, r0
 8008b00:	4648      	mov	r0, r9
 8008b02:	f000 fe87 	bl	8009814 <__pow5mult>
 8008b06:	9b07      	ldr	r3, [sp, #28]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	f300 8095 	bgt.w	8008c3a <_dtoa_r+0x802>
 8008b10:	9b02      	ldr	r3, [sp, #8]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f040 808b 	bne.w	8008c2e <_dtoa_r+0x7f6>
 8008b18:	9b03      	ldr	r3, [sp, #12]
 8008b1a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008b1e:	2a00      	cmp	r2, #0
 8008b20:	f040 8087 	bne.w	8008c32 <_dtoa_r+0x7fa>
 8008b24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008b28:	0d12      	lsrs	r2, r2, #20
 8008b2a:	0512      	lsls	r2, r2, #20
 8008b2c:	2a00      	cmp	r2, #0
 8008b2e:	f000 8082 	beq.w	8008c36 <_dtoa_r+0x7fe>
 8008b32:	9b05      	ldr	r3, [sp, #20]
 8008b34:	3301      	adds	r3, #1
 8008b36:	9305      	str	r3, [sp, #20]
 8008b38:	9b06      	ldr	r3, [sp, #24]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	9306      	str	r3, [sp, #24]
 8008b3e:	2301      	movs	r3, #1
 8008b40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 81af 	beq.w	8008ea8 <_dtoa_r+0xa70>
 8008b4a:	6922      	ldr	r2, [r4, #16]
 8008b4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008b50:	6910      	ldr	r0, [r2, #16]
 8008b52:	f000 fd53 	bl	80095fc <__hi0bits>
 8008b56:	f1c0 0020 	rsb	r0, r0, #32
 8008b5a:	9b06      	ldr	r3, [sp, #24]
 8008b5c:	4418      	add	r0, r3
 8008b5e:	f010 001f 	ands.w	r0, r0, #31
 8008b62:	d076      	beq.n	8008c52 <_dtoa_r+0x81a>
 8008b64:	f1c0 0220 	rsb	r2, r0, #32
 8008b68:	2a04      	cmp	r2, #4
 8008b6a:	dd69      	ble.n	8008c40 <_dtoa_r+0x808>
 8008b6c:	9b05      	ldr	r3, [sp, #20]
 8008b6e:	f1c0 001c 	rsb	r0, r0, #28
 8008b72:	4403      	add	r3, r0
 8008b74:	9305      	str	r3, [sp, #20]
 8008b76:	9b06      	ldr	r3, [sp, #24]
 8008b78:	4406      	add	r6, r0
 8008b7a:	4403      	add	r3, r0
 8008b7c:	9306      	str	r3, [sp, #24]
 8008b7e:	9b05      	ldr	r3, [sp, #20]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	dd05      	ble.n	8008b90 <_dtoa_r+0x758>
 8008b84:	9901      	ldr	r1, [sp, #4]
 8008b86:	461a      	mov	r2, r3
 8008b88:	4648      	mov	r0, r9
 8008b8a:	f000 fe9d 	bl	80098c8 <__lshift>
 8008b8e:	9001      	str	r0, [sp, #4]
 8008b90:	9b06      	ldr	r3, [sp, #24]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	dd05      	ble.n	8008ba2 <_dtoa_r+0x76a>
 8008b96:	4621      	mov	r1, r4
 8008b98:	461a      	mov	r2, r3
 8008b9a:	4648      	mov	r0, r9
 8008b9c:	f000 fe94 	bl	80098c8 <__lshift>
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d056      	beq.n	8008c56 <_dtoa_r+0x81e>
 8008ba8:	9801      	ldr	r0, [sp, #4]
 8008baa:	4621      	mov	r1, r4
 8008bac:	f000 fef8 	bl	80099a0 <__mcmp>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	da50      	bge.n	8008c56 <_dtoa_r+0x81e>
 8008bb4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8008bb8:	9304      	str	r3, [sp, #16]
 8008bba:	9901      	ldr	r1, [sp, #4]
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	220a      	movs	r2, #10
 8008bc0:	4648      	mov	r0, r9
 8008bc2:	f000 fcd5 	bl	8009570 <__multadd>
 8008bc6:	9b08      	ldr	r3, [sp, #32]
 8008bc8:	9001      	str	r0, [sp, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f000 816e 	beq.w	8008eac <_dtoa_r+0xa74>
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	220a      	movs	r2, #10
 8008bd6:	4648      	mov	r0, r9
 8008bd8:	f000 fcca 	bl	8009570 <__multadd>
 8008bdc:	f1bb 0f00 	cmp.w	fp, #0
 8008be0:	4605      	mov	r5, r0
 8008be2:	dc64      	bgt.n	8008cae <_dtoa_r+0x876>
 8008be4:	9b07      	ldr	r3, [sp, #28]
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	dc3e      	bgt.n	8008c68 <_dtoa_r+0x830>
 8008bea:	e060      	b.n	8008cae <_dtoa_r+0x876>
 8008bec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008bf2:	e73c      	b.n	8008a6e <_dtoa_r+0x636>
 8008bf4:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8008bf8:	42a3      	cmp	r3, r4
 8008bfa:	bfbf      	itttt	lt
 8008bfc:	1ae2      	sublt	r2, r4, r3
 8008bfe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008c00:	189b      	addlt	r3, r3, r2
 8008c02:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8008c04:	bfae      	itee	ge
 8008c06:	1b1c      	subge	r4, r3, r4
 8008c08:	4623      	movlt	r3, r4
 8008c0a:	2400      	movlt	r4, #0
 8008c0c:	f1ba 0f00 	cmp.w	sl, #0
 8008c10:	bfb5      	itete	lt
 8008c12:	9a05      	ldrlt	r2, [sp, #20]
 8008c14:	9e05      	ldrge	r6, [sp, #20]
 8008c16:	eba2 060a 	sublt.w	r6, r2, sl
 8008c1a:	4652      	movge	r2, sl
 8008c1c:	bfb8      	it	lt
 8008c1e:	2200      	movlt	r2, #0
 8008c20:	e727      	b.n	8008a72 <_dtoa_r+0x63a>
 8008c22:	9e05      	ldr	r6, [sp, #20]
 8008c24:	9d08      	ldr	r5, [sp, #32]
 8008c26:	461c      	mov	r4, r3
 8008c28:	e730      	b.n	8008a8c <_dtoa_r+0x654>
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	e758      	b.n	8008ae0 <_dtoa_r+0x6a8>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	e786      	b.n	8008b40 <_dtoa_r+0x708>
 8008c32:	9b02      	ldr	r3, [sp, #8]
 8008c34:	e784      	b.n	8008b40 <_dtoa_r+0x708>
 8008c36:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008c38:	e783      	b.n	8008b42 <_dtoa_r+0x70a>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c3e:	e784      	b.n	8008b4a <_dtoa_r+0x712>
 8008c40:	d09d      	beq.n	8008b7e <_dtoa_r+0x746>
 8008c42:	9b05      	ldr	r3, [sp, #20]
 8008c44:	321c      	adds	r2, #28
 8008c46:	4413      	add	r3, r2
 8008c48:	9305      	str	r3, [sp, #20]
 8008c4a:	9b06      	ldr	r3, [sp, #24]
 8008c4c:	4416      	add	r6, r2
 8008c4e:	4413      	add	r3, r2
 8008c50:	e794      	b.n	8008b7c <_dtoa_r+0x744>
 8008c52:	4602      	mov	r2, r0
 8008c54:	e7f5      	b.n	8008c42 <_dtoa_r+0x80a>
 8008c56:	f1ba 0f00 	cmp.w	sl, #0
 8008c5a:	f8cd 8010 	str.w	r8, [sp, #16]
 8008c5e:	46d3      	mov	fp, sl
 8008c60:	dc21      	bgt.n	8008ca6 <_dtoa_r+0x86e>
 8008c62:	9b07      	ldr	r3, [sp, #28]
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	dd1e      	ble.n	8008ca6 <_dtoa_r+0x86e>
 8008c68:	f1bb 0f00 	cmp.w	fp, #0
 8008c6c:	f47f aeb7 	bne.w	80089de <_dtoa_r+0x5a6>
 8008c70:	4621      	mov	r1, r4
 8008c72:	465b      	mov	r3, fp
 8008c74:	2205      	movs	r2, #5
 8008c76:	4648      	mov	r0, r9
 8008c78:	f000 fc7a 	bl	8009570 <__multadd>
 8008c7c:	4601      	mov	r1, r0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	9801      	ldr	r0, [sp, #4]
 8008c82:	f000 fe8d 	bl	80099a0 <__mcmp>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	f77f aea9 	ble.w	80089de <_dtoa_r+0x5a6>
 8008c8c:	463e      	mov	r6, r7
 8008c8e:	2331      	movs	r3, #49	@ 0x31
 8008c90:	f806 3b01 	strb.w	r3, [r6], #1
 8008c94:	9b04      	ldr	r3, [sp, #16]
 8008c96:	3301      	adds	r3, #1
 8008c98:	9304      	str	r3, [sp, #16]
 8008c9a:	e6a4      	b.n	80089e6 <_dtoa_r+0x5ae>
 8008c9c:	f8cd 8010 	str.w	r8, [sp, #16]
 8008ca0:	4654      	mov	r4, sl
 8008ca2:	4625      	mov	r5, r4
 8008ca4:	e7f2      	b.n	8008c8c <_dtoa_r+0x854>
 8008ca6:	9b08      	ldr	r3, [sp, #32]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f000 8103 	beq.w	8008eb4 <_dtoa_r+0xa7c>
 8008cae:	2e00      	cmp	r6, #0
 8008cb0:	dd05      	ble.n	8008cbe <_dtoa_r+0x886>
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	4632      	mov	r2, r6
 8008cb6:	4648      	mov	r0, r9
 8008cb8:	f000 fe06 	bl	80098c8 <__lshift>
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d058      	beq.n	8008d76 <_dtoa_r+0x93e>
 8008cc4:	6869      	ldr	r1, [r5, #4]
 8008cc6:	4648      	mov	r0, r9
 8008cc8:	f000 fbf0 	bl	80094ac <_Balloc>
 8008ccc:	4606      	mov	r6, r0
 8008cce:	b928      	cbnz	r0, 8008cdc <_dtoa_r+0x8a4>
 8008cd0:	4b82      	ldr	r3, [pc, #520]	@ (8008edc <_dtoa_r+0xaa4>)
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008cd8:	f7ff bbc7 	b.w	800846a <_dtoa_r+0x32>
 8008cdc:	692a      	ldr	r2, [r5, #16]
 8008cde:	3202      	adds	r2, #2
 8008ce0:	0092      	lsls	r2, r2, #2
 8008ce2:	f105 010c 	add.w	r1, r5, #12
 8008ce6:	300c      	adds	r0, #12
 8008ce8:	f7ff faef 	bl	80082ca <memcpy>
 8008cec:	2201      	movs	r2, #1
 8008cee:	4631      	mov	r1, r6
 8008cf0:	4648      	mov	r0, r9
 8008cf2:	f000 fde9 	bl	80098c8 <__lshift>
 8008cf6:	1c7b      	adds	r3, r7, #1
 8008cf8:	9305      	str	r3, [sp, #20]
 8008cfa:	eb07 030b 	add.w	r3, r7, fp
 8008cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d00:	9b02      	ldr	r3, [sp, #8]
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	46a8      	mov	r8, r5
 8008d08:	9308      	str	r3, [sp, #32]
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	9b05      	ldr	r3, [sp, #20]
 8008d0e:	9801      	ldr	r0, [sp, #4]
 8008d10:	4621      	mov	r1, r4
 8008d12:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8008d16:	f7ff fb05 	bl	8008324 <quorem>
 8008d1a:	4641      	mov	r1, r8
 8008d1c:	9002      	str	r0, [sp, #8]
 8008d1e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008d22:	9801      	ldr	r0, [sp, #4]
 8008d24:	f000 fe3c 	bl	80099a0 <__mcmp>
 8008d28:	462a      	mov	r2, r5
 8008d2a:	9006      	str	r0, [sp, #24]
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4648      	mov	r0, r9
 8008d30:	f000 fe52 	bl	80099d8 <__mdiff>
 8008d34:	68c2      	ldr	r2, [r0, #12]
 8008d36:	4606      	mov	r6, r0
 8008d38:	b9fa      	cbnz	r2, 8008d7a <_dtoa_r+0x942>
 8008d3a:	4601      	mov	r1, r0
 8008d3c:	9801      	ldr	r0, [sp, #4]
 8008d3e:	f000 fe2f 	bl	80099a0 <__mcmp>
 8008d42:	4602      	mov	r2, r0
 8008d44:	4631      	mov	r1, r6
 8008d46:	4648      	mov	r0, r9
 8008d48:	920a      	str	r2, [sp, #40]	@ 0x28
 8008d4a:	f000 fbef 	bl	800952c <_Bfree>
 8008d4e:	9b07      	ldr	r3, [sp, #28]
 8008d50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d52:	9e05      	ldr	r6, [sp, #20]
 8008d54:	ea43 0102 	orr.w	r1, r3, r2
 8008d58:	9b08      	ldr	r3, [sp, #32]
 8008d5a:	4319      	orrs	r1, r3
 8008d5c:	d10f      	bne.n	8008d7e <_dtoa_r+0x946>
 8008d5e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008d62:	d028      	beq.n	8008db6 <_dtoa_r+0x97e>
 8008d64:	9b06      	ldr	r3, [sp, #24]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	dd02      	ble.n	8008d70 <_dtoa_r+0x938>
 8008d6a:	9b02      	ldr	r3, [sp, #8]
 8008d6c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8008d70:	f88b a000 	strb.w	sl, [fp]
 8008d74:	e639      	b.n	80089ea <_dtoa_r+0x5b2>
 8008d76:	4628      	mov	r0, r5
 8008d78:	e7bd      	b.n	8008cf6 <_dtoa_r+0x8be>
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	e7e2      	b.n	8008d44 <_dtoa_r+0x90c>
 8008d7e:	9b06      	ldr	r3, [sp, #24]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	db04      	blt.n	8008d8e <_dtoa_r+0x956>
 8008d84:	9907      	ldr	r1, [sp, #28]
 8008d86:	430b      	orrs	r3, r1
 8008d88:	9908      	ldr	r1, [sp, #32]
 8008d8a:	430b      	orrs	r3, r1
 8008d8c:	d120      	bne.n	8008dd0 <_dtoa_r+0x998>
 8008d8e:	2a00      	cmp	r2, #0
 8008d90:	ddee      	ble.n	8008d70 <_dtoa_r+0x938>
 8008d92:	9901      	ldr	r1, [sp, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	4648      	mov	r0, r9
 8008d98:	f000 fd96 	bl	80098c8 <__lshift>
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	9001      	str	r0, [sp, #4]
 8008da0:	f000 fdfe 	bl	80099a0 <__mcmp>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	dc03      	bgt.n	8008db0 <_dtoa_r+0x978>
 8008da8:	d1e2      	bne.n	8008d70 <_dtoa_r+0x938>
 8008daa:	f01a 0f01 	tst.w	sl, #1
 8008dae:	d0df      	beq.n	8008d70 <_dtoa_r+0x938>
 8008db0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008db4:	d1d9      	bne.n	8008d6a <_dtoa_r+0x932>
 8008db6:	2339      	movs	r3, #57	@ 0x39
 8008db8:	f88b 3000 	strb.w	r3, [fp]
 8008dbc:	4633      	mov	r3, r6
 8008dbe:	461e      	mov	r6, r3
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008dc6:	2a39      	cmp	r2, #57	@ 0x39
 8008dc8:	d053      	beq.n	8008e72 <_dtoa_r+0xa3a>
 8008dca:	3201      	adds	r2, #1
 8008dcc:	701a      	strb	r2, [r3, #0]
 8008dce:	e60c      	b.n	80089ea <_dtoa_r+0x5b2>
 8008dd0:	2a00      	cmp	r2, #0
 8008dd2:	dd07      	ble.n	8008de4 <_dtoa_r+0x9ac>
 8008dd4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008dd8:	d0ed      	beq.n	8008db6 <_dtoa_r+0x97e>
 8008dda:	f10a 0301 	add.w	r3, sl, #1
 8008dde:	f88b 3000 	strb.w	r3, [fp]
 8008de2:	e602      	b.n	80089ea <_dtoa_r+0x5b2>
 8008de4:	9b05      	ldr	r3, [sp, #20]
 8008de6:	9a05      	ldr	r2, [sp, #20]
 8008de8:	f803 ac01 	strb.w	sl, [r3, #-1]
 8008dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d029      	beq.n	8008e46 <_dtoa_r+0xa0e>
 8008df2:	9901      	ldr	r1, [sp, #4]
 8008df4:	2300      	movs	r3, #0
 8008df6:	220a      	movs	r2, #10
 8008df8:	4648      	mov	r0, r9
 8008dfa:	f000 fbb9 	bl	8009570 <__multadd>
 8008dfe:	45a8      	cmp	r8, r5
 8008e00:	9001      	str	r0, [sp, #4]
 8008e02:	f04f 0300 	mov.w	r3, #0
 8008e06:	f04f 020a 	mov.w	r2, #10
 8008e0a:	4641      	mov	r1, r8
 8008e0c:	4648      	mov	r0, r9
 8008e0e:	d107      	bne.n	8008e20 <_dtoa_r+0x9e8>
 8008e10:	f000 fbae 	bl	8009570 <__multadd>
 8008e14:	4680      	mov	r8, r0
 8008e16:	4605      	mov	r5, r0
 8008e18:	9b05      	ldr	r3, [sp, #20]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	9305      	str	r3, [sp, #20]
 8008e1e:	e775      	b.n	8008d0c <_dtoa_r+0x8d4>
 8008e20:	f000 fba6 	bl	8009570 <__multadd>
 8008e24:	4629      	mov	r1, r5
 8008e26:	4680      	mov	r8, r0
 8008e28:	2300      	movs	r3, #0
 8008e2a:	220a      	movs	r2, #10
 8008e2c:	4648      	mov	r0, r9
 8008e2e:	f000 fb9f 	bl	8009570 <__multadd>
 8008e32:	4605      	mov	r5, r0
 8008e34:	e7f0      	b.n	8008e18 <_dtoa_r+0x9e0>
 8008e36:	f1bb 0f00 	cmp.w	fp, #0
 8008e3a:	bfcc      	ite	gt
 8008e3c:	465e      	movgt	r6, fp
 8008e3e:	2601      	movle	r6, #1
 8008e40:	443e      	add	r6, r7
 8008e42:	f04f 0800 	mov.w	r8, #0
 8008e46:	9901      	ldr	r1, [sp, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	4648      	mov	r0, r9
 8008e4c:	f000 fd3c 	bl	80098c8 <__lshift>
 8008e50:	4621      	mov	r1, r4
 8008e52:	9001      	str	r0, [sp, #4]
 8008e54:	f000 fda4 	bl	80099a0 <__mcmp>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	dcaf      	bgt.n	8008dbc <_dtoa_r+0x984>
 8008e5c:	d102      	bne.n	8008e64 <_dtoa_r+0xa2c>
 8008e5e:	f01a 0f01 	tst.w	sl, #1
 8008e62:	d1ab      	bne.n	8008dbc <_dtoa_r+0x984>
 8008e64:	4633      	mov	r3, r6
 8008e66:	461e      	mov	r6, r3
 8008e68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e6c:	2a30      	cmp	r2, #48	@ 0x30
 8008e6e:	d0fa      	beq.n	8008e66 <_dtoa_r+0xa2e>
 8008e70:	e5bb      	b.n	80089ea <_dtoa_r+0x5b2>
 8008e72:	429f      	cmp	r7, r3
 8008e74:	d1a3      	bne.n	8008dbe <_dtoa_r+0x986>
 8008e76:	9b04      	ldr	r3, [sp, #16]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	2331      	movs	r3, #49	@ 0x31
 8008e7e:	703b      	strb	r3, [r7, #0]
 8008e80:	e5b3      	b.n	80089ea <_dtoa_r+0x5b2>
 8008e82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008e84:	4f16      	ldr	r7, [pc, #88]	@ (8008ee0 <_dtoa_r+0xaa8>)
 8008e86:	b11b      	cbz	r3, 8008e90 <_dtoa_r+0xa58>
 8008e88:	f107 0308 	add.w	r3, r7, #8
 8008e8c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	4638      	mov	r0, r7
 8008e92:	b011      	add	sp, #68	@ 0x44
 8008e94:	ecbd 8b02 	vpop	{d8}
 8008e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9c:	9b07      	ldr	r3, [sp, #28]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	f77f ae36 	ble.w	8008b10 <_dtoa_r+0x6d8>
 8008ea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ea6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ea8:	2001      	movs	r0, #1
 8008eaa:	e656      	b.n	8008b5a <_dtoa_r+0x722>
 8008eac:	f1bb 0f00 	cmp.w	fp, #0
 8008eb0:	f77f aed7 	ble.w	8008c62 <_dtoa_r+0x82a>
 8008eb4:	463e      	mov	r6, r7
 8008eb6:	9801      	ldr	r0, [sp, #4]
 8008eb8:	4621      	mov	r1, r4
 8008eba:	f7ff fa33 	bl	8008324 <quorem>
 8008ebe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008ec2:	f806 ab01 	strb.w	sl, [r6], #1
 8008ec6:	1bf2      	subs	r2, r6, r7
 8008ec8:	4593      	cmp	fp, r2
 8008eca:	ddb4      	ble.n	8008e36 <_dtoa_r+0x9fe>
 8008ecc:	9901      	ldr	r1, [sp, #4]
 8008ece:	2300      	movs	r3, #0
 8008ed0:	220a      	movs	r2, #10
 8008ed2:	4648      	mov	r0, r9
 8008ed4:	f000 fb4c 	bl	8009570 <__multadd>
 8008ed8:	9001      	str	r0, [sp, #4]
 8008eda:	e7ec      	b.n	8008eb6 <_dtoa_r+0xa7e>
 8008edc:	0801db0e 	.word	0x0801db0e
 8008ee0:	0801da92 	.word	0x0801da92

08008ee4 <_free_r>:
 8008ee4:	b538      	push	{r3, r4, r5, lr}
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	2900      	cmp	r1, #0
 8008eea:	d041      	beq.n	8008f70 <_free_r+0x8c>
 8008eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef0:	1f0c      	subs	r4, r1, #4
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	bfb8      	it	lt
 8008ef6:	18e4      	addlt	r4, r4, r3
 8008ef8:	f7ff f870 	bl	8007fdc <__malloc_lock>
 8008efc:	4a1d      	ldr	r2, [pc, #116]	@ (8008f74 <_free_r+0x90>)
 8008efe:	6813      	ldr	r3, [r2, #0]
 8008f00:	b933      	cbnz	r3, 8008f10 <_free_r+0x2c>
 8008f02:	6063      	str	r3, [r4, #4]
 8008f04:	6014      	str	r4, [r2, #0]
 8008f06:	4628      	mov	r0, r5
 8008f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f0c:	f7ff b86c 	b.w	8007fe8 <__malloc_unlock>
 8008f10:	42a3      	cmp	r3, r4
 8008f12:	d908      	bls.n	8008f26 <_free_r+0x42>
 8008f14:	6820      	ldr	r0, [r4, #0]
 8008f16:	1821      	adds	r1, r4, r0
 8008f18:	428b      	cmp	r3, r1
 8008f1a:	bf01      	itttt	eq
 8008f1c:	6819      	ldreq	r1, [r3, #0]
 8008f1e:	685b      	ldreq	r3, [r3, #4]
 8008f20:	1809      	addeq	r1, r1, r0
 8008f22:	6021      	streq	r1, [r4, #0]
 8008f24:	e7ed      	b.n	8008f02 <_free_r+0x1e>
 8008f26:	461a      	mov	r2, r3
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	b10b      	cbz	r3, 8008f30 <_free_r+0x4c>
 8008f2c:	42a3      	cmp	r3, r4
 8008f2e:	d9fa      	bls.n	8008f26 <_free_r+0x42>
 8008f30:	6811      	ldr	r1, [r2, #0]
 8008f32:	1850      	adds	r0, r2, r1
 8008f34:	42a0      	cmp	r0, r4
 8008f36:	d10b      	bne.n	8008f50 <_free_r+0x6c>
 8008f38:	6820      	ldr	r0, [r4, #0]
 8008f3a:	4401      	add	r1, r0
 8008f3c:	1850      	adds	r0, r2, r1
 8008f3e:	4283      	cmp	r3, r0
 8008f40:	6011      	str	r1, [r2, #0]
 8008f42:	d1e0      	bne.n	8008f06 <_free_r+0x22>
 8008f44:	6818      	ldr	r0, [r3, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	6053      	str	r3, [r2, #4]
 8008f4a:	4408      	add	r0, r1
 8008f4c:	6010      	str	r0, [r2, #0]
 8008f4e:	e7da      	b.n	8008f06 <_free_r+0x22>
 8008f50:	d902      	bls.n	8008f58 <_free_r+0x74>
 8008f52:	230c      	movs	r3, #12
 8008f54:	602b      	str	r3, [r5, #0]
 8008f56:	e7d6      	b.n	8008f06 <_free_r+0x22>
 8008f58:	6820      	ldr	r0, [r4, #0]
 8008f5a:	1821      	adds	r1, r4, r0
 8008f5c:	428b      	cmp	r3, r1
 8008f5e:	bf04      	itt	eq
 8008f60:	6819      	ldreq	r1, [r3, #0]
 8008f62:	685b      	ldreq	r3, [r3, #4]
 8008f64:	6063      	str	r3, [r4, #4]
 8008f66:	bf04      	itt	eq
 8008f68:	1809      	addeq	r1, r1, r0
 8008f6a:	6021      	streq	r1, [r4, #0]
 8008f6c:	6054      	str	r4, [r2, #4]
 8008f6e:	e7ca      	b.n	8008f06 <_free_r+0x22>
 8008f70:	bd38      	pop	{r3, r4, r5, pc}
 8008f72:	bf00      	nop
 8008f74:	24000f80 	.word	0x24000f80

08008f78 <__ssputs_r>:
 8008f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f7c:	688e      	ldr	r6, [r1, #8]
 8008f7e:	461f      	mov	r7, r3
 8008f80:	42be      	cmp	r6, r7
 8008f82:	680b      	ldr	r3, [r1, #0]
 8008f84:	4682      	mov	sl, r0
 8008f86:	460c      	mov	r4, r1
 8008f88:	4690      	mov	r8, r2
 8008f8a:	d82d      	bhi.n	8008fe8 <__ssputs_r+0x70>
 8008f8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f94:	d026      	beq.n	8008fe4 <__ssputs_r+0x6c>
 8008f96:	6965      	ldr	r5, [r4, #20]
 8008f98:	6909      	ldr	r1, [r1, #16]
 8008f9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f9e:	eba3 0901 	sub.w	r9, r3, r1
 8008fa2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fa6:	1c7b      	adds	r3, r7, #1
 8008fa8:	444b      	add	r3, r9
 8008faa:	106d      	asrs	r5, r5, #1
 8008fac:	429d      	cmp	r5, r3
 8008fae:	bf38      	it	cc
 8008fb0:	461d      	movcc	r5, r3
 8008fb2:	0553      	lsls	r3, r2, #21
 8008fb4:	d527      	bpl.n	8009006 <__ssputs_r+0x8e>
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	f7fe fd56 	bl	8007a68 <_malloc_r>
 8008fbc:	4606      	mov	r6, r0
 8008fbe:	b360      	cbz	r0, 800901a <__ssputs_r+0xa2>
 8008fc0:	6921      	ldr	r1, [r4, #16]
 8008fc2:	464a      	mov	r2, r9
 8008fc4:	f7ff f981 	bl	80082ca <memcpy>
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fd2:	81a3      	strh	r3, [r4, #12]
 8008fd4:	6126      	str	r6, [r4, #16]
 8008fd6:	6165      	str	r5, [r4, #20]
 8008fd8:	444e      	add	r6, r9
 8008fda:	eba5 0509 	sub.w	r5, r5, r9
 8008fde:	6026      	str	r6, [r4, #0]
 8008fe0:	60a5      	str	r5, [r4, #8]
 8008fe2:	463e      	mov	r6, r7
 8008fe4:	42be      	cmp	r6, r7
 8008fe6:	d900      	bls.n	8008fea <__ssputs_r+0x72>
 8008fe8:	463e      	mov	r6, r7
 8008fea:	6820      	ldr	r0, [r4, #0]
 8008fec:	4632      	mov	r2, r6
 8008fee:	4641      	mov	r1, r8
 8008ff0:	f000 ff32 	bl	8009e58 <memmove>
 8008ff4:	68a3      	ldr	r3, [r4, #8]
 8008ff6:	1b9b      	subs	r3, r3, r6
 8008ff8:	60a3      	str	r3, [r4, #8]
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	4433      	add	r3, r6
 8008ffe:	6023      	str	r3, [r4, #0]
 8009000:	2000      	movs	r0, #0
 8009002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009006:	462a      	mov	r2, r5
 8009008:	f7ff f8b8 	bl	800817c <_realloc_r>
 800900c:	4606      	mov	r6, r0
 800900e:	2800      	cmp	r0, #0
 8009010:	d1e0      	bne.n	8008fd4 <__ssputs_r+0x5c>
 8009012:	6921      	ldr	r1, [r4, #16]
 8009014:	4650      	mov	r0, sl
 8009016:	f7ff ff65 	bl	8008ee4 <_free_r>
 800901a:	230c      	movs	r3, #12
 800901c:	f8ca 3000 	str.w	r3, [sl]
 8009020:	89a3      	ldrh	r3, [r4, #12]
 8009022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009026:	81a3      	strh	r3, [r4, #12]
 8009028:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800902c:	e7e9      	b.n	8009002 <__ssputs_r+0x8a>
	...

08009030 <_svfiprintf_r>:
 8009030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	4698      	mov	r8, r3
 8009036:	898b      	ldrh	r3, [r1, #12]
 8009038:	061b      	lsls	r3, r3, #24
 800903a:	b09d      	sub	sp, #116	@ 0x74
 800903c:	4607      	mov	r7, r0
 800903e:	460d      	mov	r5, r1
 8009040:	4614      	mov	r4, r2
 8009042:	d510      	bpl.n	8009066 <_svfiprintf_r+0x36>
 8009044:	690b      	ldr	r3, [r1, #16]
 8009046:	b973      	cbnz	r3, 8009066 <_svfiprintf_r+0x36>
 8009048:	2140      	movs	r1, #64	@ 0x40
 800904a:	f7fe fd0d 	bl	8007a68 <_malloc_r>
 800904e:	6028      	str	r0, [r5, #0]
 8009050:	6128      	str	r0, [r5, #16]
 8009052:	b930      	cbnz	r0, 8009062 <_svfiprintf_r+0x32>
 8009054:	230c      	movs	r3, #12
 8009056:	603b      	str	r3, [r7, #0]
 8009058:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800905c:	b01d      	add	sp, #116	@ 0x74
 800905e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009062:	2340      	movs	r3, #64	@ 0x40
 8009064:	616b      	str	r3, [r5, #20]
 8009066:	2300      	movs	r3, #0
 8009068:	9309      	str	r3, [sp, #36]	@ 0x24
 800906a:	2320      	movs	r3, #32
 800906c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009070:	f8cd 800c 	str.w	r8, [sp, #12]
 8009074:	2330      	movs	r3, #48	@ 0x30
 8009076:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009214 <_svfiprintf_r+0x1e4>
 800907a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800907e:	f04f 0901 	mov.w	r9, #1
 8009082:	4623      	mov	r3, r4
 8009084:	469a      	mov	sl, r3
 8009086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800908a:	b10a      	cbz	r2, 8009090 <_svfiprintf_r+0x60>
 800908c:	2a25      	cmp	r2, #37	@ 0x25
 800908e:	d1f9      	bne.n	8009084 <_svfiprintf_r+0x54>
 8009090:	ebba 0b04 	subs.w	fp, sl, r4
 8009094:	d00b      	beq.n	80090ae <_svfiprintf_r+0x7e>
 8009096:	465b      	mov	r3, fp
 8009098:	4622      	mov	r2, r4
 800909a:	4629      	mov	r1, r5
 800909c:	4638      	mov	r0, r7
 800909e:	f7ff ff6b 	bl	8008f78 <__ssputs_r>
 80090a2:	3001      	adds	r0, #1
 80090a4:	f000 80a7 	beq.w	80091f6 <_svfiprintf_r+0x1c6>
 80090a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090aa:	445a      	add	r2, fp
 80090ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80090ae:	f89a 3000 	ldrb.w	r3, [sl]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f000 809f 	beq.w	80091f6 <_svfiprintf_r+0x1c6>
 80090b8:	2300      	movs	r3, #0
 80090ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090c2:	f10a 0a01 	add.w	sl, sl, #1
 80090c6:	9304      	str	r3, [sp, #16]
 80090c8:	9307      	str	r3, [sp, #28]
 80090ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80090d0:	4654      	mov	r4, sl
 80090d2:	2205      	movs	r2, #5
 80090d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090d8:	484e      	ldr	r0, [pc, #312]	@ (8009214 <_svfiprintf_r+0x1e4>)
 80090da:	f7f7 f901 	bl	80002e0 <memchr>
 80090de:	9a04      	ldr	r2, [sp, #16]
 80090e0:	b9d8      	cbnz	r0, 800911a <_svfiprintf_r+0xea>
 80090e2:	06d0      	lsls	r0, r2, #27
 80090e4:	bf44      	itt	mi
 80090e6:	2320      	movmi	r3, #32
 80090e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090ec:	0711      	lsls	r1, r2, #28
 80090ee:	bf44      	itt	mi
 80090f0:	232b      	movmi	r3, #43	@ 0x2b
 80090f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090f6:	f89a 3000 	ldrb.w	r3, [sl]
 80090fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80090fc:	d015      	beq.n	800912a <_svfiprintf_r+0xfa>
 80090fe:	9a07      	ldr	r2, [sp, #28]
 8009100:	4654      	mov	r4, sl
 8009102:	2000      	movs	r0, #0
 8009104:	f04f 0c0a 	mov.w	ip, #10
 8009108:	4621      	mov	r1, r4
 800910a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800910e:	3b30      	subs	r3, #48	@ 0x30
 8009110:	2b09      	cmp	r3, #9
 8009112:	d94b      	bls.n	80091ac <_svfiprintf_r+0x17c>
 8009114:	b1b0      	cbz	r0, 8009144 <_svfiprintf_r+0x114>
 8009116:	9207      	str	r2, [sp, #28]
 8009118:	e014      	b.n	8009144 <_svfiprintf_r+0x114>
 800911a:	eba0 0308 	sub.w	r3, r0, r8
 800911e:	fa09 f303 	lsl.w	r3, r9, r3
 8009122:	4313      	orrs	r3, r2
 8009124:	9304      	str	r3, [sp, #16]
 8009126:	46a2      	mov	sl, r4
 8009128:	e7d2      	b.n	80090d0 <_svfiprintf_r+0xa0>
 800912a:	9b03      	ldr	r3, [sp, #12]
 800912c:	1d19      	adds	r1, r3, #4
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	9103      	str	r1, [sp, #12]
 8009132:	2b00      	cmp	r3, #0
 8009134:	bfbb      	ittet	lt
 8009136:	425b      	neglt	r3, r3
 8009138:	f042 0202 	orrlt.w	r2, r2, #2
 800913c:	9307      	strge	r3, [sp, #28]
 800913e:	9307      	strlt	r3, [sp, #28]
 8009140:	bfb8      	it	lt
 8009142:	9204      	strlt	r2, [sp, #16]
 8009144:	7823      	ldrb	r3, [r4, #0]
 8009146:	2b2e      	cmp	r3, #46	@ 0x2e
 8009148:	d10a      	bne.n	8009160 <_svfiprintf_r+0x130>
 800914a:	7863      	ldrb	r3, [r4, #1]
 800914c:	2b2a      	cmp	r3, #42	@ 0x2a
 800914e:	d132      	bne.n	80091b6 <_svfiprintf_r+0x186>
 8009150:	9b03      	ldr	r3, [sp, #12]
 8009152:	1d1a      	adds	r2, r3, #4
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	9203      	str	r2, [sp, #12]
 8009158:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800915c:	3402      	adds	r4, #2
 800915e:	9305      	str	r3, [sp, #20]
 8009160:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009224 <_svfiprintf_r+0x1f4>
 8009164:	7821      	ldrb	r1, [r4, #0]
 8009166:	2203      	movs	r2, #3
 8009168:	4650      	mov	r0, sl
 800916a:	f7f7 f8b9 	bl	80002e0 <memchr>
 800916e:	b138      	cbz	r0, 8009180 <_svfiprintf_r+0x150>
 8009170:	9b04      	ldr	r3, [sp, #16]
 8009172:	eba0 000a 	sub.w	r0, r0, sl
 8009176:	2240      	movs	r2, #64	@ 0x40
 8009178:	4082      	lsls	r2, r0
 800917a:	4313      	orrs	r3, r2
 800917c:	3401      	adds	r4, #1
 800917e:	9304      	str	r3, [sp, #16]
 8009180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009184:	4824      	ldr	r0, [pc, #144]	@ (8009218 <_svfiprintf_r+0x1e8>)
 8009186:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800918a:	2206      	movs	r2, #6
 800918c:	f7f7 f8a8 	bl	80002e0 <memchr>
 8009190:	2800      	cmp	r0, #0
 8009192:	d036      	beq.n	8009202 <_svfiprintf_r+0x1d2>
 8009194:	4b21      	ldr	r3, [pc, #132]	@ (800921c <_svfiprintf_r+0x1ec>)
 8009196:	bb1b      	cbnz	r3, 80091e0 <_svfiprintf_r+0x1b0>
 8009198:	9b03      	ldr	r3, [sp, #12]
 800919a:	3307      	adds	r3, #7
 800919c:	f023 0307 	bic.w	r3, r3, #7
 80091a0:	3308      	adds	r3, #8
 80091a2:	9303      	str	r3, [sp, #12]
 80091a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091a6:	4433      	add	r3, r6
 80091a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80091aa:	e76a      	b.n	8009082 <_svfiprintf_r+0x52>
 80091ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80091b0:	460c      	mov	r4, r1
 80091b2:	2001      	movs	r0, #1
 80091b4:	e7a8      	b.n	8009108 <_svfiprintf_r+0xd8>
 80091b6:	2300      	movs	r3, #0
 80091b8:	3401      	adds	r4, #1
 80091ba:	9305      	str	r3, [sp, #20]
 80091bc:	4619      	mov	r1, r3
 80091be:	f04f 0c0a 	mov.w	ip, #10
 80091c2:	4620      	mov	r0, r4
 80091c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091c8:	3a30      	subs	r2, #48	@ 0x30
 80091ca:	2a09      	cmp	r2, #9
 80091cc:	d903      	bls.n	80091d6 <_svfiprintf_r+0x1a6>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d0c6      	beq.n	8009160 <_svfiprintf_r+0x130>
 80091d2:	9105      	str	r1, [sp, #20]
 80091d4:	e7c4      	b.n	8009160 <_svfiprintf_r+0x130>
 80091d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80091da:	4604      	mov	r4, r0
 80091dc:	2301      	movs	r3, #1
 80091de:	e7f0      	b.n	80091c2 <_svfiprintf_r+0x192>
 80091e0:	ab03      	add	r3, sp, #12
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	462a      	mov	r2, r5
 80091e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009220 <_svfiprintf_r+0x1f0>)
 80091e8:	a904      	add	r1, sp, #16
 80091ea:	4638      	mov	r0, r7
 80091ec:	f7fe f9f8 	bl	80075e0 <_printf_float>
 80091f0:	1c42      	adds	r2, r0, #1
 80091f2:	4606      	mov	r6, r0
 80091f4:	d1d6      	bne.n	80091a4 <_svfiprintf_r+0x174>
 80091f6:	89ab      	ldrh	r3, [r5, #12]
 80091f8:	065b      	lsls	r3, r3, #25
 80091fa:	f53f af2d 	bmi.w	8009058 <_svfiprintf_r+0x28>
 80091fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009200:	e72c      	b.n	800905c <_svfiprintf_r+0x2c>
 8009202:	ab03      	add	r3, sp, #12
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	462a      	mov	r2, r5
 8009208:	4b05      	ldr	r3, [pc, #20]	@ (8009220 <_svfiprintf_r+0x1f0>)
 800920a:	a904      	add	r1, sp, #16
 800920c:	4638      	mov	r0, r7
 800920e:	f7fe fd19 	bl	8007c44 <_printf_i>
 8009212:	e7ed      	b.n	80091f0 <_svfiprintf_r+0x1c0>
 8009214:	0801db1f 	.word	0x0801db1f
 8009218:	0801db29 	.word	0x0801db29
 800921c:	080075e1 	.word	0x080075e1
 8009220:	08008f79 	.word	0x08008f79
 8009224:	0801db25 	.word	0x0801db25

08009228 <__sfputc_r>:
 8009228:	6893      	ldr	r3, [r2, #8]
 800922a:	3b01      	subs	r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	b410      	push	{r4}
 8009230:	6093      	str	r3, [r2, #8]
 8009232:	da08      	bge.n	8009246 <__sfputc_r+0x1e>
 8009234:	6994      	ldr	r4, [r2, #24]
 8009236:	42a3      	cmp	r3, r4
 8009238:	db01      	blt.n	800923e <__sfputc_r+0x16>
 800923a:	290a      	cmp	r1, #10
 800923c:	d103      	bne.n	8009246 <__sfputc_r+0x1e>
 800923e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009242:	f000 bd13 	b.w	8009c6c <__swbuf_r>
 8009246:	6813      	ldr	r3, [r2, #0]
 8009248:	1c58      	adds	r0, r3, #1
 800924a:	6010      	str	r0, [r2, #0]
 800924c:	7019      	strb	r1, [r3, #0]
 800924e:	4608      	mov	r0, r1
 8009250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009254:	4770      	bx	lr

08009256 <__sfputs_r>:
 8009256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009258:	4606      	mov	r6, r0
 800925a:	460f      	mov	r7, r1
 800925c:	4614      	mov	r4, r2
 800925e:	18d5      	adds	r5, r2, r3
 8009260:	42ac      	cmp	r4, r5
 8009262:	d101      	bne.n	8009268 <__sfputs_r+0x12>
 8009264:	2000      	movs	r0, #0
 8009266:	e007      	b.n	8009278 <__sfputs_r+0x22>
 8009268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800926c:	463a      	mov	r2, r7
 800926e:	4630      	mov	r0, r6
 8009270:	f7ff ffda 	bl	8009228 <__sfputc_r>
 8009274:	1c43      	adds	r3, r0, #1
 8009276:	d1f3      	bne.n	8009260 <__sfputs_r+0xa>
 8009278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800927c <_vfiprintf_r>:
 800927c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009280:	460d      	mov	r5, r1
 8009282:	b09d      	sub	sp, #116	@ 0x74
 8009284:	4614      	mov	r4, r2
 8009286:	4698      	mov	r8, r3
 8009288:	4606      	mov	r6, r0
 800928a:	b118      	cbz	r0, 8009294 <_vfiprintf_r+0x18>
 800928c:	6a03      	ldr	r3, [r0, #32]
 800928e:	b90b      	cbnz	r3, 8009294 <_vfiprintf_r+0x18>
 8009290:	f7fe ff5c 	bl	800814c <__sinit>
 8009294:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009296:	07d9      	lsls	r1, r3, #31
 8009298:	d405      	bmi.n	80092a6 <_vfiprintf_r+0x2a>
 800929a:	89ab      	ldrh	r3, [r5, #12]
 800929c:	059a      	lsls	r2, r3, #22
 800929e:	d402      	bmi.n	80092a6 <_vfiprintf_r+0x2a>
 80092a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092a2:	f7ff f810 	bl	80082c6 <__retarget_lock_acquire_recursive>
 80092a6:	89ab      	ldrh	r3, [r5, #12]
 80092a8:	071b      	lsls	r3, r3, #28
 80092aa:	d501      	bpl.n	80092b0 <_vfiprintf_r+0x34>
 80092ac:	692b      	ldr	r3, [r5, #16]
 80092ae:	b99b      	cbnz	r3, 80092d8 <_vfiprintf_r+0x5c>
 80092b0:	4629      	mov	r1, r5
 80092b2:	4630      	mov	r0, r6
 80092b4:	f000 fd18 	bl	8009ce8 <__swsetup_r>
 80092b8:	b170      	cbz	r0, 80092d8 <_vfiprintf_r+0x5c>
 80092ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092bc:	07dc      	lsls	r4, r3, #31
 80092be:	d504      	bpl.n	80092ca <_vfiprintf_r+0x4e>
 80092c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092c4:	b01d      	add	sp, #116	@ 0x74
 80092c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ca:	89ab      	ldrh	r3, [r5, #12]
 80092cc:	0598      	lsls	r0, r3, #22
 80092ce:	d4f7      	bmi.n	80092c0 <_vfiprintf_r+0x44>
 80092d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092d2:	f7fe fff9 	bl	80082c8 <__retarget_lock_release_recursive>
 80092d6:	e7f3      	b.n	80092c0 <_vfiprintf_r+0x44>
 80092d8:	2300      	movs	r3, #0
 80092da:	9309      	str	r3, [sp, #36]	@ 0x24
 80092dc:	2320      	movs	r3, #32
 80092de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80092e6:	2330      	movs	r3, #48	@ 0x30
 80092e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009498 <_vfiprintf_r+0x21c>
 80092ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092f0:	f04f 0901 	mov.w	r9, #1
 80092f4:	4623      	mov	r3, r4
 80092f6:	469a      	mov	sl, r3
 80092f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092fc:	b10a      	cbz	r2, 8009302 <_vfiprintf_r+0x86>
 80092fe:	2a25      	cmp	r2, #37	@ 0x25
 8009300:	d1f9      	bne.n	80092f6 <_vfiprintf_r+0x7a>
 8009302:	ebba 0b04 	subs.w	fp, sl, r4
 8009306:	d00b      	beq.n	8009320 <_vfiprintf_r+0xa4>
 8009308:	465b      	mov	r3, fp
 800930a:	4622      	mov	r2, r4
 800930c:	4629      	mov	r1, r5
 800930e:	4630      	mov	r0, r6
 8009310:	f7ff ffa1 	bl	8009256 <__sfputs_r>
 8009314:	3001      	adds	r0, #1
 8009316:	f000 80a7 	beq.w	8009468 <_vfiprintf_r+0x1ec>
 800931a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800931c:	445a      	add	r2, fp
 800931e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009320:	f89a 3000 	ldrb.w	r3, [sl]
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 809f 	beq.w	8009468 <_vfiprintf_r+0x1ec>
 800932a:	2300      	movs	r3, #0
 800932c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009334:	f10a 0a01 	add.w	sl, sl, #1
 8009338:	9304      	str	r3, [sp, #16]
 800933a:	9307      	str	r3, [sp, #28]
 800933c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009340:	931a      	str	r3, [sp, #104]	@ 0x68
 8009342:	4654      	mov	r4, sl
 8009344:	2205      	movs	r2, #5
 8009346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800934a:	4853      	ldr	r0, [pc, #332]	@ (8009498 <_vfiprintf_r+0x21c>)
 800934c:	f7f6 ffc8 	bl	80002e0 <memchr>
 8009350:	9a04      	ldr	r2, [sp, #16]
 8009352:	b9d8      	cbnz	r0, 800938c <_vfiprintf_r+0x110>
 8009354:	06d1      	lsls	r1, r2, #27
 8009356:	bf44      	itt	mi
 8009358:	2320      	movmi	r3, #32
 800935a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800935e:	0713      	lsls	r3, r2, #28
 8009360:	bf44      	itt	mi
 8009362:	232b      	movmi	r3, #43	@ 0x2b
 8009364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009368:	f89a 3000 	ldrb.w	r3, [sl]
 800936c:	2b2a      	cmp	r3, #42	@ 0x2a
 800936e:	d015      	beq.n	800939c <_vfiprintf_r+0x120>
 8009370:	9a07      	ldr	r2, [sp, #28]
 8009372:	4654      	mov	r4, sl
 8009374:	2000      	movs	r0, #0
 8009376:	f04f 0c0a 	mov.w	ip, #10
 800937a:	4621      	mov	r1, r4
 800937c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009380:	3b30      	subs	r3, #48	@ 0x30
 8009382:	2b09      	cmp	r3, #9
 8009384:	d94b      	bls.n	800941e <_vfiprintf_r+0x1a2>
 8009386:	b1b0      	cbz	r0, 80093b6 <_vfiprintf_r+0x13a>
 8009388:	9207      	str	r2, [sp, #28]
 800938a:	e014      	b.n	80093b6 <_vfiprintf_r+0x13a>
 800938c:	eba0 0308 	sub.w	r3, r0, r8
 8009390:	fa09 f303 	lsl.w	r3, r9, r3
 8009394:	4313      	orrs	r3, r2
 8009396:	9304      	str	r3, [sp, #16]
 8009398:	46a2      	mov	sl, r4
 800939a:	e7d2      	b.n	8009342 <_vfiprintf_r+0xc6>
 800939c:	9b03      	ldr	r3, [sp, #12]
 800939e:	1d19      	adds	r1, r3, #4
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	9103      	str	r1, [sp, #12]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	bfbb      	ittet	lt
 80093a8:	425b      	neglt	r3, r3
 80093aa:	f042 0202 	orrlt.w	r2, r2, #2
 80093ae:	9307      	strge	r3, [sp, #28]
 80093b0:	9307      	strlt	r3, [sp, #28]
 80093b2:	bfb8      	it	lt
 80093b4:	9204      	strlt	r2, [sp, #16]
 80093b6:	7823      	ldrb	r3, [r4, #0]
 80093b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80093ba:	d10a      	bne.n	80093d2 <_vfiprintf_r+0x156>
 80093bc:	7863      	ldrb	r3, [r4, #1]
 80093be:	2b2a      	cmp	r3, #42	@ 0x2a
 80093c0:	d132      	bne.n	8009428 <_vfiprintf_r+0x1ac>
 80093c2:	9b03      	ldr	r3, [sp, #12]
 80093c4:	1d1a      	adds	r2, r3, #4
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	9203      	str	r2, [sp, #12]
 80093ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093ce:	3402      	adds	r4, #2
 80093d0:	9305      	str	r3, [sp, #20]
 80093d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80094a8 <_vfiprintf_r+0x22c>
 80093d6:	7821      	ldrb	r1, [r4, #0]
 80093d8:	2203      	movs	r2, #3
 80093da:	4650      	mov	r0, sl
 80093dc:	f7f6 ff80 	bl	80002e0 <memchr>
 80093e0:	b138      	cbz	r0, 80093f2 <_vfiprintf_r+0x176>
 80093e2:	9b04      	ldr	r3, [sp, #16]
 80093e4:	eba0 000a 	sub.w	r0, r0, sl
 80093e8:	2240      	movs	r2, #64	@ 0x40
 80093ea:	4082      	lsls	r2, r0
 80093ec:	4313      	orrs	r3, r2
 80093ee:	3401      	adds	r4, #1
 80093f0:	9304      	str	r3, [sp, #16]
 80093f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f6:	4829      	ldr	r0, [pc, #164]	@ (800949c <_vfiprintf_r+0x220>)
 80093f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093fc:	2206      	movs	r2, #6
 80093fe:	f7f6 ff6f 	bl	80002e0 <memchr>
 8009402:	2800      	cmp	r0, #0
 8009404:	d03f      	beq.n	8009486 <_vfiprintf_r+0x20a>
 8009406:	4b26      	ldr	r3, [pc, #152]	@ (80094a0 <_vfiprintf_r+0x224>)
 8009408:	bb1b      	cbnz	r3, 8009452 <_vfiprintf_r+0x1d6>
 800940a:	9b03      	ldr	r3, [sp, #12]
 800940c:	3307      	adds	r3, #7
 800940e:	f023 0307 	bic.w	r3, r3, #7
 8009412:	3308      	adds	r3, #8
 8009414:	9303      	str	r3, [sp, #12]
 8009416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009418:	443b      	add	r3, r7
 800941a:	9309      	str	r3, [sp, #36]	@ 0x24
 800941c:	e76a      	b.n	80092f4 <_vfiprintf_r+0x78>
 800941e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009422:	460c      	mov	r4, r1
 8009424:	2001      	movs	r0, #1
 8009426:	e7a8      	b.n	800937a <_vfiprintf_r+0xfe>
 8009428:	2300      	movs	r3, #0
 800942a:	3401      	adds	r4, #1
 800942c:	9305      	str	r3, [sp, #20]
 800942e:	4619      	mov	r1, r3
 8009430:	f04f 0c0a 	mov.w	ip, #10
 8009434:	4620      	mov	r0, r4
 8009436:	f810 2b01 	ldrb.w	r2, [r0], #1
 800943a:	3a30      	subs	r2, #48	@ 0x30
 800943c:	2a09      	cmp	r2, #9
 800943e:	d903      	bls.n	8009448 <_vfiprintf_r+0x1cc>
 8009440:	2b00      	cmp	r3, #0
 8009442:	d0c6      	beq.n	80093d2 <_vfiprintf_r+0x156>
 8009444:	9105      	str	r1, [sp, #20]
 8009446:	e7c4      	b.n	80093d2 <_vfiprintf_r+0x156>
 8009448:	fb0c 2101 	mla	r1, ip, r1, r2
 800944c:	4604      	mov	r4, r0
 800944e:	2301      	movs	r3, #1
 8009450:	e7f0      	b.n	8009434 <_vfiprintf_r+0x1b8>
 8009452:	ab03      	add	r3, sp, #12
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	462a      	mov	r2, r5
 8009458:	4b12      	ldr	r3, [pc, #72]	@ (80094a4 <_vfiprintf_r+0x228>)
 800945a:	a904      	add	r1, sp, #16
 800945c:	4630      	mov	r0, r6
 800945e:	f7fe f8bf 	bl	80075e0 <_printf_float>
 8009462:	4607      	mov	r7, r0
 8009464:	1c78      	adds	r0, r7, #1
 8009466:	d1d6      	bne.n	8009416 <_vfiprintf_r+0x19a>
 8009468:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800946a:	07d9      	lsls	r1, r3, #31
 800946c:	d405      	bmi.n	800947a <_vfiprintf_r+0x1fe>
 800946e:	89ab      	ldrh	r3, [r5, #12]
 8009470:	059a      	lsls	r2, r3, #22
 8009472:	d402      	bmi.n	800947a <_vfiprintf_r+0x1fe>
 8009474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009476:	f7fe ff27 	bl	80082c8 <__retarget_lock_release_recursive>
 800947a:	89ab      	ldrh	r3, [r5, #12]
 800947c:	065b      	lsls	r3, r3, #25
 800947e:	f53f af1f 	bmi.w	80092c0 <_vfiprintf_r+0x44>
 8009482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009484:	e71e      	b.n	80092c4 <_vfiprintf_r+0x48>
 8009486:	ab03      	add	r3, sp, #12
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	462a      	mov	r2, r5
 800948c:	4b05      	ldr	r3, [pc, #20]	@ (80094a4 <_vfiprintf_r+0x228>)
 800948e:	a904      	add	r1, sp, #16
 8009490:	4630      	mov	r0, r6
 8009492:	f7fe fbd7 	bl	8007c44 <_printf_i>
 8009496:	e7e4      	b.n	8009462 <_vfiprintf_r+0x1e6>
 8009498:	0801db1f 	.word	0x0801db1f
 800949c:	0801db29 	.word	0x0801db29
 80094a0:	080075e1 	.word	0x080075e1
 80094a4:	08009257 	.word	0x08009257
 80094a8:	0801db25 	.word	0x0801db25

080094ac <_Balloc>:
 80094ac:	b570      	push	{r4, r5, r6, lr}
 80094ae:	69c6      	ldr	r6, [r0, #28]
 80094b0:	4604      	mov	r4, r0
 80094b2:	460d      	mov	r5, r1
 80094b4:	b976      	cbnz	r6, 80094d4 <_Balloc+0x28>
 80094b6:	2010      	movs	r0, #16
 80094b8:	f7fc f9e8 	bl	800588c <__wrap_malloc>
 80094bc:	4602      	mov	r2, r0
 80094be:	61e0      	str	r0, [r4, #28]
 80094c0:	b920      	cbnz	r0, 80094cc <_Balloc+0x20>
 80094c2:	4b18      	ldr	r3, [pc, #96]	@ (8009524 <_Balloc+0x78>)
 80094c4:	4818      	ldr	r0, [pc, #96]	@ (8009528 <_Balloc+0x7c>)
 80094c6:	216b      	movs	r1, #107	@ 0x6b
 80094c8:	f7fe ff0e 	bl	80082e8 <__assert_func>
 80094cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094d0:	6006      	str	r6, [r0, #0]
 80094d2:	60c6      	str	r6, [r0, #12]
 80094d4:	69e6      	ldr	r6, [r4, #28]
 80094d6:	68f3      	ldr	r3, [r6, #12]
 80094d8:	b183      	cbz	r3, 80094fc <_Balloc+0x50>
 80094da:	69e3      	ldr	r3, [r4, #28]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80094e2:	b9b8      	cbnz	r0, 8009514 <_Balloc+0x68>
 80094e4:	2101      	movs	r1, #1
 80094e6:	fa01 f605 	lsl.w	r6, r1, r5
 80094ea:	1d72      	adds	r2, r6, #5
 80094ec:	0092      	lsls	r2, r2, #2
 80094ee:	4620      	mov	r0, r4
 80094f0:	f000 fd3b 	bl	8009f6a <_calloc_r>
 80094f4:	b160      	cbz	r0, 8009510 <_Balloc+0x64>
 80094f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80094fa:	e00e      	b.n	800951a <_Balloc+0x6e>
 80094fc:	2221      	movs	r2, #33	@ 0x21
 80094fe:	2104      	movs	r1, #4
 8009500:	4620      	mov	r0, r4
 8009502:	f000 fd32 	bl	8009f6a <_calloc_r>
 8009506:	69e3      	ldr	r3, [r4, #28]
 8009508:	60f0      	str	r0, [r6, #12]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1e4      	bne.n	80094da <_Balloc+0x2e>
 8009510:	2000      	movs	r0, #0
 8009512:	bd70      	pop	{r4, r5, r6, pc}
 8009514:	6802      	ldr	r2, [r0, #0]
 8009516:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800951a:	2300      	movs	r3, #0
 800951c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009520:	e7f7      	b.n	8009512 <_Balloc+0x66>
 8009522:	bf00      	nop
 8009524:	0801da9f 	.word	0x0801da9f
 8009528:	0801db30 	.word	0x0801db30

0800952c <_Bfree>:
 800952c:	b570      	push	{r4, r5, r6, lr}
 800952e:	69c6      	ldr	r6, [r0, #28]
 8009530:	4605      	mov	r5, r0
 8009532:	460c      	mov	r4, r1
 8009534:	b976      	cbnz	r6, 8009554 <_Bfree+0x28>
 8009536:	2010      	movs	r0, #16
 8009538:	f7fc f9a8 	bl	800588c <__wrap_malloc>
 800953c:	4602      	mov	r2, r0
 800953e:	61e8      	str	r0, [r5, #28]
 8009540:	b920      	cbnz	r0, 800954c <_Bfree+0x20>
 8009542:	4b09      	ldr	r3, [pc, #36]	@ (8009568 <_Bfree+0x3c>)
 8009544:	4809      	ldr	r0, [pc, #36]	@ (800956c <_Bfree+0x40>)
 8009546:	218f      	movs	r1, #143	@ 0x8f
 8009548:	f7fe fece 	bl	80082e8 <__assert_func>
 800954c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009550:	6006      	str	r6, [r0, #0]
 8009552:	60c6      	str	r6, [r0, #12]
 8009554:	b13c      	cbz	r4, 8009566 <_Bfree+0x3a>
 8009556:	69eb      	ldr	r3, [r5, #28]
 8009558:	6862      	ldr	r2, [r4, #4]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009560:	6021      	str	r1, [r4, #0]
 8009562:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009566:	bd70      	pop	{r4, r5, r6, pc}
 8009568:	0801da9f 	.word	0x0801da9f
 800956c:	0801db30 	.word	0x0801db30

08009570 <__multadd>:
 8009570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009574:	690d      	ldr	r5, [r1, #16]
 8009576:	4607      	mov	r7, r0
 8009578:	460c      	mov	r4, r1
 800957a:	461e      	mov	r6, r3
 800957c:	f101 0c14 	add.w	ip, r1, #20
 8009580:	2000      	movs	r0, #0
 8009582:	f8dc 3000 	ldr.w	r3, [ip]
 8009586:	b299      	uxth	r1, r3
 8009588:	fb02 6101 	mla	r1, r2, r1, r6
 800958c:	0c1e      	lsrs	r6, r3, #16
 800958e:	0c0b      	lsrs	r3, r1, #16
 8009590:	fb02 3306 	mla	r3, r2, r6, r3
 8009594:	b289      	uxth	r1, r1
 8009596:	3001      	adds	r0, #1
 8009598:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800959c:	4285      	cmp	r5, r0
 800959e:	f84c 1b04 	str.w	r1, [ip], #4
 80095a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80095a6:	dcec      	bgt.n	8009582 <__multadd+0x12>
 80095a8:	b30e      	cbz	r6, 80095ee <__multadd+0x7e>
 80095aa:	68a3      	ldr	r3, [r4, #8]
 80095ac:	42ab      	cmp	r3, r5
 80095ae:	dc19      	bgt.n	80095e4 <__multadd+0x74>
 80095b0:	6861      	ldr	r1, [r4, #4]
 80095b2:	4638      	mov	r0, r7
 80095b4:	3101      	adds	r1, #1
 80095b6:	f7ff ff79 	bl	80094ac <_Balloc>
 80095ba:	4680      	mov	r8, r0
 80095bc:	b928      	cbnz	r0, 80095ca <__multadd+0x5a>
 80095be:	4602      	mov	r2, r0
 80095c0:	4b0c      	ldr	r3, [pc, #48]	@ (80095f4 <__multadd+0x84>)
 80095c2:	480d      	ldr	r0, [pc, #52]	@ (80095f8 <__multadd+0x88>)
 80095c4:	21ba      	movs	r1, #186	@ 0xba
 80095c6:	f7fe fe8f 	bl	80082e8 <__assert_func>
 80095ca:	6922      	ldr	r2, [r4, #16]
 80095cc:	3202      	adds	r2, #2
 80095ce:	f104 010c 	add.w	r1, r4, #12
 80095d2:	0092      	lsls	r2, r2, #2
 80095d4:	300c      	adds	r0, #12
 80095d6:	f7fe fe78 	bl	80082ca <memcpy>
 80095da:	4621      	mov	r1, r4
 80095dc:	4638      	mov	r0, r7
 80095de:	f7ff ffa5 	bl	800952c <_Bfree>
 80095e2:	4644      	mov	r4, r8
 80095e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80095e8:	3501      	adds	r5, #1
 80095ea:	615e      	str	r6, [r3, #20]
 80095ec:	6125      	str	r5, [r4, #16]
 80095ee:	4620      	mov	r0, r4
 80095f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f4:	0801db0e 	.word	0x0801db0e
 80095f8:	0801db30 	.word	0x0801db30

080095fc <__hi0bits>:
 80095fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009600:	4603      	mov	r3, r0
 8009602:	bf36      	itet	cc
 8009604:	0403      	lslcc	r3, r0, #16
 8009606:	2000      	movcs	r0, #0
 8009608:	2010      	movcc	r0, #16
 800960a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800960e:	bf3c      	itt	cc
 8009610:	021b      	lslcc	r3, r3, #8
 8009612:	3008      	addcc	r0, #8
 8009614:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009618:	bf3c      	itt	cc
 800961a:	011b      	lslcc	r3, r3, #4
 800961c:	3004      	addcc	r0, #4
 800961e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009622:	bf3c      	itt	cc
 8009624:	009b      	lslcc	r3, r3, #2
 8009626:	3002      	addcc	r0, #2
 8009628:	2b00      	cmp	r3, #0
 800962a:	db05      	blt.n	8009638 <__hi0bits+0x3c>
 800962c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009630:	f100 0001 	add.w	r0, r0, #1
 8009634:	bf08      	it	eq
 8009636:	2020      	moveq	r0, #32
 8009638:	4770      	bx	lr

0800963a <__lo0bits>:
 800963a:	6803      	ldr	r3, [r0, #0]
 800963c:	4602      	mov	r2, r0
 800963e:	f013 0007 	ands.w	r0, r3, #7
 8009642:	d00b      	beq.n	800965c <__lo0bits+0x22>
 8009644:	07d9      	lsls	r1, r3, #31
 8009646:	d421      	bmi.n	800968c <__lo0bits+0x52>
 8009648:	0798      	lsls	r0, r3, #30
 800964a:	bf49      	itett	mi
 800964c:	085b      	lsrmi	r3, r3, #1
 800964e:	089b      	lsrpl	r3, r3, #2
 8009650:	2001      	movmi	r0, #1
 8009652:	6013      	strmi	r3, [r2, #0]
 8009654:	bf5c      	itt	pl
 8009656:	6013      	strpl	r3, [r2, #0]
 8009658:	2002      	movpl	r0, #2
 800965a:	4770      	bx	lr
 800965c:	b299      	uxth	r1, r3
 800965e:	b909      	cbnz	r1, 8009664 <__lo0bits+0x2a>
 8009660:	0c1b      	lsrs	r3, r3, #16
 8009662:	2010      	movs	r0, #16
 8009664:	b2d9      	uxtb	r1, r3
 8009666:	b909      	cbnz	r1, 800966c <__lo0bits+0x32>
 8009668:	3008      	adds	r0, #8
 800966a:	0a1b      	lsrs	r3, r3, #8
 800966c:	0719      	lsls	r1, r3, #28
 800966e:	bf04      	itt	eq
 8009670:	091b      	lsreq	r3, r3, #4
 8009672:	3004      	addeq	r0, #4
 8009674:	0799      	lsls	r1, r3, #30
 8009676:	bf04      	itt	eq
 8009678:	089b      	lsreq	r3, r3, #2
 800967a:	3002      	addeq	r0, #2
 800967c:	07d9      	lsls	r1, r3, #31
 800967e:	d403      	bmi.n	8009688 <__lo0bits+0x4e>
 8009680:	085b      	lsrs	r3, r3, #1
 8009682:	f100 0001 	add.w	r0, r0, #1
 8009686:	d003      	beq.n	8009690 <__lo0bits+0x56>
 8009688:	6013      	str	r3, [r2, #0]
 800968a:	4770      	bx	lr
 800968c:	2000      	movs	r0, #0
 800968e:	4770      	bx	lr
 8009690:	2020      	movs	r0, #32
 8009692:	4770      	bx	lr

08009694 <__i2b>:
 8009694:	b510      	push	{r4, lr}
 8009696:	460c      	mov	r4, r1
 8009698:	2101      	movs	r1, #1
 800969a:	f7ff ff07 	bl	80094ac <_Balloc>
 800969e:	4602      	mov	r2, r0
 80096a0:	b928      	cbnz	r0, 80096ae <__i2b+0x1a>
 80096a2:	4b05      	ldr	r3, [pc, #20]	@ (80096b8 <__i2b+0x24>)
 80096a4:	4805      	ldr	r0, [pc, #20]	@ (80096bc <__i2b+0x28>)
 80096a6:	f240 1145 	movw	r1, #325	@ 0x145
 80096aa:	f7fe fe1d 	bl	80082e8 <__assert_func>
 80096ae:	2301      	movs	r3, #1
 80096b0:	6144      	str	r4, [r0, #20]
 80096b2:	6103      	str	r3, [r0, #16]
 80096b4:	bd10      	pop	{r4, pc}
 80096b6:	bf00      	nop
 80096b8:	0801db0e 	.word	0x0801db0e
 80096bc:	0801db30 	.word	0x0801db30

080096c0 <__multiply>:
 80096c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c4:	4614      	mov	r4, r2
 80096c6:	690a      	ldr	r2, [r1, #16]
 80096c8:	6923      	ldr	r3, [r4, #16]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	bfa8      	it	ge
 80096ce:	4623      	movge	r3, r4
 80096d0:	460f      	mov	r7, r1
 80096d2:	bfa4      	itt	ge
 80096d4:	460c      	movge	r4, r1
 80096d6:	461f      	movge	r7, r3
 80096d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80096dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80096e0:	68a3      	ldr	r3, [r4, #8]
 80096e2:	6861      	ldr	r1, [r4, #4]
 80096e4:	eb0a 0609 	add.w	r6, sl, r9
 80096e8:	42b3      	cmp	r3, r6
 80096ea:	b085      	sub	sp, #20
 80096ec:	bfb8      	it	lt
 80096ee:	3101      	addlt	r1, #1
 80096f0:	f7ff fedc 	bl	80094ac <_Balloc>
 80096f4:	b930      	cbnz	r0, 8009704 <__multiply+0x44>
 80096f6:	4602      	mov	r2, r0
 80096f8:	4b44      	ldr	r3, [pc, #272]	@ (800980c <__multiply+0x14c>)
 80096fa:	4845      	ldr	r0, [pc, #276]	@ (8009810 <__multiply+0x150>)
 80096fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009700:	f7fe fdf2 	bl	80082e8 <__assert_func>
 8009704:	f100 0514 	add.w	r5, r0, #20
 8009708:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800970c:	462b      	mov	r3, r5
 800970e:	2200      	movs	r2, #0
 8009710:	4543      	cmp	r3, r8
 8009712:	d321      	bcc.n	8009758 <__multiply+0x98>
 8009714:	f107 0114 	add.w	r1, r7, #20
 8009718:	f104 0214 	add.w	r2, r4, #20
 800971c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009720:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009724:	9302      	str	r3, [sp, #8]
 8009726:	1b13      	subs	r3, r2, r4
 8009728:	3b15      	subs	r3, #21
 800972a:	f023 0303 	bic.w	r3, r3, #3
 800972e:	3304      	adds	r3, #4
 8009730:	f104 0715 	add.w	r7, r4, #21
 8009734:	42ba      	cmp	r2, r7
 8009736:	bf38      	it	cc
 8009738:	2304      	movcc	r3, #4
 800973a:	9301      	str	r3, [sp, #4]
 800973c:	9b02      	ldr	r3, [sp, #8]
 800973e:	9103      	str	r1, [sp, #12]
 8009740:	428b      	cmp	r3, r1
 8009742:	d80c      	bhi.n	800975e <__multiply+0x9e>
 8009744:	2e00      	cmp	r6, #0
 8009746:	dd03      	ble.n	8009750 <__multiply+0x90>
 8009748:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800974c:	2b00      	cmp	r3, #0
 800974e:	d05b      	beq.n	8009808 <__multiply+0x148>
 8009750:	6106      	str	r6, [r0, #16]
 8009752:	b005      	add	sp, #20
 8009754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009758:	f843 2b04 	str.w	r2, [r3], #4
 800975c:	e7d8      	b.n	8009710 <__multiply+0x50>
 800975e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009762:	f1ba 0f00 	cmp.w	sl, #0
 8009766:	d024      	beq.n	80097b2 <__multiply+0xf2>
 8009768:	f104 0e14 	add.w	lr, r4, #20
 800976c:	46a9      	mov	r9, r5
 800976e:	f04f 0c00 	mov.w	ip, #0
 8009772:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009776:	f8d9 3000 	ldr.w	r3, [r9]
 800977a:	fa1f fb87 	uxth.w	fp, r7
 800977e:	b29b      	uxth	r3, r3
 8009780:	fb0a 330b 	mla	r3, sl, fp, r3
 8009784:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009788:	f8d9 7000 	ldr.w	r7, [r9]
 800978c:	4463      	add	r3, ip
 800978e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009792:	fb0a c70b 	mla	r7, sl, fp, ip
 8009796:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800979a:	b29b      	uxth	r3, r3
 800979c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80097a0:	4572      	cmp	r2, lr
 80097a2:	f849 3b04 	str.w	r3, [r9], #4
 80097a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80097aa:	d8e2      	bhi.n	8009772 <__multiply+0xb2>
 80097ac:	9b01      	ldr	r3, [sp, #4]
 80097ae:	f845 c003 	str.w	ip, [r5, r3]
 80097b2:	9b03      	ldr	r3, [sp, #12]
 80097b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80097b8:	3104      	adds	r1, #4
 80097ba:	f1b9 0f00 	cmp.w	r9, #0
 80097be:	d021      	beq.n	8009804 <__multiply+0x144>
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	f104 0c14 	add.w	ip, r4, #20
 80097c6:	46ae      	mov	lr, r5
 80097c8:	f04f 0a00 	mov.w	sl, #0
 80097cc:	f8bc b000 	ldrh.w	fp, [ip]
 80097d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80097d4:	fb09 770b 	mla	r7, r9, fp, r7
 80097d8:	4457      	add	r7, sl
 80097da:	b29b      	uxth	r3, r3
 80097dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80097e0:	f84e 3b04 	str.w	r3, [lr], #4
 80097e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80097e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097ec:	f8be 3000 	ldrh.w	r3, [lr]
 80097f0:	fb09 330a 	mla	r3, r9, sl, r3
 80097f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80097f8:	4562      	cmp	r2, ip
 80097fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097fe:	d8e5      	bhi.n	80097cc <__multiply+0x10c>
 8009800:	9f01      	ldr	r7, [sp, #4]
 8009802:	51eb      	str	r3, [r5, r7]
 8009804:	3504      	adds	r5, #4
 8009806:	e799      	b.n	800973c <__multiply+0x7c>
 8009808:	3e01      	subs	r6, #1
 800980a:	e79b      	b.n	8009744 <__multiply+0x84>
 800980c:	0801db0e 	.word	0x0801db0e
 8009810:	0801db30 	.word	0x0801db30

08009814 <__pow5mult>:
 8009814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009818:	4615      	mov	r5, r2
 800981a:	f012 0203 	ands.w	r2, r2, #3
 800981e:	4607      	mov	r7, r0
 8009820:	460e      	mov	r6, r1
 8009822:	d007      	beq.n	8009834 <__pow5mult+0x20>
 8009824:	4c25      	ldr	r4, [pc, #148]	@ (80098bc <__pow5mult+0xa8>)
 8009826:	3a01      	subs	r2, #1
 8009828:	2300      	movs	r3, #0
 800982a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800982e:	f7ff fe9f 	bl	8009570 <__multadd>
 8009832:	4606      	mov	r6, r0
 8009834:	10ad      	asrs	r5, r5, #2
 8009836:	d03d      	beq.n	80098b4 <__pow5mult+0xa0>
 8009838:	69fc      	ldr	r4, [r7, #28]
 800983a:	b97c      	cbnz	r4, 800985c <__pow5mult+0x48>
 800983c:	2010      	movs	r0, #16
 800983e:	f7fc f825 	bl	800588c <__wrap_malloc>
 8009842:	4602      	mov	r2, r0
 8009844:	61f8      	str	r0, [r7, #28]
 8009846:	b928      	cbnz	r0, 8009854 <__pow5mult+0x40>
 8009848:	4b1d      	ldr	r3, [pc, #116]	@ (80098c0 <__pow5mult+0xac>)
 800984a:	481e      	ldr	r0, [pc, #120]	@ (80098c4 <__pow5mult+0xb0>)
 800984c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009850:	f7fe fd4a 	bl	80082e8 <__assert_func>
 8009854:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009858:	6004      	str	r4, [r0, #0]
 800985a:	60c4      	str	r4, [r0, #12]
 800985c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009860:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009864:	b94c      	cbnz	r4, 800987a <__pow5mult+0x66>
 8009866:	f240 2171 	movw	r1, #625	@ 0x271
 800986a:	4638      	mov	r0, r7
 800986c:	f7ff ff12 	bl	8009694 <__i2b>
 8009870:	2300      	movs	r3, #0
 8009872:	f8c8 0008 	str.w	r0, [r8, #8]
 8009876:	4604      	mov	r4, r0
 8009878:	6003      	str	r3, [r0, #0]
 800987a:	f04f 0900 	mov.w	r9, #0
 800987e:	07eb      	lsls	r3, r5, #31
 8009880:	d50a      	bpl.n	8009898 <__pow5mult+0x84>
 8009882:	4631      	mov	r1, r6
 8009884:	4622      	mov	r2, r4
 8009886:	4638      	mov	r0, r7
 8009888:	f7ff ff1a 	bl	80096c0 <__multiply>
 800988c:	4631      	mov	r1, r6
 800988e:	4680      	mov	r8, r0
 8009890:	4638      	mov	r0, r7
 8009892:	f7ff fe4b 	bl	800952c <_Bfree>
 8009896:	4646      	mov	r6, r8
 8009898:	106d      	asrs	r5, r5, #1
 800989a:	d00b      	beq.n	80098b4 <__pow5mult+0xa0>
 800989c:	6820      	ldr	r0, [r4, #0]
 800989e:	b938      	cbnz	r0, 80098b0 <__pow5mult+0x9c>
 80098a0:	4622      	mov	r2, r4
 80098a2:	4621      	mov	r1, r4
 80098a4:	4638      	mov	r0, r7
 80098a6:	f7ff ff0b 	bl	80096c0 <__multiply>
 80098aa:	6020      	str	r0, [r4, #0]
 80098ac:	f8c0 9000 	str.w	r9, [r0]
 80098b0:	4604      	mov	r4, r0
 80098b2:	e7e4      	b.n	800987e <__pow5mult+0x6a>
 80098b4:	4630      	mov	r0, r6
 80098b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ba:	bf00      	nop
 80098bc:	0801db8c 	.word	0x0801db8c
 80098c0:	0801da9f 	.word	0x0801da9f
 80098c4:	0801db30 	.word	0x0801db30

080098c8 <__lshift>:
 80098c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098cc:	460c      	mov	r4, r1
 80098ce:	6849      	ldr	r1, [r1, #4]
 80098d0:	6923      	ldr	r3, [r4, #16]
 80098d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098d6:	68a3      	ldr	r3, [r4, #8]
 80098d8:	4607      	mov	r7, r0
 80098da:	4691      	mov	r9, r2
 80098dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098e0:	f108 0601 	add.w	r6, r8, #1
 80098e4:	42b3      	cmp	r3, r6
 80098e6:	db0b      	blt.n	8009900 <__lshift+0x38>
 80098e8:	4638      	mov	r0, r7
 80098ea:	f7ff fddf 	bl	80094ac <_Balloc>
 80098ee:	4605      	mov	r5, r0
 80098f0:	b948      	cbnz	r0, 8009906 <__lshift+0x3e>
 80098f2:	4602      	mov	r2, r0
 80098f4:	4b28      	ldr	r3, [pc, #160]	@ (8009998 <__lshift+0xd0>)
 80098f6:	4829      	ldr	r0, [pc, #164]	@ (800999c <__lshift+0xd4>)
 80098f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80098fc:	f7fe fcf4 	bl	80082e8 <__assert_func>
 8009900:	3101      	adds	r1, #1
 8009902:	005b      	lsls	r3, r3, #1
 8009904:	e7ee      	b.n	80098e4 <__lshift+0x1c>
 8009906:	2300      	movs	r3, #0
 8009908:	f100 0114 	add.w	r1, r0, #20
 800990c:	f100 0210 	add.w	r2, r0, #16
 8009910:	4618      	mov	r0, r3
 8009912:	4553      	cmp	r3, sl
 8009914:	db33      	blt.n	800997e <__lshift+0xb6>
 8009916:	6920      	ldr	r0, [r4, #16]
 8009918:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800991c:	f104 0314 	add.w	r3, r4, #20
 8009920:	f019 091f 	ands.w	r9, r9, #31
 8009924:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009928:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800992c:	d02b      	beq.n	8009986 <__lshift+0xbe>
 800992e:	f1c9 0e20 	rsb	lr, r9, #32
 8009932:	468a      	mov	sl, r1
 8009934:	2200      	movs	r2, #0
 8009936:	6818      	ldr	r0, [r3, #0]
 8009938:	fa00 f009 	lsl.w	r0, r0, r9
 800993c:	4310      	orrs	r0, r2
 800993e:	f84a 0b04 	str.w	r0, [sl], #4
 8009942:	f853 2b04 	ldr.w	r2, [r3], #4
 8009946:	459c      	cmp	ip, r3
 8009948:	fa22 f20e 	lsr.w	r2, r2, lr
 800994c:	d8f3      	bhi.n	8009936 <__lshift+0x6e>
 800994e:	ebac 0304 	sub.w	r3, ip, r4
 8009952:	3b15      	subs	r3, #21
 8009954:	f023 0303 	bic.w	r3, r3, #3
 8009958:	3304      	adds	r3, #4
 800995a:	f104 0015 	add.w	r0, r4, #21
 800995e:	4584      	cmp	ip, r0
 8009960:	bf38      	it	cc
 8009962:	2304      	movcc	r3, #4
 8009964:	50ca      	str	r2, [r1, r3]
 8009966:	b10a      	cbz	r2, 800996c <__lshift+0xa4>
 8009968:	f108 0602 	add.w	r6, r8, #2
 800996c:	3e01      	subs	r6, #1
 800996e:	4638      	mov	r0, r7
 8009970:	612e      	str	r6, [r5, #16]
 8009972:	4621      	mov	r1, r4
 8009974:	f7ff fdda 	bl	800952c <_Bfree>
 8009978:	4628      	mov	r0, r5
 800997a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800997e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009982:	3301      	adds	r3, #1
 8009984:	e7c5      	b.n	8009912 <__lshift+0x4a>
 8009986:	3904      	subs	r1, #4
 8009988:	f853 2b04 	ldr.w	r2, [r3], #4
 800998c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009990:	459c      	cmp	ip, r3
 8009992:	d8f9      	bhi.n	8009988 <__lshift+0xc0>
 8009994:	e7ea      	b.n	800996c <__lshift+0xa4>
 8009996:	bf00      	nop
 8009998:	0801db0e 	.word	0x0801db0e
 800999c:	0801db30 	.word	0x0801db30

080099a0 <__mcmp>:
 80099a0:	690a      	ldr	r2, [r1, #16]
 80099a2:	4603      	mov	r3, r0
 80099a4:	6900      	ldr	r0, [r0, #16]
 80099a6:	1a80      	subs	r0, r0, r2
 80099a8:	b530      	push	{r4, r5, lr}
 80099aa:	d10e      	bne.n	80099ca <__mcmp+0x2a>
 80099ac:	3314      	adds	r3, #20
 80099ae:	3114      	adds	r1, #20
 80099b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80099b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80099b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099c0:	4295      	cmp	r5, r2
 80099c2:	d003      	beq.n	80099cc <__mcmp+0x2c>
 80099c4:	d205      	bcs.n	80099d2 <__mcmp+0x32>
 80099c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099ca:	bd30      	pop	{r4, r5, pc}
 80099cc:	42a3      	cmp	r3, r4
 80099ce:	d3f3      	bcc.n	80099b8 <__mcmp+0x18>
 80099d0:	e7fb      	b.n	80099ca <__mcmp+0x2a>
 80099d2:	2001      	movs	r0, #1
 80099d4:	e7f9      	b.n	80099ca <__mcmp+0x2a>
	...

080099d8 <__mdiff>:
 80099d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099dc:	4689      	mov	r9, r1
 80099de:	4606      	mov	r6, r0
 80099e0:	4611      	mov	r1, r2
 80099e2:	4648      	mov	r0, r9
 80099e4:	4614      	mov	r4, r2
 80099e6:	f7ff ffdb 	bl	80099a0 <__mcmp>
 80099ea:	1e05      	subs	r5, r0, #0
 80099ec:	d112      	bne.n	8009a14 <__mdiff+0x3c>
 80099ee:	4629      	mov	r1, r5
 80099f0:	4630      	mov	r0, r6
 80099f2:	f7ff fd5b 	bl	80094ac <_Balloc>
 80099f6:	4602      	mov	r2, r0
 80099f8:	b928      	cbnz	r0, 8009a06 <__mdiff+0x2e>
 80099fa:	4b3f      	ldr	r3, [pc, #252]	@ (8009af8 <__mdiff+0x120>)
 80099fc:	f240 2137 	movw	r1, #567	@ 0x237
 8009a00:	483e      	ldr	r0, [pc, #248]	@ (8009afc <__mdiff+0x124>)
 8009a02:	f7fe fc71 	bl	80082e8 <__assert_func>
 8009a06:	2301      	movs	r3, #1
 8009a08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	b003      	add	sp, #12
 8009a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a14:	bfbc      	itt	lt
 8009a16:	464b      	movlt	r3, r9
 8009a18:	46a1      	movlt	r9, r4
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009a20:	bfba      	itte	lt
 8009a22:	461c      	movlt	r4, r3
 8009a24:	2501      	movlt	r5, #1
 8009a26:	2500      	movge	r5, #0
 8009a28:	f7ff fd40 	bl	80094ac <_Balloc>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	b918      	cbnz	r0, 8009a38 <__mdiff+0x60>
 8009a30:	4b31      	ldr	r3, [pc, #196]	@ (8009af8 <__mdiff+0x120>)
 8009a32:	f240 2145 	movw	r1, #581	@ 0x245
 8009a36:	e7e3      	b.n	8009a00 <__mdiff+0x28>
 8009a38:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009a3c:	6926      	ldr	r6, [r4, #16]
 8009a3e:	60c5      	str	r5, [r0, #12]
 8009a40:	f109 0310 	add.w	r3, r9, #16
 8009a44:	f109 0514 	add.w	r5, r9, #20
 8009a48:	f104 0e14 	add.w	lr, r4, #20
 8009a4c:	f100 0b14 	add.w	fp, r0, #20
 8009a50:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009a54:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009a58:	9301      	str	r3, [sp, #4]
 8009a5a:	46d9      	mov	r9, fp
 8009a5c:	f04f 0c00 	mov.w	ip, #0
 8009a60:	9b01      	ldr	r3, [sp, #4]
 8009a62:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009a66:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009a6a:	9301      	str	r3, [sp, #4]
 8009a6c:	fa1f f38a 	uxth.w	r3, sl
 8009a70:	4619      	mov	r1, r3
 8009a72:	b283      	uxth	r3, r0
 8009a74:	1acb      	subs	r3, r1, r3
 8009a76:	0c00      	lsrs	r0, r0, #16
 8009a78:	4463      	add	r3, ip
 8009a7a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009a7e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009a88:	4576      	cmp	r6, lr
 8009a8a:	f849 3b04 	str.w	r3, [r9], #4
 8009a8e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a92:	d8e5      	bhi.n	8009a60 <__mdiff+0x88>
 8009a94:	1b33      	subs	r3, r6, r4
 8009a96:	3b15      	subs	r3, #21
 8009a98:	f023 0303 	bic.w	r3, r3, #3
 8009a9c:	3415      	adds	r4, #21
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	42a6      	cmp	r6, r4
 8009aa2:	bf38      	it	cc
 8009aa4:	2304      	movcc	r3, #4
 8009aa6:	441d      	add	r5, r3
 8009aa8:	445b      	add	r3, fp
 8009aaa:	461e      	mov	r6, r3
 8009aac:	462c      	mov	r4, r5
 8009aae:	4544      	cmp	r4, r8
 8009ab0:	d30e      	bcc.n	8009ad0 <__mdiff+0xf8>
 8009ab2:	f108 0103 	add.w	r1, r8, #3
 8009ab6:	1b49      	subs	r1, r1, r5
 8009ab8:	f021 0103 	bic.w	r1, r1, #3
 8009abc:	3d03      	subs	r5, #3
 8009abe:	45a8      	cmp	r8, r5
 8009ac0:	bf38      	it	cc
 8009ac2:	2100      	movcc	r1, #0
 8009ac4:	440b      	add	r3, r1
 8009ac6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009aca:	b191      	cbz	r1, 8009af2 <__mdiff+0x11a>
 8009acc:	6117      	str	r7, [r2, #16]
 8009ace:	e79d      	b.n	8009a0c <__mdiff+0x34>
 8009ad0:	f854 1b04 	ldr.w	r1, [r4], #4
 8009ad4:	46e6      	mov	lr, ip
 8009ad6:	0c08      	lsrs	r0, r1, #16
 8009ad8:	fa1c fc81 	uxtah	ip, ip, r1
 8009adc:	4471      	add	r1, lr
 8009ade:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ae2:	b289      	uxth	r1, r1
 8009ae4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ae8:	f846 1b04 	str.w	r1, [r6], #4
 8009aec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009af0:	e7dd      	b.n	8009aae <__mdiff+0xd6>
 8009af2:	3f01      	subs	r7, #1
 8009af4:	e7e7      	b.n	8009ac6 <__mdiff+0xee>
 8009af6:	bf00      	nop
 8009af8:	0801db0e 	.word	0x0801db0e
 8009afc:	0801db30 	.word	0x0801db30

08009b00 <__d2b>:
 8009b00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b04:	460f      	mov	r7, r1
 8009b06:	2101      	movs	r1, #1
 8009b08:	ec59 8b10 	vmov	r8, r9, d0
 8009b0c:	4616      	mov	r6, r2
 8009b0e:	f7ff fccd 	bl	80094ac <_Balloc>
 8009b12:	4604      	mov	r4, r0
 8009b14:	b930      	cbnz	r0, 8009b24 <__d2b+0x24>
 8009b16:	4602      	mov	r2, r0
 8009b18:	4b23      	ldr	r3, [pc, #140]	@ (8009ba8 <__d2b+0xa8>)
 8009b1a:	4824      	ldr	r0, [pc, #144]	@ (8009bac <__d2b+0xac>)
 8009b1c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009b20:	f7fe fbe2 	bl	80082e8 <__assert_func>
 8009b24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009b28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b2c:	b10d      	cbz	r5, 8009b32 <__d2b+0x32>
 8009b2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b32:	9301      	str	r3, [sp, #4]
 8009b34:	f1b8 0300 	subs.w	r3, r8, #0
 8009b38:	d023      	beq.n	8009b82 <__d2b+0x82>
 8009b3a:	4668      	mov	r0, sp
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	f7ff fd7c 	bl	800963a <__lo0bits>
 8009b42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009b46:	b1d0      	cbz	r0, 8009b7e <__d2b+0x7e>
 8009b48:	f1c0 0320 	rsb	r3, r0, #32
 8009b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b50:	430b      	orrs	r3, r1
 8009b52:	40c2      	lsrs	r2, r0
 8009b54:	6163      	str	r3, [r4, #20]
 8009b56:	9201      	str	r2, [sp, #4]
 8009b58:	9b01      	ldr	r3, [sp, #4]
 8009b5a:	61a3      	str	r3, [r4, #24]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	bf0c      	ite	eq
 8009b60:	2201      	moveq	r2, #1
 8009b62:	2202      	movne	r2, #2
 8009b64:	6122      	str	r2, [r4, #16]
 8009b66:	b1a5      	cbz	r5, 8009b92 <__d2b+0x92>
 8009b68:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009b6c:	4405      	add	r5, r0
 8009b6e:	603d      	str	r5, [r7, #0]
 8009b70:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009b74:	6030      	str	r0, [r6, #0]
 8009b76:	4620      	mov	r0, r4
 8009b78:	b003      	add	sp, #12
 8009b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b7e:	6161      	str	r1, [r4, #20]
 8009b80:	e7ea      	b.n	8009b58 <__d2b+0x58>
 8009b82:	a801      	add	r0, sp, #4
 8009b84:	f7ff fd59 	bl	800963a <__lo0bits>
 8009b88:	9b01      	ldr	r3, [sp, #4]
 8009b8a:	6163      	str	r3, [r4, #20]
 8009b8c:	3020      	adds	r0, #32
 8009b8e:	2201      	movs	r2, #1
 8009b90:	e7e8      	b.n	8009b64 <__d2b+0x64>
 8009b92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009b9a:	6038      	str	r0, [r7, #0]
 8009b9c:	6918      	ldr	r0, [r3, #16]
 8009b9e:	f7ff fd2d 	bl	80095fc <__hi0bits>
 8009ba2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ba6:	e7e5      	b.n	8009b74 <__d2b+0x74>
 8009ba8:	0801db0e 	.word	0x0801db0e
 8009bac:	0801db30 	.word	0x0801db30

08009bb0 <_malloc_usable_size_r>:
 8009bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bb4:	1f18      	subs	r0, r3, #4
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	bfbc      	itt	lt
 8009bba:	580b      	ldrlt	r3, [r1, r0]
 8009bbc:	18c0      	addlt	r0, r0, r3
 8009bbe:	4770      	bx	lr

08009bc0 <__sread>:
 8009bc0:	b510      	push	{r4, lr}
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bc8:	f000 f9a4 	bl	8009f14 <_read_r>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	bfab      	itete	ge
 8009bd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8009bd4:	181b      	addge	r3, r3, r0
 8009bd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009bda:	bfac      	ite	ge
 8009bdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009bde:	81a3      	strhlt	r3, [r4, #12]
 8009be0:	bd10      	pop	{r4, pc}

08009be2 <__swrite>:
 8009be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be6:	461f      	mov	r7, r3
 8009be8:	898b      	ldrh	r3, [r1, #12]
 8009bea:	05db      	lsls	r3, r3, #23
 8009bec:	4605      	mov	r5, r0
 8009bee:	460c      	mov	r4, r1
 8009bf0:	4616      	mov	r6, r2
 8009bf2:	d505      	bpl.n	8009c00 <__swrite+0x1e>
 8009bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f000 f978 	bl	8009ef0 <_lseek_r>
 8009c00:	89a3      	ldrh	r3, [r4, #12]
 8009c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c0a:	81a3      	strh	r3, [r4, #12]
 8009c0c:	4632      	mov	r2, r6
 8009c0e:	463b      	mov	r3, r7
 8009c10:	4628      	mov	r0, r5
 8009c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c16:	f000 b98f 	b.w	8009f38 <_write_r>

08009c1a <__sseek>:
 8009c1a:	b510      	push	{r4, lr}
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c22:	f000 f965 	bl	8009ef0 <_lseek_r>
 8009c26:	1c43      	adds	r3, r0, #1
 8009c28:	89a3      	ldrh	r3, [r4, #12]
 8009c2a:	bf15      	itete	ne
 8009c2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009c2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009c32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009c36:	81a3      	strheq	r3, [r4, #12]
 8009c38:	bf18      	it	ne
 8009c3a:	81a3      	strhne	r3, [r4, #12]
 8009c3c:	bd10      	pop	{r4, pc}

08009c3e <__sclose>:
 8009c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c42:	f000 b923 	b.w	8009e8c <_close_r>
	...

08009c48 <fiprintf>:
 8009c48:	b40e      	push	{r1, r2, r3}
 8009c4a:	b503      	push	{r0, r1, lr}
 8009c4c:	4601      	mov	r1, r0
 8009c4e:	ab03      	add	r3, sp, #12
 8009c50:	4805      	ldr	r0, [pc, #20]	@ (8009c68 <fiprintf+0x20>)
 8009c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c56:	6800      	ldr	r0, [r0, #0]
 8009c58:	9301      	str	r3, [sp, #4]
 8009c5a:	f7ff fb0f 	bl	800927c <_vfiprintf_r>
 8009c5e:	b002      	add	sp, #8
 8009c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c64:	b003      	add	sp, #12
 8009c66:	4770      	bx	lr
 8009c68:	24000660 	.word	0x24000660

08009c6c <__swbuf_r>:
 8009c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6e:	460e      	mov	r6, r1
 8009c70:	4614      	mov	r4, r2
 8009c72:	4605      	mov	r5, r0
 8009c74:	b118      	cbz	r0, 8009c7e <__swbuf_r+0x12>
 8009c76:	6a03      	ldr	r3, [r0, #32]
 8009c78:	b90b      	cbnz	r3, 8009c7e <__swbuf_r+0x12>
 8009c7a:	f7fe fa67 	bl	800814c <__sinit>
 8009c7e:	69a3      	ldr	r3, [r4, #24]
 8009c80:	60a3      	str	r3, [r4, #8]
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	071a      	lsls	r2, r3, #28
 8009c86:	d501      	bpl.n	8009c8c <__swbuf_r+0x20>
 8009c88:	6923      	ldr	r3, [r4, #16]
 8009c8a:	b943      	cbnz	r3, 8009c9e <__swbuf_r+0x32>
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	4628      	mov	r0, r5
 8009c90:	f000 f82a 	bl	8009ce8 <__swsetup_r>
 8009c94:	b118      	cbz	r0, 8009c9e <__swbuf_r+0x32>
 8009c96:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	6922      	ldr	r2, [r4, #16]
 8009ca2:	1a98      	subs	r0, r3, r2
 8009ca4:	6963      	ldr	r3, [r4, #20]
 8009ca6:	b2f6      	uxtb	r6, r6
 8009ca8:	4283      	cmp	r3, r0
 8009caa:	4637      	mov	r7, r6
 8009cac:	dc05      	bgt.n	8009cba <__swbuf_r+0x4e>
 8009cae:	4621      	mov	r1, r4
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	f7fe f96b 	bl	8007f8c <_fflush_r>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d1ed      	bne.n	8009c96 <__swbuf_r+0x2a>
 8009cba:	68a3      	ldr	r3, [r4, #8]
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	60a3      	str	r3, [r4, #8]
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	1c5a      	adds	r2, r3, #1
 8009cc4:	6022      	str	r2, [r4, #0]
 8009cc6:	701e      	strb	r6, [r3, #0]
 8009cc8:	6962      	ldr	r2, [r4, #20]
 8009cca:	1c43      	adds	r3, r0, #1
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d004      	beq.n	8009cda <__swbuf_r+0x6e>
 8009cd0:	89a3      	ldrh	r3, [r4, #12]
 8009cd2:	07db      	lsls	r3, r3, #31
 8009cd4:	d5e1      	bpl.n	8009c9a <__swbuf_r+0x2e>
 8009cd6:	2e0a      	cmp	r6, #10
 8009cd8:	d1df      	bne.n	8009c9a <__swbuf_r+0x2e>
 8009cda:	4621      	mov	r1, r4
 8009cdc:	4628      	mov	r0, r5
 8009cde:	f7fe f955 	bl	8007f8c <_fflush_r>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d0d9      	beq.n	8009c9a <__swbuf_r+0x2e>
 8009ce6:	e7d6      	b.n	8009c96 <__swbuf_r+0x2a>

08009ce8 <__swsetup_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4b29      	ldr	r3, [pc, #164]	@ (8009d90 <__swsetup_r+0xa8>)
 8009cec:	4605      	mov	r5, r0
 8009cee:	6818      	ldr	r0, [r3, #0]
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	b118      	cbz	r0, 8009cfc <__swsetup_r+0x14>
 8009cf4:	6a03      	ldr	r3, [r0, #32]
 8009cf6:	b90b      	cbnz	r3, 8009cfc <__swsetup_r+0x14>
 8009cf8:	f7fe fa28 	bl	800814c <__sinit>
 8009cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d00:	0719      	lsls	r1, r3, #28
 8009d02:	d422      	bmi.n	8009d4a <__swsetup_r+0x62>
 8009d04:	06da      	lsls	r2, r3, #27
 8009d06:	d407      	bmi.n	8009d18 <__swsetup_r+0x30>
 8009d08:	2209      	movs	r2, #9
 8009d0a:	602a      	str	r2, [r5, #0]
 8009d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d10:	81a3      	strh	r3, [r4, #12]
 8009d12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d16:	e033      	b.n	8009d80 <__swsetup_r+0x98>
 8009d18:	0758      	lsls	r0, r3, #29
 8009d1a:	d512      	bpl.n	8009d42 <__swsetup_r+0x5a>
 8009d1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d1e:	b141      	cbz	r1, 8009d32 <__swsetup_r+0x4a>
 8009d20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d24:	4299      	cmp	r1, r3
 8009d26:	d002      	beq.n	8009d2e <__swsetup_r+0x46>
 8009d28:	4628      	mov	r0, r5
 8009d2a:	f7ff f8db 	bl	8008ee4 <_free_r>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d38:	81a3      	strh	r3, [r4, #12]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	6063      	str	r3, [r4, #4]
 8009d3e:	6923      	ldr	r3, [r4, #16]
 8009d40:	6023      	str	r3, [r4, #0]
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	f043 0308 	orr.w	r3, r3, #8
 8009d48:	81a3      	strh	r3, [r4, #12]
 8009d4a:	6923      	ldr	r3, [r4, #16]
 8009d4c:	b94b      	cbnz	r3, 8009d62 <__swsetup_r+0x7a>
 8009d4e:	89a3      	ldrh	r3, [r4, #12]
 8009d50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d58:	d003      	beq.n	8009d62 <__swsetup_r+0x7a>
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	f000 f83f 	bl	8009de0 <__smakebuf_r>
 8009d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d66:	f013 0201 	ands.w	r2, r3, #1
 8009d6a:	d00a      	beq.n	8009d82 <__swsetup_r+0x9a>
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	60a2      	str	r2, [r4, #8]
 8009d70:	6962      	ldr	r2, [r4, #20]
 8009d72:	4252      	negs	r2, r2
 8009d74:	61a2      	str	r2, [r4, #24]
 8009d76:	6922      	ldr	r2, [r4, #16]
 8009d78:	b942      	cbnz	r2, 8009d8c <__swsetup_r+0xa4>
 8009d7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009d7e:	d1c5      	bne.n	8009d0c <__swsetup_r+0x24>
 8009d80:	bd38      	pop	{r3, r4, r5, pc}
 8009d82:	0799      	lsls	r1, r3, #30
 8009d84:	bf58      	it	pl
 8009d86:	6962      	ldrpl	r2, [r4, #20]
 8009d88:	60a2      	str	r2, [r4, #8]
 8009d8a:	e7f4      	b.n	8009d76 <__swsetup_r+0x8e>
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	e7f7      	b.n	8009d80 <__swsetup_r+0x98>
 8009d90:	24000660 	.word	0x24000660

08009d94 <__swhatbuf_r>:
 8009d94:	b570      	push	{r4, r5, r6, lr}
 8009d96:	460c      	mov	r4, r1
 8009d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d9c:	2900      	cmp	r1, #0
 8009d9e:	b096      	sub	sp, #88	@ 0x58
 8009da0:	4615      	mov	r5, r2
 8009da2:	461e      	mov	r6, r3
 8009da4:	da0d      	bge.n	8009dc2 <__swhatbuf_r+0x2e>
 8009da6:	89a3      	ldrh	r3, [r4, #12]
 8009da8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009dac:	f04f 0100 	mov.w	r1, #0
 8009db0:	bf14      	ite	ne
 8009db2:	2340      	movne	r3, #64	@ 0x40
 8009db4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009db8:	2000      	movs	r0, #0
 8009dba:	6031      	str	r1, [r6, #0]
 8009dbc:	602b      	str	r3, [r5, #0]
 8009dbe:	b016      	add	sp, #88	@ 0x58
 8009dc0:	bd70      	pop	{r4, r5, r6, pc}
 8009dc2:	466a      	mov	r2, sp
 8009dc4:	f000 f872 	bl	8009eac <_fstat_r>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	dbec      	blt.n	8009da6 <__swhatbuf_r+0x12>
 8009dcc:	9901      	ldr	r1, [sp, #4]
 8009dce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009dd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009dd6:	4259      	negs	r1, r3
 8009dd8:	4159      	adcs	r1, r3
 8009dda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dde:	e7eb      	b.n	8009db8 <__swhatbuf_r+0x24>

08009de0 <__smakebuf_r>:
 8009de0:	898b      	ldrh	r3, [r1, #12]
 8009de2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009de4:	079d      	lsls	r5, r3, #30
 8009de6:	4606      	mov	r6, r0
 8009de8:	460c      	mov	r4, r1
 8009dea:	d507      	bpl.n	8009dfc <__smakebuf_r+0x1c>
 8009dec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	6123      	str	r3, [r4, #16]
 8009df4:	2301      	movs	r3, #1
 8009df6:	6163      	str	r3, [r4, #20]
 8009df8:	b003      	add	sp, #12
 8009dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dfc:	ab01      	add	r3, sp, #4
 8009dfe:	466a      	mov	r2, sp
 8009e00:	f7ff ffc8 	bl	8009d94 <__swhatbuf_r>
 8009e04:	9f00      	ldr	r7, [sp, #0]
 8009e06:	4605      	mov	r5, r0
 8009e08:	4639      	mov	r1, r7
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f7fd fe2c 	bl	8007a68 <_malloc_r>
 8009e10:	b948      	cbnz	r0, 8009e26 <__smakebuf_r+0x46>
 8009e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e16:	059a      	lsls	r2, r3, #22
 8009e18:	d4ee      	bmi.n	8009df8 <__smakebuf_r+0x18>
 8009e1a:	f023 0303 	bic.w	r3, r3, #3
 8009e1e:	f043 0302 	orr.w	r3, r3, #2
 8009e22:	81a3      	strh	r3, [r4, #12]
 8009e24:	e7e2      	b.n	8009dec <__smakebuf_r+0xc>
 8009e26:	89a3      	ldrh	r3, [r4, #12]
 8009e28:	6020      	str	r0, [r4, #0]
 8009e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e2e:	81a3      	strh	r3, [r4, #12]
 8009e30:	9b01      	ldr	r3, [sp, #4]
 8009e32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e36:	b15b      	cbz	r3, 8009e50 <__smakebuf_r+0x70>
 8009e38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	f000 f847 	bl	8009ed0 <_isatty_r>
 8009e42:	b128      	cbz	r0, 8009e50 <__smakebuf_r+0x70>
 8009e44:	89a3      	ldrh	r3, [r4, #12]
 8009e46:	f023 0303 	bic.w	r3, r3, #3
 8009e4a:	f043 0301 	orr.w	r3, r3, #1
 8009e4e:	81a3      	strh	r3, [r4, #12]
 8009e50:	89a3      	ldrh	r3, [r4, #12]
 8009e52:	431d      	orrs	r5, r3
 8009e54:	81a5      	strh	r5, [r4, #12]
 8009e56:	e7cf      	b.n	8009df8 <__smakebuf_r+0x18>

08009e58 <memmove>:
 8009e58:	4288      	cmp	r0, r1
 8009e5a:	b510      	push	{r4, lr}
 8009e5c:	eb01 0402 	add.w	r4, r1, r2
 8009e60:	d902      	bls.n	8009e68 <memmove+0x10>
 8009e62:	4284      	cmp	r4, r0
 8009e64:	4623      	mov	r3, r4
 8009e66:	d807      	bhi.n	8009e78 <memmove+0x20>
 8009e68:	1e43      	subs	r3, r0, #1
 8009e6a:	42a1      	cmp	r1, r4
 8009e6c:	d008      	beq.n	8009e80 <memmove+0x28>
 8009e6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e76:	e7f8      	b.n	8009e6a <memmove+0x12>
 8009e78:	4402      	add	r2, r0
 8009e7a:	4601      	mov	r1, r0
 8009e7c:	428a      	cmp	r2, r1
 8009e7e:	d100      	bne.n	8009e82 <memmove+0x2a>
 8009e80:	bd10      	pop	{r4, pc}
 8009e82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e8a:	e7f7      	b.n	8009e7c <memmove+0x24>

08009e8c <_close_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4d06      	ldr	r5, [pc, #24]	@ (8009ea8 <_close_r+0x1c>)
 8009e90:	2300      	movs	r3, #0
 8009e92:	4604      	mov	r4, r0
 8009e94:	4608      	mov	r0, r1
 8009e96:	602b      	str	r3, [r5, #0]
 8009e98:	f7f7 fab4 	bl	8001404 <_close>
 8009e9c:	1c43      	adds	r3, r0, #1
 8009e9e:	d102      	bne.n	8009ea6 <_close_r+0x1a>
 8009ea0:	682b      	ldr	r3, [r5, #0]
 8009ea2:	b103      	cbz	r3, 8009ea6 <_close_r+0x1a>
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	bd38      	pop	{r3, r4, r5, pc}
 8009ea8:	240010c4 	.word	0x240010c4

08009eac <_fstat_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	4d07      	ldr	r5, [pc, #28]	@ (8009ecc <_fstat_r+0x20>)
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	4608      	mov	r0, r1
 8009eb6:	4611      	mov	r1, r2
 8009eb8:	602b      	str	r3, [r5, #0]
 8009eba:	f7f7 faa6 	bl	800140a <_fstat>
 8009ebe:	1c43      	adds	r3, r0, #1
 8009ec0:	d102      	bne.n	8009ec8 <_fstat_r+0x1c>
 8009ec2:	682b      	ldr	r3, [r5, #0]
 8009ec4:	b103      	cbz	r3, 8009ec8 <_fstat_r+0x1c>
 8009ec6:	6023      	str	r3, [r4, #0]
 8009ec8:	bd38      	pop	{r3, r4, r5, pc}
 8009eca:	bf00      	nop
 8009ecc:	240010c4 	.word	0x240010c4

08009ed0 <_isatty_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	4d06      	ldr	r5, [pc, #24]	@ (8009eec <_isatty_r+0x1c>)
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	4608      	mov	r0, r1
 8009eda:	602b      	str	r3, [r5, #0]
 8009edc:	f7f7 fa9a 	bl	8001414 <_isatty>
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	d102      	bne.n	8009eea <_isatty_r+0x1a>
 8009ee4:	682b      	ldr	r3, [r5, #0]
 8009ee6:	b103      	cbz	r3, 8009eea <_isatty_r+0x1a>
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	240010c4 	.word	0x240010c4

08009ef0 <_lseek_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4d07      	ldr	r5, [pc, #28]	@ (8009f10 <_lseek_r+0x20>)
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	4608      	mov	r0, r1
 8009ef8:	4611      	mov	r1, r2
 8009efa:	2200      	movs	r2, #0
 8009efc:	602a      	str	r2, [r5, #0]
 8009efe:	461a      	mov	r2, r3
 8009f00:	f7f7 fa8a 	bl	8001418 <_lseek>
 8009f04:	1c43      	adds	r3, r0, #1
 8009f06:	d102      	bne.n	8009f0e <_lseek_r+0x1e>
 8009f08:	682b      	ldr	r3, [r5, #0]
 8009f0a:	b103      	cbz	r3, 8009f0e <_lseek_r+0x1e>
 8009f0c:	6023      	str	r3, [r4, #0]
 8009f0e:	bd38      	pop	{r3, r4, r5, pc}
 8009f10:	240010c4 	.word	0x240010c4

08009f14 <_read_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4d07      	ldr	r5, [pc, #28]	@ (8009f34 <_read_r+0x20>)
 8009f18:	4604      	mov	r4, r0
 8009f1a:	4608      	mov	r0, r1
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	2200      	movs	r2, #0
 8009f20:	602a      	str	r2, [r5, #0]
 8009f22:	461a      	mov	r2, r3
 8009f24:	f7f7 fa60 	bl	80013e8 <_read>
 8009f28:	1c43      	adds	r3, r0, #1
 8009f2a:	d102      	bne.n	8009f32 <_read_r+0x1e>
 8009f2c:	682b      	ldr	r3, [r5, #0]
 8009f2e:	b103      	cbz	r3, 8009f32 <_read_r+0x1e>
 8009f30:	6023      	str	r3, [r4, #0]
 8009f32:	bd38      	pop	{r3, r4, r5, pc}
 8009f34:	240010c4 	.word	0x240010c4

08009f38 <_write_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	4d07      	ldr	r5, [pc, #28]	@ (8009f58 <_write_r+0x20>)
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	4608      	mov	r0, r1
 8009f40:	4611      	mov	r1, r2
 8009f42:	2200      	movs	r2, #0
 8009f44:	602a      	str	r2, [r5, #0]
 8009f46:	461a      	mov	r2, r3
 8009f48:	f7fb fc80 	bl	800584c <_write>
 8009f4c:	1c43      	adds	r3, r0, #1
 8009f4e:	d102      	bne.n	8009f56 <_write_r+0x1e>
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	b103      	cbz	r3, 8009f56 <_write_r+0x1e>
 8009f54:	6023      	str	r3, [r4, #0]
 8009f56:	bd38      	pop	{r3, r4, r5, pc}
 8009f58:	240010c4 	.word	0x240010c4

08009f5c <abort>:
 8009f5c:	b508      	push	{r3, lr}
 8009f5e:	2006      	movs	r0, #6
 8009f60:	f000 f85e 	bl	800a020 <raise>
 8009f64:	2001      	movs	r0, #1
 8009f66:	f7f7 fa39 	bl	80013dc <_exit>

08009f6a <_calloc_r>:
 8009f6a:	b570      	push	{r4, r5, r6, lr}
 8009f6c:	fba1 5402 	umull	r5, r4, r1, r2
 8009f70:	b93c      	cbnz	r4, 8009f82 <_calloc_r+0x18>
 8009f72:	4629      	mov	r1, r5
 8009f74:	f7fd fd78 	bl	8007a68 <_malloc_r>
 8009f78:	4606      	mov	r6, r0
 8009f7a:	b928      	cbnz	r0, 8009f88 <_calloc_r+0x1e>
 8009f7c:	2600      	movs	r6, #0
 8009f7e:	4630      	mov	r0, r6
 8009f80:	bd70      	pop	{r4, r5, r6, pc}
 8009f82:	220c      	movs	r2, #12
 8009f84:	6002      	str	r2, [r0, #0]
 8009f86:	e7f9      	b.n	8009f7c <_calloc_r+0x12>
 8009f88:	462a      	mov	r2, r5
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	f7fe f954 	bl	8008238 <memset>
 8009f90:	e7f5      	b.n	8009f7e <_calloc_r+0x14>

08009f92 <__ascii_mbtowc>:
 8009f92:	b082      	sub	sp, #8
 8009f94:	b901      	cbnz	r1, 8009f98 <__ascii_mbtowc+0x6>
 8009f96:	a901      	add	r1, sp, #4
 8009f98:	b142      	cbz	r2, 8009fac <__ascii_mbtowc+0x1a>
 8009f9a:	b14b      	cbz	r3, 8009fb0 <__ascii_mbtowc+0x1e>
 8009f9c:	7813      	ldrb	r3, [r2, #0]
 8009f9e:	600b      	str	r3, [r1, #0]
 8009fa0:	7812      	ldrb	r2, [r2, #0]
 8009fa2:	1e10      	subs	r0, r2, #0
 8009fa4:	bf18      	it	ne
 8009fa6:	2001      	movne	r0, #1
 8009fa8:	b002      	add	sp, #8
 8009faa:	4770      	bx	lr
 8009fac:	4610      	mov	r0, r2
 8009fae:	e7fb      	b.n	8009fa8 <__ascii_mbtowc+0x16>
 8009fb0:	f06f 0001 	mvn.w	r0, #1
 8009fb4:	e7f8      	b.n	8009fa8 <__ascii_mbtowc+0x16>

08009fb6 <__ascii_wctomb>:
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	4608      	mov	r0, r1
 8009fba:	b141      	cbz	r1, 8009fce <__ascii_wctomb+0x18>
 8009fbc:	2aff      	cmp	r2, #255	@ 0xff
 8009fbe:	d904      	bls.n	8009fca <__ascii_wctomb+0x14>
 8009fc0:	228a      	movs	r2, #138	@ 0x8a
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009fc8:	4770      	bx	lr
 8009fca:	700a      	strb	r2, [r1, #0]
 8009fcc:	2001      	movs	r0, #1
 8009fce:	4770      	bx	lr

08009fd0 <_raise_r>:
 8009fd0:	291f      	cmp	r1, #31
 8009fd2:	b538      	push	{r3, r4, r5, lr}
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	d904      	bls.n	8009fe4 <_raise_r+0x14>
 8009fda:	2316      	movs	r3, #22
 8009fdc:	6003      	str	r3, [r0, #0]
 8009fde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009fe2:	bd38      	pop	{r3, r4, r5, pc}
 8009fe4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009fe6:	b112      	cbz	r2, 8009fee <_raise_r+0x1e>
 8009fe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fec:	b94b      	cbnz	r3, 800a002 <_raise_r+0x32>
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f000 f830 	bl	800a054 <_getpid_r>
 8009ff4:	4622      	mov	r2, r4
 8009ff6:	4601      	mov	r1, r0
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ffe:	f000 b817 	b.w	800a030 <_kill_r>
 800a002:	2b01      	cmp	r3, #1
 800a004:	d00a      	beq.n	800a01c <_raise_r+0x4c>
 800a006:	1c59      	adds	r1, r3, #1
 800a008:	d103      	bne.n	800a012 <_raise_r+0x42>
 800a00a:	2316      	movs	r3, #22
 800a00c:	6003      	str	r3, [r0, #0]
 800a00e:	2001      	movs	r0, #1
 800a010:	e7e7      	b.n	8009fe2 <_raise_r+0x12>
 800a012:	2100      	movs	r1, #0
 800a014:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a018:	4620      	mov	r0, r4
 800a01a:	4798      	blx	r3
 800a01c:	2000      	movs	r0, #0
 800a01e:	e7e0      	b.n	8009fe2 <_raise_r+0x12>

0800a020 <raise>:
 800a020:	4b02      	ldr	r3, [pc, #8]	@ (800a02c <raise+0xc>)
 800a022:	4601      	mov	r1, r0
 800a024:	6818      	ldr	r0, [r3, #0]
 800a026:	f7ff bfd3 	b.w	8009fd0 <_raise_r>
 800a02a:	bf00      	nop
 800a02c:	24000660 	.word	0x24000660

0800a030 <_kill_r>:
 800a030:	b538      	push	{r3, r4, r5, lr}
 800a032:	4d07      	ldr	r5, [pc, #28]	@ (800a050 <_kill_r+0x20>)
 800a034:	2300      	movs	r3, #0
 800a036:	4604      	mov	r4, r0
 800a038:	4608      	mov	r0, r1
 800a03a:	4611      	mov	r1, r2
 800a03c:	602b      	str	r3, [r5, #0]
 800a03e:	f7f7 f9c5 	bl	80013cc <_kill>
 800a042:	1c43      	adds	r3, r0, #1
 800a044:	d102      	bne.n	800a04c <_kill_r+0x1c>
 800a046:	682b      	ldr	r3, [r5, #0]
 800a048:	b103      	cbz	r3, 800a04c <_kill_r+0x1c>
 800a04a:	6023      	str	r3, [r4, #0]
 800a04c:	bd38      	pop	{r3, r4, r5, pc}
 800a04e:	bf00      	nop
 800a050:	240010c4 	.word	0x240010c4

0800a054 <_getpid_r>:
 800a054:	f7f7 b9b8 	b.w	80013c8 <_getpid>

0800a058 <_init>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	bf00      	nop
 800a05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05e:	bc08      	pop	{r3}
 800a060:	469e      	mov	lr, r3
 800a062:	4770      	bx	lr

0800a064 <_fini>:
 800a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a066:	bf00      	nop
 800a068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06a:	bc08      	pop	{r3}
 800a06c:	469e      	mov	lr, r3
 800a06e:	4770      	bx	lr
